---
title: "Heuristics"
format:
  revealjs:
    slide-number: c/t
    show-slide-number: all
---

## Relevant algorithms

We have worked with two recursive algorithmic patterns:

* Exhaustive search (enumeration)
* Backtracking

## The travelling salesperson problem (TSP)

"Given a list of cities and the distances between each pair of cities, what is the shortest possible route that visits each city exactly once and returns to the origin city?"

How would you solve this using exhaustive search?

## The travelling salesperson problem (TSP)

How would you solve this using exhaustive search?

1. Calculate all the possible routes
1. Calculate the distance of each route 
1. Choose the shortest route

## The travelling salesperson problem (TSP)

How would you solve this with backtracking?

What would be a way to prune branches?

## The travelling salesperson problem (TSP)

What would be a way to prune branches?

Keep track of minimal distance found, if trip in the current branch at any point 
has greater distance than the minimal trip previously found, backtrack

## Heuristics

* Exhaustively searching every possible solution does not work for all problems,
it can get very costly.

* We can make use of use a **heuristic** to approximate answers to a problem 

* A **heuristic**  guides an algorithm to find good choices

* A **heuristic** is a shortcut that sacrifices accuracy and completenes

* The goal is to find approximate solutions more quickly

## The travelling salesperson problem (TSP)

Heuristics: greedy algorithm

* Pick whatever is currently the best next step
* Choose the closest city that is available for the trip at each step

## Greedy Algorithm

* Choose best option at each step
* Solve remaining subproblems after making greedy step

No need to calculate all steps/branches like in enumeration and backtracking

## Knapsack Problem 

**Given a set of items, each with a weight and a value, determine which items to include in the collection so that the total weight is less than or equal to a given limit and the total value is as large as possible.**

Discuss with your table mates ways to approach this problem

Example: limit weight of knapsack is 5kg

* Item 1: $400, 3kg
* Item 2: $200, 1kg
* Item 3: $300, 3kg

## Knapsack Problem 

* Best items have big value, small size
* Order items in a way to represent that big value and small size is better, and then pack them until they don't fit into the knapsack anymore
* Compare solution total value with the highest valuable item (greedy choice)

Example: limit weight of knapsack is 200kg

* Item 1: $6, 3kg
* Item 2: $200, 200kg

## Knapsack Problem -- Java Implementation

* What classes do you need?

## `Item` Implementation

```{java}
public class Item {
	private String name;
	private double value;
	private double weight;
	
	public Item(String n, double v, double w) {
		name = n;
		value = v;
		weight = w;
	}
	
	public String getName() {
		return name;
	}
	
	public double getValue() {
		return value;
	}
	
	public double getWeight() {
		return weight;
	}
	
	public double getRatio() {
		return value/weight;
	}
	
}
```

## `Knapsack` Implementation

```{java}
import java.util.ArrayList;

public class Knapsack {
	private double limit;
	private ArrayList<Item> contents = new ArrayList<>();
	
	public Knapsack(double limit) {
		this.limit = limit;
	}
	
	public double getTotalWeight() {
		double total = 0;
		for (Item item : contents) {
			total += item.getWeight();
		}
		return total;
	}
	
	public double getValue() {
		double total = 0;
		for (Item item : contents) {
			total += item.getValue();
		}
		return total;
	}
	
	public double getLimit() {
		return limit;
	}
	
	public void empty() {
		ArrayList<Item> allItems = new ArrayList<>(contents);
		for(Item item : allItems) contents.remove(item);
	}
	
	public boolean addItem(Item item) {
		if (item.getWeight() + getTotalWeight() <= limit) {
			contents.add(item);
			return true;
		} else return false;
	}
	
	public String toString() {
		String message = "";
		for (Item item : contents) message += item.getName() + " ";
		message += "for a total value of " + getValue();
		return message;
	}
}

```

## Knapsack Problem Implementation

```{java}
import java.util.ArrayList;
import java.util.Collections;

public class KnapsackProblem {

	public static void main(String[] args) {
		Knapsack myBag = new Knapsack(100);
		ArrayList<Item> items = new ArrayList<>();
		items.add(new Item("A", 10, 10));
		items.add(new Item("B", 10, 100));
		items.add(new Item("C", 1, 100));
		items.add(new Item("D", 100, 10));
		items.add(new Item("E", 100, 10));
		items.add(new Item("F", 50, 10));
		//items.add(new Item("G", 300, 100));
		
		// make copy for step 3
		ArrayList<Item> originalItems = new ArrayList<>(items);
		
		// step 1: sort by value/weight rations
		ArrayList<Double> ratios = new ArrayList<>();
		for (Item item : items) {
			ratios.add(item.getRatio());
		}
		ArrayList<Double> sortedRatios = new ArrayList<>(ratios);
		Collections.sort(sortedRatios, Collections.reverseOrder());
	
		// step 2: add each item to knapsack in ratio order
		for (Double ratio : sortedRatios) {
			// get item with that ratio
			int index = ratios.indexOf(ratio);
			Item item = items.get(index);
			// remote item and ratio
			ratios.remove(ratio);
			items.remove(item);
			// message to user
			System.out.println("Trying to add " + item.getName());
			// try to add item to knapsack
			if (myBag.addItem(item)) continue;
			else break;
		}
		
		// step 3: is there any item that is worth individually more?
		for (Item item : originalItems) {
			if (item.getValue() > myBag.getValue()) {
				myBag.empty();
				myBag.addItem(item);
			}
		}
		
		System.out.println(myBag.toString());
		
	}

}

```

