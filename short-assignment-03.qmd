---
title: "Lab 03"
---

# Short Assignment 03

## Introduction 

The goal of today's lab session is to learn about peer review in regards to our class
and code review in industry. In this section, you will be introduced to Aropa, the
peer reviewing tool we will be using, and write your first two peer reviews. 

Start the section by reading about the benefits of Code Review in industry by 
following the link below. 

https://blog.fullstory.com/what-we-learned-from-google-code-reviews-arent-just-for-catching-bugs/



## Setup for Peer Review 
You will need to go to the Aropa website, click on the U of A logo or select
the University of Arizona on the dropdown menu, and then log in using your UA
netid and the class code 386198. The website is linked below and the same 
instructions are posted on Piazza. 

https://aropa2.gla.ac.uk/aropa/aropa.php

You will be prompted to change your password. Choose a secure password that 
you will remember as you will use this same account for peer reviews in 
the future. 

## The Assignment
Overview : Complete two peer reviews for PA2. 

### Upload Process - Prior to Section 
You will need to upload your PA2main.java file first. If you do not have
access to your PA2main from the computer you are on, remember that you 
can download this file through your Gradescope account. 

TODO: Add Aropa usage instructions once I am able to set up the assignment and
see the student's view. 


### Review Process
You will be responding to the statements below in regards to two other
students' code. You will be ranking your agreement of how well the statements 
relate to the student's code on a scale of Strongly Agree to Strongly Disagree.

In addition to the rankings, you will have a comment block below to add a
rational for your ranking and commentary on how the student could improve. 
When writing your comments, keep the Department of Computer Science's code of 
conduct (https://www2.cs.arizona.edu/codeofconduct.pdf) in mind. Your feedback 
should be constructive, polite, and contribute to a positive learning environment. 

1.	Clarity: The student's code is easily readable. This being able to read a method
	in no more than 5-7 minutes and being able to read each method without scrolling.
     
2.	Clarity: The students code is well commented, with complex functions having a 
	descriptive comment, comments inside of non-trivial methods to elaborate on 
	complex code, and a class comment with usage and file format. 

3.	Decomposition: The student avoids nested loops or conditionals and chaining to 
	self-defined methods. 
	
4.	Decomposition: The student's code exhibits good decomposition. They used all non-
	static methods and only turned in one source file.

5.	Style: The code follows the style guidelines. No lines are longer than 80 columns, does 
	not mix tabs and spaces and has curly brackets on the same line as the loop or conditional. 
	

