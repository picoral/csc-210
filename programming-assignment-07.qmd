---
title: "Programming Assignment 07"
---


```{r}
#| eval: true
#| echo: false
#| message: false
#| warning: false
library(tidyverse)
library(readxl)
data <- read_excel("assessment-deadlines.xlsx")
```


Deadline: `r data %>% filter(Assignment == "PA7") %>%  select(Deadline)` -- Wednesday, 11:30pm

# PA7-GraphColoring 

PA7 is about implementing graph coloring in three different ways.

## Learning Objectives

The goal of this assignment is to practice the following
algorithm patterns, data structures, and decomposition approaches.

* Algorithmic patterns: recursive backtracking and heuristic

* Data structure: graphs

* Decomposition: using provided classes other than the Java libraries


## Graph Coloring

Many important problems such as coloring a map and register allocation
can be expressed as graph coloring problems.  See
[https://en.wikipedia.org/wiki/Graph_coloring] for examples and mention
of Sudoku as a kind of graph coloring problem.

## The Assignment

In this assignment you will be implementing graph coloring three
different ways: recursive backtracking, heuristic, and your own
approach.

The program should have the following usage:
    java PA7Main infile.mtx [HEURISTIC,BACKTRACK,MINE,TIME]

The input files will be from the SuiteSparse Matrix Collection
(https://sparse.tamu.edu/about). 
See https://math.nist.gov/MatrixMarket/formats.html for a description of the .mtx
format.  You CAN write similar code to the following code to read in the .mtx format.
http://docs.roguewave.com/imsl/java/5.0.1/api/com/imsl/math/SparseMatrixEx2.html.
Reading .mtx files will be covered in Section 8.

Example output to standard out is provided in the PublicTestCases/
for HEURISTIC and BACKTRACK.  You will be running your own 
algorithm with the MINE command.  The output for TIME is shown below.

Your program should also generate before and after .dot files with
the nodes colored.  See the before and after .dot files in the
PublicTestCases/ subdirectory for examples and carefully
read the code at the top of the provided Coloring.java file.
You can use whatever node filling colors you would like  
(see https://www.graphviz.org/doc/info/colors.html).
Writing dot files will be covered in Section 8.

You CAN use the code provided and/or written in Section 8
to read in files, store a graph, and output
a graph to a dot file in your PA7.

### Recursive Backtracking

Will make the decisions starting with node 1 and continuing through the
nodes in order.  Everytime a node coloring choice is tried, that choice
will be checked before recursing to do some pruning.  We cannot stop
at the first coloring we find, because it is possible that other colorings
will use fewer colors.

```
  Set the color for node 1 to the first color (Coloring.Color.A)
  Call enumerate on node 2
    
  enumerate( graph data structure, current coloring so far, ready to color kth node, 
             min coloring previously found)
        
      if all nodes have been colored then
          process the current coloring:
              does it use fewer colors than min coloring?
              if so then modify min coloring previously found (hint: copyOtherIntoSelf())
          return
      
      if coloring so far has fewer colors than the min coloring previously found
          for all possible colors in order except for NOCOLOR
              if that color does NOT conflict with node k's neighboring colors
                  color kth node with color
                  enumerate( graph data structure, updated coloring, k+1,
                             min coloring previously found )
                  uncolor the kth node
```

### Heuristic

```
    for k=1 to num_nodes inclusive
    
        for all possible colors in order except for NOCOLOR
                        
            if that coloring does NOT conflict with node k's neighboring colors                
                color kth node with color
                break out of loop over possible colors for node k       
```

### Your own approach

You will also implement the command MINE that executes your own 
faster algorithm for performing graph coloring.  The code you
submit should be able to execute the MINE command.

For your own approach you can choose to do one of the following:
  * improve upon the recursive backtracking approach by putting in more pruning
    and then show this is faster than the suggested recursive backtracking approach
  * improve upon the heuristic approach while not resorting to a trivial solution
    like giving each node its own color

## Timing all of the approaches

Using code similar to the following, you will have a TIME command that 
times all of the algorithms.
```
        long startTime = System.nanoTime();
        coloring = heuristic(graph);
        long endTime = System.nanoTime();
        long duration = (endTime - startTime) / 1000000;
        System.out.println("heuristic: " + coloring.getNumColors() + " colors, "
                + duration + " milliseconds");
```
The output for the TIME command will look as follows:
```
heuristic: 6 colors, 4 milliseconds
mine:      6 colors, 3 milliseconds
backtrack: 4 colors, 50102 milliseconds
```
None of the grading test cases call TIME, because each time you run
the program even on the same input and on the same machine
there will be some time variance.  Because of that you will probably
want to run the timings about 5 times before drawing any conclusions.

INSTEAD, you will be running the TIME command on your machine for
the mesh1em6.mtx input.  It takes around a minute for the
recursive backtracking algorithm on a 2 year old Mac.


## Error handling

All of the inputs will be correctly formed for this assignment.

## Notes and Suggestions

* To get started, go to the resources page on piazza and click 
  on the PA7-GraphColoring link under programming assignments
  and then accept the github assignment and repository.
  Import the github repository into Eclipse as normal.
  We aren't using Travis CI anymore.  Test things locally in Eclipse
  and submit all the files to Gradescope to see how you do on the
  grading test cases.
  
* The node ids should go from 1 to the number of nodes inclusive,
  because the sparse matrix market file format (.mtx) stores node
  ids starting at 1 instead of 0.
  
* We are providing a Coloring class that keeps track of a mapping of node
  ids to colors.

* In Section 8 this week, we provided a graph data structure, to which you
  might need to add a method that returns the neighbors for a node.
  
* In Section 8 this week, we helped you write the code to read in .mtx
  files and output a dot file.  You will need to modify the dot output
  code to generate colored nodes.  The setting of the colors is up
  to you and happens in Coloring.java.

## Grading Criteria

Half of the PA7 grade will be correctness.  For this assignment, there
will be some private test cases on Gradescope used for grading.
However, note the names of the test cases and realize you can download
the .mtx files from the SuiteSparse Matrix Collection
(https://sparse.tamu.edu/about).

The other half of the PA7 grade will be broken up as follows:
  * 25 your decomposition and code clarity
  * 10 MINE algorithm that does something different than given algorithms
  * 10 timing results in the README.md file along with a TIME implementation
  * 5 points for a cool dot file with a coloring in it

Decomposition

* Points will be taken off for copy, pasted, and edited code that
  should have been encapsulated in a method EXCEPT for in the 
  timing code.

* All of the Java files should be <250 lines of code.

* Each method should be less than 30 lines.  This INCLUDES
  comments, but not the method header.  It is easier to read a 
  function if it can all fit on one screen.

* Make things as simple as possible.
  * Only use one Scanner instance.
  * Don't use lambda functions or other features in non-standard ways.
  * In general avoid nested loops.  However, can use nested loops to 
    implement the recursive backtracking and heuristic in PA7.
  * In general, avoid nesting conditionals.  However, you can use nested conditionals to 
    implement the recursive backtracking and heuristic in PA7.
  * Avoid chaining: see the Piazza post for more info


Code Clarity
* YOU should be able to read, understand, and explain your own code
  to someone else a couple days after you wrote it.
  * No magic numbers
  * No methods written to just get the test cases to work

* There needs to be a balance between no comments in the body of the
  methods and a comment for every line in the program.  Either extreme
  will result in points off.

* The file header should include instructions on how someone would
  use this program.  To use the program, one would need to know the
  input file format.

* Use meaningful variable names.  Loop iterators can
  be simple (i for integers, s for strings, n for numbers, etc.).

* The clearest code examples will be anonymously shown in class.

* The most obfuscated code examples will be anonymously shown in class
  with suggestions for improvement.


The coding style in terms of spacing, etc. should be done automatically
every time you save in Eclipse.  As long as you stick with those defaults,
the syntax style should be fine.

## Submission

Files that need to be submitted to Gradescope:
  * all .java files
  * README.md with the results of timing experiments that compare your
    improved algorithm to the required algorithms for the input file mesh1em6.mtx
  * a dot file that shows off your graph coloring skills
  
