---
title: "Classes and Methods"
format:
  revealjs:
    slide-number: c/t
    show-slide-number: all
---

## `static` methods

The Java construct for implementing functions is known as the `static` method.

## Methods

* **Multiple arguments** --  methods can take on more than one argument, and therefore can have more than one parameter variable
* **Overloading** -- methods whose signatures differ are different methods. Using the same name for two methods whose signatures differ is known as overloading.
* **Single return value** A Java method provides only one return value to the caller, of the type declared in the method signature

## Methods

* **Scope** -- The scope of a variable is the part of the program that can refer to that variable by name. The scope of a variable declared in a method is limited to that method's body. You cannot refer to a variable in one method that is declared in another.

Source: [Programming in Java, Sedgewick & Wayne (2024)](https://introcs.cs.princeton.edu/java/21function/)

## Constructors

Same name as the class, no return type

## Public vs. Private

public -- accessible from all methods of the class and in the scope of where the object is declared

private -- known only in the class

## Recommendations for writing classes

* use one file to store the class (no main method)
* create different classes for different problems (cohesion -- methods and instance variables of a class should be strongly related) -- in other words, keep related data and behavior in one place

## Recommendations for writing classes

Declare:

* instance variables `private` after class definition and create public methods to set and access variables
* constructors `public` no return type (do not use `static`)
* most methods `public` (do not use `static`), but `private` helper methods are often useful

## Example

```{java}
public class IdentifyMyParts {
    public int x = 7; 
    public int y = 3; 
}
```


1. What are the instance variables?
1. How do you construct a new instance of this class?

<small>*Exercise from [The Javaâ„¢ Tutorials](https://docs.oracle.com/javase%2Ftutorial%2F/java/javaOO/QandE/creating-questions.html)*</small>

## Example

```{java}
public class IdentifyMyParts {
    public int x = 7; 
    public int y = 3; 
}
```


What is the output from the following code:

```{java}
IdentifyMyParts a = new IdentifyMyParts();
IdentifyMyParts b = new IdentifyMyParts();
a.y = 5;
b.y = 6;
a.x = 1;
b.x = 2;
System.out.println("a.y = " + a.y);
System.out.println("b.y = " + b.y);
System.out.println("a.x = " + a.x);
System.out.println("b.x = " + b.x);
System.out.println("IdentifyMyParts.x = " + IdentifyMyParts.x);
```

Add `static` after `public` for one of the instance variable (to make it a class variable). What is the side effect?

## Better example

```{java}
public class IdentifyMyParts {
	private int x = 7;
	private int y = 3;
	
	public void setX(int x) {
		this.x = x;
	}

	public void setY(int y) {
		this.y = y;
	}
	
	public int getX() {
		return x;
	}
	
	public int getY() {
		return y;
	}

}
```

Variable scope: what's the difference between `this.x` and `x`?

## Better example -- use

```{java}
public class UseMyParts {

	public static void main(String[] args) {
		IdentifyMyParts a = new IdentifyMyParts(); 
		IdentifyMyParts b = new IdentifyMyParts(); 
		a.setX(5);
		a.setY(10);
		b.setX(2);
		b.setY(3);
	
		System.out.println(a.getY()); 
		System.out.println(b.getY()); 
		System.out.println(a.getX()); 
		System.out.println(b.getX()); 

	}
}
```

## Adding a constructor method

```{java}
public class IdentifyMyParts {
	private int x = 7;
	private int y = 3;
	
	public IdentifyMyParts(int x, int y) {
		this.x = x;
		this.y = y;
		
	}
	
	public void setX(int x) {
		this.x = x;
	}

	public void setY(int y) {
		this.y = y;
	}
	
	public int getX() {
		return x;
	}
	
	public int getY() {
		return y;
	}

}
```


## Practice

