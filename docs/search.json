[
  {
    "objectID": "programming-assignment-07.html",
    "href": "programming-assignment-07.html",
    "title": "Programming Assignment 07",
    "section": "",
    "text": "Deadline: October 30, 2024 – Wednesday, 11:30pm"
  },
  {
    "objectID": "programming-assignment-07.html#learning-objectives",
    "href": "programming-assignment-07.html#learning-objectives",
    "title": "Programming Assignment 07",
    "section": "Learning Objectives",
    "text": "Learning Objectives\nThe goal of this assignment is to practice the following algorithm patterns, data structures, and decomposition approaches.\n\nAlgorithmic patterns: recursive backtracking and heuristic\nData structure: graphs\nDecomposition: using provided classes other than the Java libraries"
  },
  {
    "objectID": "programming-assignment-07.html#graph-coloring",
    "href": "programming-assignment-07.html#graph-coloring",
    "title": "Programming Assignment 07",
    "section": "Graph Coloring",
    "text": "Graph Coloring\nMany important problems such as coloring a map and register allocation can be expressed as graph coloring problems. See [https://en.wikipedia.org/wiki/Graph_coloring] for examples and mention of Sudoku as a kind of graph coloring problem."
  },
  {
    "objectID": "programming-assignment-07.html#the-assignment",
    "href": "programming-assignment-07.html#the-assignment",
    "title": "Programming Assignment 07",
    "section": "The Assignment",
    "text": "The Assignment\nIn this assignment you will be implementing graph coloring three different ways: recursive backtracking, heuristic, and your own approach.\nThe program should have the following usage: java PA7Main infile.mtx [HEURISTIC,BACKTRACK,MINE,TIME]\nThe input files will be from the SuiteSparse Matrix Collection (https://sparse.tamu.edu/about). See https://math.nist.gov/MatrixMarket/formats.html for a description of the .mtx format. You CAN write similar code to the following code to read in the .mtx format. http://docs.roguewave.com/imsl/java/5.0.1/api/com/imsl/math/SparseMatrixEx2.html. Reading .mtx files will be covered in Section 8.\nExample output to standard out is provided in the PublicTestCases/ for HEURISTIC and BACKTRACK. You will be running your own algorithm with the MINE command. The output for TIME is shown below.\nYour program should also generate before and after .dot files with the nodes colored. See the before and after .dot files in the PublicTestCases/ subdirectory for examples and carefully read the code at the top of the provided Coloring.java file. You can use whatever node filling colors you would like\n(see https://www.graphviz.org/doc/info/colors.html). Writing dot files will be covered in Section 8.\nYou CAN use the code provided and/or written in Section 8 to read in files, store a graph, and output a graph to a dot file in your PA7.\n\nRecursive Backtracking\nWill make the decisions starting with node 1 and continuing through the nodes in order. Everytime a node coloring choice is tried, that choice will be checked before recursing to do some pruning. We cannot stop at the first coloring we find, because it is possible that other colorings will use fewer colors.\n  Set the color for node 1 to the first color (Coloring.Color.A)\n  Call enumerate on node 2\n    \n  enumerate( graph data structure, current coloring so far, ready to color kth node, \n             min coloring previously found)\n        \n      if all nodes have been colored then\n          process the current coloring:\n              does it use fewer colors than min coloring?\n              if so then modify min coloring previously found (hint: copyOtherIntoSelf())\n          return\n      \n      if coloring so far has fewer colors than the min coloring previously found\n          for all possible colors in order except for NOCOLOR\n              if that color does NOT conflict with node k's neighboring colors\n                  color kth node with color\n                  enumerate( graph data structure, updated coloring, k+1,\n                             min coloring previously found )\n                  uncolor the kth node\n\n\nHeuristic\n    for k=1 to num_nodes inclusive\n    \n        for all possible colors in order except for NOCOLOR\n                        \n            if that coloring does NOT conflict with node k's neighboring colors                \n                color kth node with color\n                break out of loop over possible colors for node k       \n\n\nYour own approach\nYou will also implement the command MINE that executes your own faster algorithm for performing graph coloring. The code you submit should be able to execute the MINE command.\nFor your own approach you can choose to do one of the following: * improve upon the recursive backtracking approach by putting in more pruning and then show this is faster than the suggested recursive backtracking approach * improve upon the heuristic approach while not resorting to a trivial solution like giving each node its own color"
  },
  {
    "objectID": "programming-assignment-07.html#timing-all-of-the-approaches",
    "href": "programming-assignment-07.html#timing-all-of-the-approaches",
    "title": "Programming Assignment 07",
    "section": "Timing all of the approaches",
    "text": "Timing all of the approaches\nUsing code similar to the following, you will have a TIME command that times all of the algorithms.\n        long startTime = System.nanoTime();\n        coloring = heuristic(graph);\n        long endTime = System.nanoTime();\n        long duration = (endTime - startTime) / 1000000;\n        System.out.println(\"heuristic: \" + coloring.getNumColors() + \" colors, \"\n                + duration + \" milliseconds\");\nThe output for the TIME command will look as follows:\nheuristic: 6 colors, 4 milliseconds\nmine:      6 colors, 3 milliseconds\nbacktrack: 4 colors, 50102 milliseconds\nNone of the grading test cases call TIME, because each time you run the program even on the same input and on the same machine there will be some time variance. Because of that you will probably want to run the timings about 5 times before drawing any conclusions.\nINSTEAD, you will be running the TIME command on your machine for the mesh1em6.mtx input. It takes around a minute for the recursive backtracking algorithm on a 2 year old Mac."
  },
  {
    "objectID": "programming-assignment-07.html#error-handling",
    "href": "programming-assignment-07.html#error-handling",
    "title": "Programming Assignment 07",
    "section": "Error handling",
    "text": "Error handling\nAll of the inputs will be correctly formed for this assignment."
  },
  {
    "objectID": "programming-assignment-07.html#notes-and-suggestions",
    "href": "programming-assignment-07.html#notes-and-suggestions",
    "title": "Programming Assignment 07",
    "section": "Notes and Suggestions",
    "text": "Notes and Suggestions\n\nTo get started, go to the resources page on piazza and click on the PA7-GraphColoring link under programming assignments and then accept the github assignment and repository. Import the github repository into Eclipse as normal. We aren’t using Travis CI anymore. Test things locally in Eclipse and submit all the files to Gradescope to see how you do on the grading test cases.\nThe node ids should go from 1 to the number of nodes inclusive, because the sparse matrix market file format (.mtx) stores node ids starting at 1 instead of 0.\nWe are providing a Coloring class that keeps track of a mapping of node ids to colors.\nIn Section 8 this week, we provided a graph data structure, to which you might need to add a method that returns the neighbors for a node.\nIn Section 8 this week, we helped you write the code to read in .mtx files and output a dot file. You will need to modify the dot output code to generate colored nodes. The setting of the colors is up to you and happens in Coloring.java."
  },
  {
    "objectID": "programming-assignment-07.html#grading-criteria",
    "href": "programming-assignment-07.html#grading-criteria",
    "title": "Programming Assignment 07",
    "section": "Grading Criteria",
    "text": "Grading Criteria\nHalf of the PA7 grade will be correctness. For this assignment, there will be some private test cases on Gradescope used for grading. However, note the names of the test cases and realize you can download the .mtx files from the SuiteSparse Matrix Collection (https://sparse.tamu.edu/about).\nThe other half of the PA7 grade will be broken up as follows: * 25 your decomposition and code clarity * 10 MINE algorithm that does something different than given algorithms * 10 timing results in the README.md file along with a TIME implementation * 5 points for a cool dot file with a coloring in it\nDecomposition\n\nPoints will be taken off for copy, pasted, and edited code that should have been encapsulated in a method EXCEPT for in the timing code.\nAll of the Java files should be &lt;250 lines of code.\nEach method should be less than 30 lines. This INCLUDES comments, but not the method header. It is easier to read a function if it can all fit on one screen.\nMake things as simple as possible.\n\nOnly use one Scanner instance.\nDon’t use lambda functions or other features in non-standard ways.\nIn general avoid nested loops. However, can use nested loops to implement the recursive backtracking and heuristic in PA7.\nIn general, avoid nesting conditionals. However, you can use nested conditionals to implement the recursive backtracking and heuristic in PA7.\nAvoid chaining: see the Piazza post for more info\n\n\nCode Clarity * YOU should be able to read, understand, and explain your own code to someone else a couple days after you wrote it. * No magic numbers * No methods written to just get the test cases to work\n\nThere needs to be a balance between no comments in the body of the methods and a comment for every line in the program. Either extreme will result in points off.\nThe file header should include instructions on how someone would use this program. To use the program, one would need to know the input file format.\nUse meaningful variable names. Loop iterators can be simple (i for integers, s for strings, n for numbers, etc.).\nThe clearest code examples will be anonymously shown in class.\nThe most obfuscated code examples will be anonymously shown in class with suggestions for improvement.\n\nThe coding style in terms of spacing, etc. should be done automatically every time you save in Eclipse. As long as you stick with those defaults, the syntax style should be fine."
  },
  {
    "objectID": "programming-assignment-07.html#submission",
    "href": "programming-assignment-07.html#submission",
    "title": "Programming Assignment 07",
    "section": "Submission",
    "text": "Submission\nFiles that need to be submitted to Gradescope: * all .java files * README.md with the results of timing experiments that compare your improved algorithm to the required algorithms for the input file mesh1em6.mtx * a dot file that shows off your graph coloring skills"
  },
  {
    "objectID": "modules.html",
    "href": "modules.html",
    "title": "Modules",
    "section": "",
    "text": "All exams are on paper.\n\nMidterm 1 is on Wednesday, September 25 (during class time)\nMidterm 2 is on Wednesday, November 6 (during class time)\nFinal exam is on Thursday, December 19, 10:30am to 12:30pm (schedule of final exams)"
  },
  {
    "objectID": "modules.html#readings",
    "href": "modules.html#readings",
    "title": "Modules",
    "section": "Readings",
    "text": "Readings\nYou can find instructions on how to set up your coding environment on the getting started page.\nRequired:\n\nJava, Java, Java 1.5 Java Language Elements\nJava, Java, Java 2.4 Class Definition\n\nOptional:\n\nJava, Java, Java 1.7 System and PrintStream\nJava, Java, Java 2.2 Using String Objects"
  },
  {
    "objectID": "modules.html#slides",
    "href": "modules.html#slides",
    "title": "Modules",
    "section": "Slides",
    "text": "Slides\n\nCourse Introduction\nIntro to Java\nJava Objects\n\nDuring lab sessions (Sept 04 to Sept 09), TAs will go over these slides:\n\nLab 01 slides"
  },
  {
    "objectID": "modules.html#assignments",
    "href": "modules.html#assignments",
    "title": "Modules",
    "section": "Assignments",
    "text": "Assignments\n\nInstructions for Lab 01 – Deadline: September 09, 2024 – Monday, 11:30pm\nInstructions for PA1 – Deadline: September 11, 2024 – Wednesday, 11:30pm"
  },
  {
    "objectID": "modules.html#readings-1",
    "href": "modules.html#readings-1",
    "title": "Modules",
    "section": "Readings",
    "text": "Readings\nRequired:\n\nJava, Java, Java 6.3.2 Counting with For Loops\nJava, Java, Java 9.2 One-Dimensional Arrays\ngeeksforgeeks HashMap in Java\n\nOptional:\n\nJava, Java, Java 9.3 Simple Array Examples"
  },
  {
    "objectID": "modules.html#slides-1",
    "href": "modules.html#slides-1",
    "title": "Modules",
    "section": "Slides",
    "text": "Slides\n\nArrays\nHashMap\nHashSet\n\nDuring lab sessions (Sept 11 to Sept 16), TAs will go over these slides:\n\nLab 02 slides"
  },
  {
    "objectID": "modules.html#assignments-1",
    "href": "modules.html#assignments-1",
    "title": "Modules",
    "section": "Assignments",
    "text": "Assignments\n\nInstructions for Lab 02 – Deadline: September 16, 2024 – Monday, 11:30pm\nInstructions for PA2 – Deadline: September 18, 2024 – Wednesday, 11:30pm"
  },
  {
    "objectID": "modules.html#readings-2",
    "href": "modules.html#readings-2",
    "title": "Modules",
    "section": "Readings",
    "text": "Readings\nOptional:\n\nAlgorithms by Jeff Erickson, Chapter 2 Backtracking"
  },
  {
    "objectID": "modules.html#slides-2",
    "href": "modules.html#slides-2",
    "title": "Modules",
    "section": "Slides",
    "text": "Slides\n\nExhaustive Search\nBacktracking"
  },
  {
    "objectID": "modules.html#assignments-2",
    "href": "modules.html#assignments-2",
    "title": "Modules",
    "section": "Assignments",
    "text": "Assignments\n\nInstructions for Lab 03 – Deadline: September 23, 2024 – Monday, 11:30pm\nInstructions for PA3 – Deadline: September 27, 2024 – Friday, 11:30pm"
  },
  {
    "objectID": "modules.html#readings-3",
    "href": "modules.html#readings-3",
    "title": "Modules",
    "section": "Readings",
    "text": "Readings\nRequired:\n\nJava, Java, Java 8.2 Java’s Inheritance Mechanism"
  },
  {
    "objectID": "modules.html#slides-3",
    "href": "modules.html#slides-3",
    "title": "Modules",
    "section": "Slides",
    "text": "Slides\n\nClasses and Methods\nInterfaces\nInheritance"
  },
  {
    "objectID": "modules.html#assignments-3",
    "href": "modules.html#assignments-3",
    "title": "Modules",
    "section": "Assignments",
    "text": "Assignments\n\nInstructions for PA4 – Deadline: October 04, 2024 – Friday, 11:30pm\nInstructions for Lab 05 – Deadline: October 06, 2024 – Monday, 11:30pm"
  },
  {
    "objectID": "modules.html#readings-4",
    "href": "modules.html#readings-4",
    "title": "Modules",
    "section": "Readings",
    "text": "Readings"
  },
  {
    "objectID": "modules.html#slides-4",
    "href": "modules.html#slides-4",
    "title": "Modules",
    "section": "Slides",
    "text": "Slides"
  },
  {
    "objectID": "modules.html#assignments-4",
    "href": "modules.html#assignments-4",
    "title": "Modules",
    "section": "Assignments",
    "text": "Assignments"
  },
  {
    "objectID": "programming-assignment-10.html",
    "href": "programming-assignment-10.html",
    "title": "Programming Assignment 10",
    "section": "",
    "text": "Deadline: December 04, 2024 – Wednesday, 11:30pm"
  },
  {
    "objectID": "programming-assignment-10.html#learning-objectives",
    "href": "programming-assignment-10.html#learning-objectives",
    "title": "Programming Assignment 10",
    "section": "Learning Objectives",
    "text": "Learning Objectives\nThis assignment is a synthesis of many of the concepts that we have covered this semester in class. * graphs * GUI input and output and event-driven programming * inheritance * reading input from a file * removing redundancy and other code clarity improvements\nFor PA10 you will be designing a kinetic sculpture simulation. Look up the term on the internet for a plethora of pictures. The PA10hardCodedDemo.java starter code hardcodes an example kinetic sculpture with four sculpture nodes (input, thing1, thing2, and sink) connected with four edges.\nBelow indicates the minimal requirements for the assignment. In addition you can design as many other sculpture nodes as you would like. Note that the rules of physics do not need to be followed: circles can change colors, they can disappear, new circles can be generated, etc."
  },
  {
    "objectID": "programming-assignment-10.html#the-assignment",
    "href": "programming-assignment-10.html#the-assignment",
    "title": "Programming Assignment 10",
    "section": "The Assignment",
    "text": "The Assignment\nThis is a two-week assignment. * For the first week, you will need to submit a class hierarchy diagram with ALL the classes you plan to have and their fields and interface to Aropa and to Gradescope for peer review.\n\nThe whole assignment will need to be completed by the end of the second week with a demo video, Java source code, and an in-person demonstration of the GUI with your section leader during section the last week of class.\n\nFor the assignment, you will need to do the following: * Using some form of graphical input (TextField, …) to have the user provide an input file name.\n\nRead in an input file where the sculpture nodes and how the nodes should be connected are specified (hint: graph data structure). You can assume the input is correctly formed. Here is the input file for the hardcoded example in the PA10 starter code. delay: 1       input: RED, BLUE       0: input, (10,10)       1: passthrough, (60,20)       2: passthrough, (70,80)       3: sink, (140,100)       0 -&gt; 1       0 -&gt; 2       1 -&gt; 3       2 -&gt; 3 Any number of colors can be specified in a list after the “input:” label. There will only be one delay specified. Any number of sculpture nodes and edges between nodes may be specified. Sculpture nodes do not need to be connected to any other nodes.\nGraphically layout the sculpture nodes with their top left corner being at the specified coordinates. For the three required sculpture nodes (source, passthrough, and sink), the input ports are on the left of the sculpture nodes and the output ports are on the right of the node. When two sculpture nodes are connected, the line representing the connection should go from the middle of the right side of the first node to the middle of the left side of the second node. Run the provided PA10hardCodedDemp start code for an example.\nCreate a class hierarchy for kinetic sculpture nodes. Required nodes include:\n\nAn input node that each processing step will take a circle off the input list and put it on the input nodes’s output port.\nA passthrough node that for each processing step takes a circle from its input port and moves it to its output port.\nA sink node that each processing step takes all of the input circles, removes them from the input port, and prints their color to standard out.\n\nNote that there will need to be a processing step that iterates over all nodes and has them process their input port. After that, there will need to be a separate pass over all of the edges that connect nodes.\nThe provided starter code has a significant amount of code redundancy, magic numbers, and is only hardcoded for one example. Do NOT submit the starter code. Your code will need to be significantly cleaner.\nYour demonstration will need to be using the provided sculpture.in. You can append more sculpture nodes of different types to that file to make your kinetic sculpture program unique and to garner up to 10 extra credit points."
  },
  {
    "objectID": "programming-assignment-10.html#getting-started",
    "href": "programming-assignment-10.html#getting-started",
    "title": "Programming Assignment 10",
    "section": "Getting Started",
    "text": "Getting Started\n\nStart NOW! Here is the wordcount output from the reference implementation.\n\n$ wc *.java\n       9      26     224 InputNode.java\n      76     238    2736 JavaFXView.java\n     121     392    4263 PA10Main.java\n     173     618    6230 Sculpture.java\n      36     113     948 SculptureNode.java\n      17      46     416 SinkNode.java\n     432    1433   14817 total\nThis means that the whole program is 432 lines of code.\n\nAccept the github assignment for PA10, (https://classroom.github.com/a/byIC_y1AE). Import your PA10 github repository into Eclipse as usual.\nRun the PA10hardcoded.java and see what it does.\nDevelop a design for PA10. What classes will you have with what fields and what methods?\nWrite your program using all of the starter code given in class and provided in the repository to help get you started.\nMake a video of running sculpture.in through your program.\nDemonstrate your program in your section on Monday April 30th or Tuesday May 1st."
  },
  {
    "objectID": "programming-assignment-10.html#suggestions",
    "href": "programming-assignment-10.html#suggestions",
    "title": "Programming Assignment 10",
    "section": "Suggestions",
    "text": "Suggestions\n\nWork on a Sculpture object that can read itself in from a file first.\nThen work on displaying the Sculpture object using the provided JavaFXView functionality.\nDo the execution of the sculpture last. The execution of the sculpture is where there are marbles flowing through the sculpture.\nOdds and Ends\n\nSetting the width of a TextField.\n\n TextField filename_field = new TextField();\n filename_field.setPrefWidth(200);\n\nThere will only be one input node specified in any of the provided input files."
  },
  {
    "objectID": "programming-assignment-10.html#grading-criteria",
    "href": "programming-assignment-10.html#grading-criteria",
    "title": "Programming Assignment 10",
    "section": "Grading Criteria",
    "text": "Grading Criteria\nHalf of the PA10 grade will be correctness (30 points) and the class hierarchy diagram (20 points). For this assignment, correctness is the GUI input and output. You should also expect that we might run your program with additional input files besides the ones provided. The class hierarchy diagram should follow the format discussed in class and contain enough functionality for completing the assignment.\nThe other half of the PA10 grade will be your decomposition and code clarity.\nDecomposition\n\nPoints will be taken off for copy, pasted, and edited code that should have been encapsulated in a method.\nThis program should use fewer than 10 .java files. Each of these files should be (&lt;200 lines). Do NOT include PA10hardCodedDemo.java.\nEach method should be less than 30 lines. This INCLUDES comments, but not the method header. It is easier to read a function if it can all fit on one screen.\n\nCode Clarity * YOU should be able to read, understand, and explain your own code to someone else a couple days after you wrote it. * No magic numbers * No methods written to just get the test cases to work\n\nThere needs to be a balance between no comments in the body of the methods and a comment for every line in the program. Either extreme will result in points off.\nThe file header should include instructions on how someone would use this program. To use the program, one would need to know the input file format. One would also need to know the command line arguments that should be passed to the program.\nUse meaningful variable names. Loop iterators can be simple (i for integers, s for strings, n for numbers, etc.).\nThe clearest code examples will be anonymously shown in class.\nThe most obfuscated code examples will be anonymously shown in class with suggestions for improvement."
  },
  {
    "objectID": "programming-assignment-10.html#submission",
    "href": "programming-assignment-10.html#submission",
    "title": "Programming Assignment 10",
    "section": "Submission",
    "text": "Submission\nFor this assignment, you are REQUIRED to submit all of the following files: * by Monday April 23rd at 11:30am to Gradescope AND Aropa * a class hierarchy diagram with all the classes, their interfaces, and any inheritance relationships\n\nto Gradescope before Monday April 30th at 11:30am.\n\nAll the Java source files needed to run your program. Do NOT include PA10hardCodedDemo.java.\nsculpture.in, start with the provided one, but feel free to ADD to it\nsculpture.mp4, or other video format that can be run on multiple platforms. The video should be between 10 and 15 seconds long.\n\n\nTo create the video, you can use a program to record your screen as you run your program, or you can simply record your screen with your smartphone or tablet. Do note however that the video you submit must be of good enough quality for the SL’s to clearly see you enter the input filename and see your sculpture execute.\nWrite your own code. We will be using a tool that finds similar code.\nIt is recommended that when talking with others about the assignment, do not write anything down."
  },
  {
    "objectID": "programming-assignment-05.html",
    "href": "programming-assignment-05.html",
    "title": "Programming Assigmment 05",
    "section": "",
    "text": "Deadline: October 09, 2024 – Wednesday, 11:30pm"
  },
  {
    "objectID": "programming-assignment-05.html#learning-objectives",
    "href": "programming-assignment-05.html#learning-objectives",
    "title": "Programming Assigmment 05",
    "section": "Learning Objectives",
    "text": "Learning Objectives\nThe goal of this assignment is to use two or more data structures in a coordinated way to solve a problem.\nThe problem to be solved in this assignment is to implement a HashMap. Therefore, an additional learning objective is to increase your skill level with HashMaps from just being able to use them to understanding how to implement them.\nThe dictionary abstract data type can be used to solve many programming problems and therefore questions about hash tables frequently occur in job interviews."
  },
  {
    "objectID": "programming-assignment-05.html#the-assignment",
    "href": "programming-assignment-05.html#the-assignment",
    "title": "Programming Assigmment 05",
    "section": "The Assignment",
    "text": "The Assignment\nYou will be redoing PA2-HashMap with your own HashMap implementation called MyHashMap. Here are the key components of this assignment:\n\nPA5Test.java with JUnit tests of all the functionality MyHashMap needs to provide to implement PA2. The tests can be written for HashMap and then edited slightly to be used to test MyHashMap instead. Implementing them first will help the development of MyHashMap be more test driven.\nMyHashMap.java with an implementation of a generic, MyHashMap class. Your hashmap should only have 10 buckets.\nPA5Main.java with an edited version of PA2Main.java that…\n\nuses MyHashMap instead of the HashMap provided in java.util\nprovides a DEBUG command that outputs the printTable() information about conflicts in a table that maps flight codes to integers\nhas been improved based on PA2 code clarity and decomposition feedback and follows the more stringent grading criteria specified below\ndoes some error checking on the input file and skips bad lines"
  },
  {
    "objectID": "programming-assignment-05.html#junit-implementation",
    "href": "programming-assignment-05.html#junit-implementation",
    "title": "Programming Assigmment 05",
    "section": "JUnit implementation",
    "text": "JUnit implementation\nThe PA5Test.java file should contain unit tests for all of the HashMap functionality your PA2 program uses. We strongly recommend you write the tests for HashMap first. They should all pass. Then replace HashMap with MyHashMap and you can test MyHashMap as you implement it.\nFor grading, we will look for unit test cases for at least the following: * put * get * containsKey * keySet"
  },
  {
    "objectID": "programming-assignment-05.html#hash-map-implementation",
    "href": "programming-assignment-05.html#hash-map-implementation",
    "title": "Programming Assigmment 05",
    "section": "Hash Map Implementation",
    "text": "Hash Map Implementation\nA hash table is a data structure that offers quick O(1) operations such as inserting data and searching for data. You have used a form of a hash table when using the HashMap class in Java. However, in this assignment you will implement your own version of a hash map.\n\nHash Map Background\nFirst, you should read up on what a hash table is. Wikipedia is a good place to start.\nAt its heart a hash table (hash map) is an array that works together with a function, known as a hash function, that takes a key and returns an index into that array. We usually call the elements in the array buckets. This is because when more than one element maps to the same array location (or bucket), there needs to be some organization for keeping all those elements there and being able to find them.\nA critical part of writing a good hash map implementation is writing a good (and appropriate) hash function. It should spread out values evenly based on different input values and needs to always produce the same value if the same element is given to it.\nIn general, there are multiple ways to implement a hash map. Here are three: * An array that contains a linked list for each bucket * A linked list that contains a linked list for each bucket (2d linked list) * An array that contains an array for each bucket (a 2d array)\nHowever, since you are implementing a generic hash table in Java and generics are problematic in arrays (https://docs.oracle.com/javase/tutorial/java/generics/restrictions.html), we strongly recommend you use an ArrayList of linked lists. Those linked lists can be LinkedLists, ArrayLists, or your own linked list implementation where the key,value pairs link to each other.\nYour hash table implementation should be called MyHashMap.\n\n\nA Generic MyHashMap class\nYou will create a class called MyHashMap that maps keys to values. To enable the construction and use of MyHashMap for any provided key and value types, you will implement it as a generic class.\nThis is done by declaring MyHashMap with type parameters.\n    class MyHashMap&lt;K,V&gt; {\n        ...\n    } \nThroughout the rest of the class definition, the capital letter ‘K’ will be used to declare variables of the key type, and the capital letter ‘V’ will be used to declare variables of the value type.\nSee https://docs.oracle.com/javase/tutorial/java/generics/types.html for more information.\n\n\nThe Hash Function\nFor this assignment, you will be implementing your own HashMap class using the following hash function.\n\nFind the hash code of that object (look into the hashCode method)\nMod it by the number of buckets\n\nThen take its absolute value.\n\nHere is the code for the hash function. You can use this code directly in your implementation:\n    private int hash(K key) {\n        int hashCode = key.hashCode();\n        int index = hashCode % numBuckets;\n        return Math.abs(index);\n    }\n\n\nHandling collisions\nThis hash map will use chaining to handle the collisions of elements. Your hash map should only have 10 buckets! Collisions will happen. We will be covering this in class."
  },
  {
    "objectID": "programming-assignment-05.html#error-checking",
    "href": "programming-assignment-05.html#error-checking",
    "title": "Programming Assigmment 05",
    "section": "Error checking",
    "text": "Error checking\nYou WILL need to error check. This involves checking to see if a line in the input file is valid. If it is not a valid line, skip it. You know a line is invalid if there is no comma in it. (hint hint)"
  },
  {
    "objectID": "programming-assignment-05.html#the-debug-command",
    "href": "programming-assignment-05.html#the-debug-command",
    "title": "Programming Assigmment 05",
    "section": "The DEBUG command",
    "text": "The DEBUG command\nThe program should be able to accept the DEBUG command on the command line after the input file name. That output should show how all of the airport codes in the input file map into indices in the hash table.\nThe DEBUG command should cause the creation of a MyHashMap with the keys being all of the airport codes in the input file. The goal is to see how many hash conflicts occur. After filing the MyHashMap, the program should call the printTable() method on MyHashMap. The printTable() method should output how many conflicts occur at each bucket and list the keys in that bucket.\nHere is an example input file:\nairline,airline ID, source airport, source airport id, destination apirport, destination airport id, codeshare, stops, equipment\n3S,11741,PTP,2881,FDF,2878,,0,AT5 320\n3S,11741,PTP,2881,SBH,6460,,0,DHT\n3S,11741,PTP,2881,SDQ,1762,,0,AT5\n3S,11741,PTP,2881,SFG,2879,,0,AT5\n3S,11741,PTP,2881,SXM,2899,,0,AT5\n3S,11741,SBH,6460,PTP,2881,,0,DHT\n3S,11741,SDQ,1762,PTP,2881,,0,AT5\n3S,11741,SDQ,1762,SXM,2899,,0,AT5\n3S,11741,SFG,2879,PTP,2881,,0,AT5\n3S,11741,SLU,2893,FDF,2878,,0,AT5\n3S,11741,SXM,2899,DOM,2877,,0,AT5\n3S,11741,SXM,2899,PTP,2881,,0,AT5\n3S,11741,SXM,2899,SDQ,1762,,0,AT5\n3U,4608,BHY,6351,XIY,3379,,0,321\n3U,4608,CAN,3370,CKG,3393,,0,321 320\n3U,4608,CAN,3370,CTU,3395,,0,321 320 330\n3U,4608,CAN,3370,SPN,2244,,0,330\n3U,4608,CGO,3375,CGQ,4380,,0,321\n3U,4608,CGO,3375,CKG,3393,,0,321\nHere is the output of the program when given this input file and the DEBUG command.\nIndex 0: (1 conflicts), [CAN XIY ]\nIndex 1: (1 conflicts), [SPN SBH ]\nIndex 2: (0 conflicts), [SDQ ]\nIndex 3: (0 conflicts), [CKG ]\nIndex 4: (3 conflicts), [DOM SLU SFG PTP ]\nIndex 5: (0 conflicts), []\nIndex 6: (0 conflicts), [CTU ]\nIndex 7: (1 conflicts), [CGO BHY ]\nIndex 8: (1 conflicts), [SXM FDF ]\nIndex 9: (0 conflicts), [CGQ ]\nTotal # of conflicts: 7"
  },
  {
    "objectID": "programming-assignment-05.html#extra-credit",
    "href": "programming-assignment-05.html#extra-credit",
    "title": "Programming Assigmment 05",
    "section": "EXTRA CREDIT",
    "text": "EXTRA CREDIT\nIf you provide a better hash function than the one listed above, meaning that you have fewer collisions (and/or a better distribution) on the full flight database than the provided hash function, you will be able to receive 5 points of extra credit on PA5. Provide your README.md file with example DEBUG output to show that your hash function is better. Also explain why your hash function is better."
  },
  {
    "objectID": "programming-assignment-05.html#grading-criteria",
    "href": "programming-assignment-05.html#grading-criteria",
    "title": "Programming Assigmment 05",
    "section": "Grading Criteria",
    "text": "Grading Criteria\nHalf of the PA5 grade will be correctness. For this assignment, there will be some private test cases on Gradescope used for grading.\nThe other half of the PA5 grade will be your decomposition and code clarity and the JUnit tests.\nDecomposition * Should carefully select data structures that implement the required MyHashMap functionality. You cannot use the provided Java HashMap implementation or HashSet implementation or any other Map or hash table implementation written by someone else.\n\nPoints will be taken off for copy, pasted, and edited code that should have been encapsulated in a method.\nThis program will use two or more source files in addition to the source file for the JUnit tests. Each of these files should be (&lt;200 lines).\nEach static method should be less than 30 lines. This INCLUDES comments, but not the method header. It is easier to read a function if it can all fit on one screen.\nMake things as simple as possible.\n\nOnly use one Scanner instance.\nDon’t use lambda functions or other features in non-standard ways.\nAvoid nested loops.\nAvoid nesting conditionals.\nAvoid chaining: see the Piazza post for more info\n\n\nCode Clarity * YOU should be able to read, understand, and explain your own code to someone else a couple days after you wrote it. * No magic numbers * No methods written to just get the test cases to work\n\nThere needs to be a balance between no comments in the body of the methods and a comment for every line in the program. Either extreme will result in points off.\nThe file header should include instructions on how someone would use this program. To use the program, one would need to know the input file format.\nUse meaningful variable names. Loop iterators can be simple (i for integers, s for strings, n for numbers, etc.).\nThe clearest code examples will be anonymously shown in class.\nThe most obfuscated code examples will be anonymously shown in class with suggestions for improvement.\n\nThe coding style in terms of spacing, etc. should be done automatically every time you save in Eclipse. As long as you stick with those defaults, the syntax style should be fine."
  },
  {
    "objectID": "programming-assignment-05.html#submission",
    "href": "programming-assignment-05.html#submission",
    "title": "Programming Assigmment 05",
    "section": "Submission",
    "text": "Submission\nWrite your own code. We will be using a tool that finds overly similar code. This Spring 2018 semester in CS 210 we unfortunately have had academic integrity cases. I recommend that when talking with others about the assignment, do not write anything down.\nFor PA5, you are REQUIRED to submit all of your java source files to Gradescope.\nThere is NO Aropa submission for PA5."
  },
  {
    "objectID": "lab01-slides.html#scanner-class",
    "href": "lab01-slides.html#scanner-class",
    "title": "CSC 210 Lab 01",
    "section": "Scanner class",
    "text": "Scanner class\nWe will be using the Scanner class for two things in today’s lab:\n\nRead user keyboard input to request a file name\nRead the specified text file\n\nWe will also use while and for loops for this short assignment."
  },
  {
    "objectID": "lab01-slides.html#getting-started",
    "href": "lab01-slides.html#getting-started",
    "title": "CSC 210 Lab 01",
    "section": "Getting Started",
    "text": "Getting Started\nGet started by creating a new Java Project on Eclipse, and then a new class (new .java file) called FileSum (remember that class names are proper cased):\nProper Case (FileSum) – the first letter of every word, inclusing the first word, is uppercase while the remaining letters are lowercase\nYour class should have a main method (that’s what gradescope will be calling), your main method should be public and static\nRemember that your class name need to match file name (FileSum.java)"
  },
  {
    "objectID": "lab01-slides.html#short-assignment-instructions",
    "href": "lab01-slides.html#short-assignment-instructions",
    "title": "CSC 210 Lab 01",
    "section": "Short Assignment Instructions",
    "text": "Short Assignment Instructions\nShort Assignment 01"
  },
  {
    "objectID": "lab01-slides.html#set-up-scanner",
    "href": "lab01-slides.html#set-up-scanner",
    "title": "CSC 210 Lab 01",
    "section": "Set up Scanner",
    "text": "Set up Scanner\nImport the appropriate class at the top of your file:\nimport java.util.Scanner;\nThen, in your main method, call the constructor:\nScanner keyboardScanner = new Scanner(System.in);\nPrint a message to the user, for them to enter a file name (it must match the spelling in the instructions).\nThen, read the keyboard input:\nString fileName = keyboardScanner.nextLine();"
  },
  {
    "objectID": "lab01-slides.html#set-up-file-to-read",
    "href": "lab01-slides.html#set-up-file-to-read",
    "title": "CSC 210 Lab 01",
    "section": "Set up file to read",
    "text": "Set up file to read\nOnce you have read the user input, you can go ahead and use that user string to read the file.\nFile myFile = new File(fileName);\nScanner myReader = new Scanner(myFile);\nFor this to work, you need a throws FileNotFoundException in your main method definition."
  },
  {
    "objectID": "lab01-slides.html#read-every-line-in-the-file",
    "href": "lab01-slides.html#read-every-line-in-the-file",
    "title": "CSC 210 Lab 01",
    "section": "Read every line in the file",
    "text": "Read every line in the file\nYour file Scanner has the following methods:\n\n.hasNextLine() – returns true if there’s a next line to read, false otherwise\n.nextLine() – returns a string for the next line in the file\n\nWrite a while loop that if there’s a next line to be read in the file, reads it"
  },
  {
    "objectID": "lab01-slides.html#splitting-lines",
    "href": "lab01-slides.html#splitting-lines",
    "title": "CSC 210 Lab 01",
    "section": "Splitting lines",
    "text": "Splitting lines\nFor each line you read, you can use the following String methods:\n\n.split(\" \") – split a String by single space\n\nThis method returns an Array, so when assigning the result of a String split to a variable name, use String[] type declaration."
  },
  {
    "objectID": "lab01-slides.html#for-loop",
    "href": "lab01-slides.html#for-loop",
    "title": "CSC 210 Lab 01",
    "section": "For loop",
    "text": "For loop\nOnce you’ve created an array of Strings, which are the individual numbers that you need to sum up together, you will iterate over this array with a for loop.\nThe structure of a for loop in Java is:\nfor(type variable = start; condition to stop; increment)\nFor example:\nfor(int i = 0; i &lt; limit; i++)\nYour limit will be the length of your array, which can be retrieved by its .length variable"
  },
  {
    "objectID": "lab01-slides.html#last-thing-you-need-to-know",
    "href": "lab01-slides.html#last-thing-you-need-to-know",
    "title": "CSC 210 Lab 01",
    "section": "Last thing you need to know",
    "text": "Last thing you need to know\nYou can use the valueOf() method from the Integer class to convert a string to an integer:\nInteger.valueOf(\"10\")"
  },
  {
    "objectID": "lab01-slides.html#submit-assignment",
    "href": "lab01-slides.html#submit-assignment",
    "title": "CSC 210 Lab 01",
    "section": "Submit assignment",
    "text": "Submit assignment\nSubmit your assignment to gradescope\nRemember you need to submit the FileSum.java file\nAdd package com.gradescope.filesum; to the top of your file so that the binary file is placed in the correct autograder folder"
  },
  {
    "objectID": "slides-02-03.html#hashset-class",
    "href": "slides-02-03.html#hashset-class",
    "title": "HashSet",
    "section": "HashSet class",
    "text": "HashSet class\nRead the documentation for Class HashSet&lt;E&gt; and answer what methods do the following:\n\nadds an element a HashSet\nremoves an element\nreturns the number of elements in a HashSet\nchecks whether an element is in a HashSet"
  },
  {
    "objectID": "slides-02-03.html#hashset-class-1",
    "href": "slides-02-03.html#hashset-class-1",
    "title": "HashSet",
    "section": "HashSet class",
    "text": "HashSet class\n\n.add(value) adds an element a HashSet\n.remove(value) removes an element\n.contains(value) checks whether an element is in a HashSet\n.size() returns the number of elements in a HashSet"
  },
  {
    "objectID": "slides-02-03.html#write-java-code",
    "href": "slides-02-03.html#write-java-code",
    "title": "HashSet",
    "section": "Write Java code",
    "text": "Write Java code\nWrite an application that reads in a text file with names (one name per line), and prints out each name just once (there are repeated names in the file), in alphabetical order (no need to split the names)"
  },
  {
    "objectID": "slides-02-03.html#solution",
    "href": "slides-02-03.html#solution",
    "title": "HashSet",
    "section": "Solution",
    "text": "Solution\nimport java.util.ArrayList;\nimport java.util.Collections; \nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.util.HashSet;\nimport java.util.Scanner;\n\n\npublic class UniqueNames {\n\n    public static void main(String[] args)  throws FileNotFoundException {\n        File myFile = new File(\"names.txt\");\n        Scanner myReader = new Scanner(myFile);\n        \n        HashSet&lt;String&gt; allNames = new HashSet&lt;String&gt;();\n        \n        while (myReader.hasNext()) {\n            String line = myReader.nextLine();\n            allNames.add(line.trim());\n        }\n        \n        myReader.close();\n        \n        ArrayList&lt;String&gt; sortedNames = new ArrayList&lt;String&gt;(allNames);\n        Collections.sort(sortedNames);\n        \n        for (String name : sortedNames) System.out.println(name);\n        \n\n    }\n\n}"
  },
  {
    "objectID": "slides-02-01.html#java-array-object",
    "href": "slides-02-01.html#java-array-object",
    "title": "Arrays",
    "section": "Java Array Object",
    "text": "Java Array Object\n\nPrimitive variables store precisely one value:\n\na double stores one floating-point number\nan int stores one integer\n\nA reference variable stores a “reference” to an object that may store many values\nA Java array object stores a collection of elements\n\nEach element may be a reference to objects or primitive values\nWe access array elements with subscript notation []"
  },
  {
    "objectID": "slides-02-01.html#arrays",
    "href": "slides-02-01.html#arrays",
    "title": "Arrays",
    "section": "Arrays",
    "text": "Arrays\nArray construction, with size:\nint[] testScores = new int[100]; // all elements are initialized to 0\ndouble[] x = new double[9]; // all elements are initialized to 0.0\nString[] names = new String[500]; // all elements are null\nBankAccount[] customers = new BankAccount[100]; // all elements are null\nArray construction, with values:\nString[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\nint[] numbers = {1, 3, 4, 1, 2, 3};\ndouble[] moreNumbers = { 1, 2.0, 1e-12 };\nAccessing array elements:\n\nJust like in Python, we use [] to access individual elements in the array"
  },
  {
    "objectID": "slides-02-01.html#for-loops",
    "href": "slides-02-01.html#for-loops",
    "title": "Arrays",
    "section": "For loops",
    "text": "For loops\nArray objects have the .length property, which can be used to set up for loops:\nint[] x = {1, 3, 4, 1, 2, 3};\nfor (int i = 0; i &lt; x.length ; i++) { \n            System.out.println(x[i]);\n        }\nOr iterate over each value:\nfor (int n : x) { \n                    System.out.println(n);\n                }"
  },
  {
    "objectID": "slides-02-01.html#arguments",
    "href": "slides-02-01.html#arguments",
    "title": "Arrays",
    "section": "Arguments",
    "text": "Arguments\nNote that the main function is always defines with an array of String:\npublic static void main(String[] args) ...\nCreate a class with a main method that prints all the arguments in args"
  },
  {
    "objectID": "slides-02-01.html#manipulating-arrays-problem",
    "href": "slides-02-01.html#manipulating-arrays-problem",
    "title": "Arrays",
    "section": "Manipulating arrays – problem",
    "text": "Manipulating arrays – problem\nGiven an array of size N and also an integer K, how to calculate the maximum sum of K consecutive elements in the array?\n\nHow should we approach this problem?"
  },
  {
    "objectID": "slides-02-01.html#sliding-window-technique",
    "href": "slides-02-01.html#sliding-window-technique",
    "title": "Arrays",
    "section": "Sliding window technique",
    "text": "Sliding window technique\nGet initial sum of array of size K, then for following sub-arrays subtract the previous number (first number outside the window to the left) and add next number (last number inside the window to the right)"
  },
  {
    "objectID": "slides-02-01.html#write-for-loops",
    "href": "slides-02-01.html#write-for-loops",
    "title": "Arrays",
    "section": "Write for loops",
    "text": "Write for loops\nGiven an array of size N and an integer K, write a Java application to calculate the maximum sum of K consecutive elements in the array.\nTest cases:\npublic static void main(String[] args) {\n        int[] myNumbers = {10,2,-3,4,3};\n        System.out.println(maxConsecSum(myNumbers, 1)); // 10\n        System.out.println(maxConsecSum(myNumbers, 2)); // 12\n        System.out.println(maxConsecSum(myNumbers, 3)); // 9\n        System.out.println(maxConsecSum(myNumbers, 4)); // 13\n        System.out.println(maxConsecSum(myNumbers, 5)); // 16\n        \n        int[] otherNumbers = {8, 1, 3, 8, 2};\n        System.out.println(maxConsecSum(otherNumbers, 2));  // 11\n        System.out.println(maxConsecSum(otherNumbers, 3));  // 13\n        \n        int[] moreNumbers = {8, 1, 3, 7, 3, 2, 4, 10, -5, 4};\n        System.out.println(maxConsecSum(moreNumbers, 2)); // 14\n        System.out.println(maxConsecSum(moreNumbers, 5)); // 26\n        \n    }"
  },
  {
    "objectID": "slides-02-01.html#for-loops-solution",
    "href": "slides-02-01.html#for-loops-solution",
    "title": "Arrays",
    "section": "For loops – Solution",
    "text": "For loops – Solution\npublic class SlidingWindow {\n    \n    public static int maxConsecSum(int[] numbers, int k) {\n        // calculate the sum for the first window\n        int sum = 0;\n        for (int i = 0; i &lt; k; i ++) {\n            sum += numbers[i];\n        }\n        \n        // make first window sum max\n        int maxSum = sum;\n        \n        // sliding window, start where the first window stopped\n        // add the current new number, subtract current - k\n        for (int i = k; i &lt; numbers.length; i++) {\n            sum += numbers[i] - numbers[i-k];\n            // check if current sum is greater than what we have\n            if (maxSum &lt; sum) maxSum = sum;\n        }\n        \n        return maxSum;\n        \n    }\n    \n    public static void main(String[] args) {\n        int[] myNumbers = {10,2,-3,4,3};\n        System.out.println(maxConsecSum(myNumbers, 1)); // 10\n        System.out.println(maxConsecSum(myNumbers, 2)); // 12\n        System.out.println(maxConsecSum(myNumbers, 3)); // 9\n        System.out.println(maxConsecSum(myNumbers, 4)); // 13\n        System.out.println(maxConsecSum(myNumbers, 5)); // 16\n        \n        int[] otherNumbers = {8, 1, 3, 8, 2};\n        System.out.println(maxConsecSum(otherNumbers, 2));  // 11\n        System.out.println(maxConsecSum(otherNumbers, 3));  // 13\n        \n        int[] moreNumbers = {8, 1, 3, 7, 3, 2, 4, 10, -5, 4};\n        System.out.println(maxConsecSum(moreNumbers, 2)); // 14\n        System.out.println(maxConsecSum(moreNumbers, 5)); // 26\n        \n    }\n\n}"
  },
  {
    "objectID": "slides-02-01.html#calculate-factorial",
    "href": "slides-02-01.html#calculate-factorial",
    "title": "Arrays",
    "section": "Calculate Factorial",
    "text": "Calculate Factorial\nTASK: write Java code to calculate factorial of any integer n – your factorial(n) method should return an array of integers of size n where which element represents the factorial of the index\n\nFactorial is the product of all positive integers less than or equal to a given positive integer\nFactorial 5 is written 5!, meaning 1 × 2 × 3 × 4 × 5\nFactorial zero is defined as equal to 1"
  },
  {
    "objectID": "slides-02-01.html#factorial-solution",
    "href": "slides-02-01.html#factorial-solution",
    "title": "Arrays",
    "section": "Factorial – solution",
    "text": "Factorial – solution\nimport java.util.Arrays;\n\npublic class ArrayForExample {\n    \n    public static int[] factorial(int n) {\n        int result = 1;\n        int[] allResults = new int[n];\n        \n        for (int i = 1; i &lt;= n; i++) {\n            result *= i;\n            allResults[i-1] = result;\n            \n        }\n        \n        return allResults;\n        \n    }\n\n    public static void main(String[] args) {\n        int[] myResult = factorial(10);\n        System.out.println(Arrays.toString(myResult));\n    }\n\n}"
  },
  {
    "objectID": "slides-02-01.html#quiz-01",
    "href": "slides-02-01.html#quiz-01",
    "title": "Arrays",
    "section": "Quiz 01",
    "text": "Quiz 01\n\n\ncurrent time\n\n\n\n\n\n\nYou have 10 minutes to complete the quiz.\nNo need to write comments.\nName your method what you want, but the name should be in camelCase."
  },
  {
    "objectID": "slides-02-01.html#arraylist",
    "href": "slides-02-01.html#arraylist",
    "title": "Arrays",
    "section": "ArrayList",
    "text": "ArrayList\nThe size of an array cannot be modified.\nArrayList can grow as you need it. Elements in an ArrayList need to be objects.\nimport java.util.ArrayList;\n\nArrayList&lt;Integer&gt; moreNumbers = new ArrayList&lt;Integer&gt;();\nmoreNumbers.add(1);\nmoreNumbers.add(1);\nmoreNumbers.add(1);\nSystem.out.println(moreNumbers);\nAccess an item through its index:\nmoreNumbers.set(0, 99); // change value at index 0\nmoreNumbers.get(0); // get value at index 0\nmoreNumbers.remove(0); // remove value at index 0"
  },
  {
    "objectID": "slides-02-01.html#factorial-with-arraylist",
    "href": "slides-02-01.html#factorial-with-arraylist",
    "title": "Arrays",
    "section": "Factorial with ArrayList",
    "text": "Factorial with ArrayList\nRewrite your previous factorial solution to use ArrayList instead"
  },
  {
    "objectID": "slides-02-01.html#factorial-with-arraylist-solution",
    "href": "slides-02-01.html#factorial-with-arraylist-solution",
    "title": "Arrays",
    "section": "Factorial with ArrayList – Solution",
    "text": "Factorial with ArrayList – Solution\nimport java.util.ArrayList;\n\npublic class ArrayListExample {\n    \n    public static ArrayList&lt;Integer&gt; factorial(int n) {\n        int result = 1;\n        ArrayList&lt;Integer&gt; allResults = new ArrayList&lt;Integer&gt;();\n        \n        for (int i = 1; i &lt;= n; i++) {\n            result *= i;\n            allResults.add(result);\n            \n        }\n        \n        return allResults;\n    }\n\n    public static void main(String[] args) {\n        ArrayList&lt;Integer&gt; myResult = factorial(10);\n        System.out.println(myResult);\n    }\n\n}"
  },
  {
    "objectID": "slides-02-01.html#generating-random-numbers",
    "href": "slides-02-01.html#generating-random-numbers",
    "title": "Arrays",
    "section": "Generating random numbers",
    "text": "Generating random numbers\nWe will need to import Random from java.util\nimport java.util.Random;\nWe then create an instance of Random\nRandom rand = new Random();\nMethods:\nrand.nextInt(1000); // generate random integers in range 0 to 999\nrand.nextDouble(); // generate Random doubles"
  },
  {
    "objectID": "slides-02-01.html#arraylist-of-random-integers",
    "href": "slides-02-01.html#arraylist-of-random-integers",
    "title": "Arrays",
    "section": "ArrayList of random integers",
    "text": "ArrayList of random integers\nWrite a Java application that given an integer n, it creates an ArrayList of size n with random integers from 0 to n-1"
  },
  {
    "objectID": "slides-02-01.html#arraylist-of-random-integers-solution-1",
    "href": "slides-02-01.html#arraylist-of-random-integers-solution-1",
    "title": "Arrays",
    "section": "ArrayList of random integers – Solution 1",
    "text": "ArrayList of random integers – Solution 1\nModify this solution so that it gets the integer n from the args array\nimport java.util.ArrayList;\nimport java.util.Random;\n\npublic class RandomNumbers {\n    \n    public static ArrayList&lt;Integer&gt; getNumbers(int limit) {\n        Random rand = new Random();\n        ArrayList&lt;Integer&gt; randInts = new ArrayList&lt;Integer&gt;();\n        \n        for (int i = 0; i &lt; limit; i++)  randInts.add(rand.nextInt(limit));\n        \n        return randInts;\n        \n    }\n\n    public static void main(String[] args) {\n        \n        System.out.println(getNumbers(10));\n\n    }\n\n}"
  },
  {
    "objectID": "slides-02-01.html#arraylist-of-random-integers-solution-2",
    "href": "slides-02-01.html#arraylist-of-random-integers-solution-2",
    "title": "Arrays",
    "section": "ArrayList of random integers – Solution 2",
    "text": "ArrayList of random integers – Solution 2\nimport java.util.ArrayList;\nimport java.util.Random;\n\npublic class RandomNumbers {\n    \n    public static ArrayList&lt;Integer&gt; getNumbers(int limit) {\n        Random rand = new Random();\n        ArrayList&lt;Integer&gt; randInts = new ArrayList&lt;Integer&gt;();\n        \n        for (int i = 0; i &lt; limit; i++)  randInts.add(rand.nextInt(limit));\n        \n        return randInts;\n        \n    }\n\n    public static void main(String[] args) {\n        \n        int n = Integer.valueOf(args[0]);\n        System.out.println(getNumbers(n));\n\n    }\n\n}"
  },
  {
    "objectID": "slides-02-01.html#sorting",
    "href": "slides-02-01.html#sorting",
    "title": "Arrays",
    "section": "Sorting",
    "text": "Sorting\nWe can sort an ArrayList using Collections\nimport java.util.Collections; \nWe then call the method .sort()\nCollections.sort(myArrayList);\nRewrite your previous solution for ArrayList of random integers to create a sorted array"
  },
  {
    "objectID": "slides-02-01.html#arraylist-of-sorted-random-integers-solution",
    "href": "slides-02-01.html#arraylist-of-sorted-random-integers-solution",
    "title": "Arrays",
    "section": "ArrayList of sorted random integers – Solution",
    "text": "ArrayList of sorted random integers – Solution\nimport java.util.ArrayList;\nimport java.util.Collections; \nimport java.util.Random;\n\npublic class RandomNumbers {\n    \n    public static ArrayList&lt;Integer&gt; getNumbers(int limit) {\n        Random rand = new Random();\n        ArrayList&lt;Integer&gt; randInts = new ArrayList&lt;Integer&gt;();\n        \n        for (int i = 0; i &lt; limit; i++)  randInts.add(rand.nextInt(limit));\n        \n        Collections.sort(randInts);\n        return randInts;\n        \n    }\n\n    public static void main(String[] args) {\n        \n        if (args.length &gt; 0) {\n            int n = Integer.valueOf(args[0]); // or Integer.parseInt(args[0]);\n            ArrayList&lt;Integer&gt; myResult = getNumbers(n);\n            System.out.println(myResult);\n        }\n        \n    }\n}"
  },
  {
    "objectID": "syllabus.html",
    "href": "syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "This course is scheduled to be an in-person course, meeting in-person three times a week. There are multiple sections of the course with various meeting times. Your meeting time should be one of the following:\n\nGittings Rm 129b, 9:00-9:50am, MWF\n\nThis is a four-unit course, meeting in the lecture room three times a week (MWF). The weekly zoom lab sessions are flexible, meaning students have a number of time slots to choose from. To schedule your lab session go to the weekly lab session spreadsheet.\nAttendance is expected and required.\nIf you need an exception due to a medical or visa issue, please reach out to the DRC or instructor."
  },
  {
    "objectID": "syllabus.html#instructor-adriana-picoral",
    "href": "syllabus.html#instructor-adriana-picoral",
    "title": "Syllabus",
    "section": "Instructor: Adriana Picoral",
    "text": "Instructor: Adriana Picoral\n\nOffice: Gould-Simpson 811\nEmail: adrianaps@arizona.edu\nOffice hours (open door, drop in, my office GS 811):\n\nMonday 2:30pm to 3:30pm\nWednesday 10:30am to 12:30pm\n\n\nThere will also be many undergraduate TAs. See the class website for their contact info!"
  },
  {
    "objectID": "syllabus.html#due-dates-and-submission",
    "href": "syllabus.html#due-dates-and-submission",
    "title": "Syllabus",
    "section": "Due Dates and Submission",
    "text": "Due Dates and Submission\nProgramming and short assignments are to be submitted to Gradescope and are due at 11:30 pm on their associated DUE DATE."
  },
  {
    "objectID": "syllabus.html#grading-promptness",
    "href": "syllabus.html#grading-promptness",
    "title": "Syllabus",
    "section": "Grading Promptness",
    "text": "Grading Promptness\nGrades will be provided within 5 school days of the deadline. Any exceptions to this will be announced on Piazza and in class."
  },
  {
    "objectID": "syllabus.html#late-policy",
    "href": "syllabus.html#late-policy",
    "title": "Syllabus",
    "section": "Late Policy",
    "text": "Late Policy\nAnything late will not be graded and you will receive a 0%. Anything medical and/or disability-related should be discussed with DRC on campus (https://drc.arizona.edu/students/connect-drc). They work with instructors to put any accommodations in place."
  },
  {
    "objectID": "syllabus.html#dispute-of-grade-policy",
    "href": "syllabus.html#dispute-of-grade-policy",
    "title": "Syllabus",
    "section": "Dispute of Grade Policy",
    "text": "Dispute of Grade Policy\nAny requests for grading corrections must be done within 5 school days of the assignment being due."
  },
  {
    "objectID": "syllabus.html#incomplete-i-or-withdrawal-w",
    "href": "syllabus.html#incomplete-i-or-withdrawal-w",
    "title": "Syllabus",
    "section": "Incomplete (I) or Withdrawal (W):",
    "text": "Incomplete (I) or Withdrawal (W):\nRequests for incomplete (I) or withdrawal (W) must be made in accordance with University policies, which are available at https://catalog.arizona.edu/policy/courses-credit/grading/grading-system."
  },
  {
    "objectID": "compiling.html",
    "href": "compiling.html",
    "title": "Compiling",
    "section": "",
    "text": "Before you follow the instructions below, make sure you have this class in a working directory on Eclipse:\npublic class OddEven {\n    \n    public static boolean isEven(int n) {\n        return n % 2 == 0;\n    }\n    \n    public static void main(String[] args) {\n        // TODO Auto-generated method stub\n        int number = Integer.valueOf(args[0]);\n        if (isEven(number)) {\n            System.out.println(\"Even\");\n        } else {\n            System.out.println(\"Odd\");\n        }\n\n    }\n\n}\n\nDownload the JDK Development Kit\nOpen a local terminal (that can be done in several ways, on Eclipse go to Window &gt; Show View &gt; Terminal)\nHere’s what my terminal looks like: \nChange directory (cd) into your project folder (my working directory is in a folder called CSC210 on my Desktop): \ncd into the src folder: cd src\nWe will compile our .java file first by entering javac OddEven.java into our local terminal\nTo run our binary code with an argument we can enter java OddEven 2"
  },
  {
    "objectID": "checklist.html",
    "href": "checklist.html",
    "title": "Submission Checklist",
    "section": "",
    "text": "class name is in Proper Case (ClassName) – the first letter of every word, inclusing the first word, is uppercase while the remaining letters are lowercase\nclass name matches file name (ClassName.java)\nmethod and variable names are Camel Case (methodName) – the first letter of each word after the first is uppercase\npackage name is all lowercase and starts with package com.gradescope.\nset your methods as static if instructed to do so"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CSC 210 Fall 2024",
    "section": "",
    "text": "The main goal of this course is to learn how to decompose problems and solve them with a program and do this in an effective manner that enables your future self and others to read, understand, and maintain your programs. Other goals include learning a second programming language (Java), learning decomposition and debugging strategies, and learning GUI event-driven programming (JavaFX).\n\nCourse D2L\nGradescope\n\nWhere to start:\n\nSyllabus\nSchedule + Materials\n\n\nInstructor Information\n\nAdriana Picoral 🔈\n\nOffice: Gould-Simpson 811\nEmail: adrianaps@arizona.edu\nInstructor Website: adrianapicoral.com\nOffice hours (open door, drop in, my office GS 811):\n\nMonday 2:30pm to 3:30pm\nWednesday 10:30am to 12:30pm\n\n\n\n\n\nTA office hours\nTA office hours take place in Gould-Simpson room 821.\n\n\n\n\nInformation about the materials for this course\nThe materials (including slides and assignments) for this course are based on materials from previous CSC 210 instances created by other instructors, including: Michelle Strout, and Rick Mercer."
  },
  {
    "objectID": "slides-01-01.html#welcome-to-csc-210",
    "href": "slides-01-01.html#welcome-to-csc-210",
    "title": "Course Introduction",
    "section": "Welcome to CSC 210",
    "text": "Welcome to CSC 210\n\nThis is CSC 210 – Software Development\nuse data structures (i.e., hash table, tree, and graph), common algorithm patterns (i.e., exhaustive search, divide and conquer, recursive backtracking, and heuristic), unit testing, and debugging to write a correct solution to each sub-problem and integrate the sub-problem solutions into a complete working project (currently using Java).\ncompare and contrast programming in two programming languages (Python and Java).\nbuild graphical user input and output for programs (JavaFX)"
  },
  {
    "objectID": "slides-01-01.html#who-am-i",
    "href": "slides-01-01.html#who-am-i",
    "title": "Course Introduction",
    "section": "Who am I?",
    "text": "Who am I?\n\nAdriana Picoral (you can call me Adriana or Dr. Picoral)\nOffice: Gould-Simpson 811\nEmail: adrianaps@arizona.edu"
  },
  {
    "objectID": "slides-01-01.html#who-are-the-teaching-assistants-tas",
    "href": "slides-01-01.html#who-are-the-teaching-assistants-tas",
    "title": "Course Introduction",
    "section": "Who are the teaching assistants? (TAs)",
    "text": "Who are the teaching assistants? (TAs)\nIn this course we have course coordinators, senior TAs, and TAs.\nThe TAs are responsible for:\n\nHelping you, the students, succeed\nGrading quizzes, and exams\nHelping students on office hours\nLead lab sessions\n\n. . . So get to know them!"
  },
  {
    "objectID": "slides-01-01.html#get-to-know-each-other",
    "href": "slides-01-01.html#get-to-know-each-other",
    "title": "Course Introduction",
    "section": "Get to know each-other",
    "text": "Get to know each-other\n\nIntroduce yourself!\nShare your\n\nName and pronouns\nSomething new that you learned this summer"
  },
  {
    "objectID": "slides-01-01.html#assessment-structure",
    "href": "slides-01-01.html#assessment-structure",
    "title": "Course Introduction",
    "section": "Assessment structure",
    "text": "Assessment structure\n\nShort Projects (to be completed in the lab sessions)\nProjects\nExams and Quizzes"
  },
  {
    "objectID": "slides-01-01.html#exams-and-quizzes",
    "href": "slides-01-01.html#exams-and-quizzes",
    "title": "Course Introduction",
    "section": "Exams and Quizzes",
    "text": "Exams and Quizzes\n\nExams and quizzes are on paper.\nMidterms and quizzes are on Wednesdays.\nProgramming assignments will be submitted through GitHub (create an account)."
  },
  {
    "objectID": "slides-01-01.html#grade-distribution",
    "href": "slides-01-01.html#grade-distribution",
    "title": "Course Introduction",
    "section": "Grade Distribution",
    "text": "Grade Distribution\n\nProgramming Assignments, 20%\nShort Assignments, 10%\nQuizzes, 20%\nMidterm 1, 15%\nMidterm 2, 15%\nFinal, 20%"
  },
  {
    "objectID": "slides-01-01.html#syllabus-activity",
    "href": "slides-01-01.html#syllabus-activity",
    "title": "Course Introduction",
    "section": "Syllabus Activity",
    "text": "Syllabus Activity\n\nWhen are the exams?\nWhat’s the late policy for this class?\nWhen’s the first assignment due?"
  },
  {
    "objectID": "slides-01-01.html#other-important-dates",
    "href": "slides-01-01.html#other-important-dates",
    "title": "Course Introduction",
    "section": "Other Important Dates",
    "text": "Other Important Dates\n\nLast day for students to drop without a grade of W (withdraw) is September 08\nLast day for students to department staff to drop in UAccess with a W is September 22"
  },
  {
    "objectID": "slides-01-01.html#attendance-question",
    "href": "slides-01-01.html#attendance-question",
    "title": "Course Introduction",
    "section": "Attendance question",
    "text": "Attendance question\nGo to gradescope and answer the attendance question."
  },
  {
    "objectID": "slides-01-01.html#materials",
    "href": "slides-01-01.html#materials",
    "title": "Course Introduction",
    "section": "Materials",
    "text": "Materials\n\nReadings, videos, exercises, slides, assignment instructions will be available on the website\nHOWEVER, you are still responsible for things said/announced in class"
  },
  {
    "objectID": "slides-01-01.html#getting-started",
    "href": "slides-01-01.html#getting-started",
    "title": "Course Introduction",
    "section": "Getting started",
    "text": "Getting started\nCreate a GitHub account and submit your username in this form."
  },
  {
    "objectID": "slides-01-01.html#tips-on-slides",
    "href": "slides-01-01.html#tips-on-slides",
    "title": "Course Introduction",
    "section": "Tips on slides",
    "text": "Tips on slides\nPress the e key"
  },
  {
    "objectID": "short-assignment-01.html",
    "href": "short-assignment-01.html",
    "title": "Lab 01",
    "section": "",
    "text": "In today’s lab session we will practice using Scanner to take in user input from the keyboard and to read text files.\nGiven a text file that contains multiple lines with integers separated by space, your java application is to sum all integers and print out the result.\nFor example, for the following text file:\ninputFile1.txt\n3 3 3\n50 40\nYour application should print out 99.\nFor the file name to read, prompt the user to type a file name and read the keyboard entry. The message you should print to the user is Enter file name: – note the space after : and make sure to not print a line break after the space.\nExample run:\nEnter file name: inputFile1.txt\n99\n\n\n\nAdd the package name to the top of your file, so gradescope can find the compiled binary file:\npackage com.gradescope.filesum;"
  },
  {
    "objectID": "short-assignment-01.html#introduction",
    "href": "short-assignment-01.html#introduction",
    "title": "Lab 01",
    "section": "",
    "text": "In today’s lab session we will practice using Scanner to take in user input from the keyboard and to read text files.\nGiven a text file that contains multiple lines with integers separated by space, your java application is to sum all integers and print out the result.\nFor example, for the following text file:\ninputFile1.txt\n3 3 3\n50 40\nYour application should print out 99.\nFor the file name to read, prompt the user to type a file name and read the keyboard entry. The message you should print to the user is Enter file name: – note the space after : and make sure to not print a line break after the space.\nExample run:\nEnter file name: inputFile1.txt\n99"
  },
  {
    "objectID": "short-assignment-01.html#file-setup",
    "href": "short-assignment-01.html#file-setup",
    "title": "Lab 01",
    "section": "",
    "text": "Add the package name to the top of your file, so gradescope can find the compiled binary file:\npackage com.gradescope.filesum;"
  },
  {
    "objectID": "practice.html",
    "href": "practice.html",
    "title": "Practice Problems",
    "section": "",
    "text": "Weeks 01 and 02\nWeek 03\nWeek 04\nMidterm 01 Study Guide\nWeek 06\n\n\nOther Resources\n\nCodingBat"
  },
  {
    "objectID": "short-assignment-02.html",
    "href": "short-assignment-02.html",
    "title": "Lab 02",
    "section": "",
    "text": "In this week’s lab, we will be practicing reading .csv files, and manipulating HashMaps in Java.\nWe will be working with data on the 2024 olympics.\nThe program should have the following usage:\n    java MedalInfo COMMAND optional\nThe commands consist of MAX, MIN and COUNTRY.\nEach command will be most easily implemented with a HashMap. Therefore, your implementation will read in the csv file and be using a HashMap based on the medallists.csv file Kaggle.\nMAX - This function prints the country name with the most medals. Here’s what the message should look like:\nUnited States had the most medals with a total of 330 medals.\nMIN - This function prints the country name with the least medals. Here’s what the message should look like:\nCyprus had the fewest medals with a total of 1 medal.\nCOUNTRY - The country function requires an additional string argument on the command line. This string is the name of a country. Here’s what the message should look like when the second string argument is \"Brazil\":\nBrazil had a total of 67 medals.\n\n\n\nYour methods should work with this main method:\npublic static void main(String[] args) throws FileNotFoundException {\n        HashMap&lt;String, Integer&gt; countryCount = getMedalCount(\"medallists.csv\");\n        \n        if (args[0].equals(\"MAX\")) {\n            System.out.println(getMax(countryCount));\n        }\n        \n        if (args[0].equals(\"MIN\")) {\n            System.out.println(getMin(countryCount));\n        }\n        \n        if (args[0].equals(\"COUNTRY\")) {\n            System.out.println(getCountry(countryCount, args[1]));\n        }\n        \n\n    }\n\n\n\nAdd the package information at the top of your .java file:\npackage com.gradescope.medalinfo;\nSubmit your MedalInfo.java file to gradescope."
  },
  {
    "objectID": "short-assignment-02.html#introduction",
    "href": "short-assignment-02.html#introduction",
    "title": "Lab 02",
    "section": "",
    "text": "In this week’s lab, we will be practicing reading .csv files, and manipulating HashMaps in Java.\nWe will be working with data on the 2024 olympics.\nThe program should have the following usage:\n    java MedalInfo COMMAND optional\nThe commands consist of MAX, MIN and COUNTRY.\nEach command will be most easily implemented with a HashMap. Therefore, your implementation will read in the csv file and be using a HashMap based on the medallists.csv file Kaggle.\nMAX - This function prints the country name with the most medals. Here’s what the message should look like:\nUnited States had the most medals with a total of 330 medals.\nMIN - This function prints the country name with the least medals. Here’s what the message should look like:\nCyprus had the fewest medals with a total of 1 medal.\nCOUNTRY - The country function requires an additional string argument on the command line. This string is the name of a country. Here’s what the message should look like when the second string argument is \"Brazil\":\nBrazil had a total of 67 medals."
  },
  {
    "objectID": "short-assignment-02.html#testing-your-code",
    "href": "short-assignment-02.html#testing-your-code",
    "title": "Lab 02",
    "section": "",
    "text": "Your methods should work with this main method:\npublic static void main(String[] args) throws FileNotFoundException {\n        HashMap&lt;String, Integer&gt; countryCount = getMedalCount(\"medallists.csv\");\n        \n        if (args[0].equals(\"MAX\")) {\n            System.out.println(getMax(countryCount));\n        }\n        \n        if (args[0].equals(\"MIN\")) {\n            System.out.println(getMin(countryCount));\n        }\n        \n        if (args[0].equals(\"COUNTRY\")) {\n            System.out.println(getCountry(countryCount, args[1]));\n        }\n        \n\n    }"
  },
  {
    "objectID": "short-assignment-02.html#submitting-your-code",
    "href": "short-assignment-02.html#submitting-your-code",
    "title": "Lab 02",
    "section": "",
    "text": "Add the package information at the top of your .java file:\npackage com.gradescope.medalinfo;\nSubmit your MedalInfo.java file to gradescope."
  },
  {
    "objectID": "lab02-slides.html#hashmap-class",
    "href": "lab02-slides.html#hashmap-class",
    "title": "CSC 210 Lab 02",
    "section": "HashMap class",
    "text": "HashMap class\nHere’s the import statement:\nimport java.util.HashMap;\nTo create a dictionary with counts of something, we will have the key as String and the count or value as Integer in our HashMap.\nHashMap&lt;String, Integer&gt; somethingCount = new HashMap&lt;String, Integer&gt;();"
  },
  {
    "objectID": "lab02-slides.html#using-a-hashmap-to-count-things",
    "href": "lab02-slides.html#using-a-hashmap-to-count-things",
    "title": "CSC 210 Lab 02",
    "section": "Using a HashMap to count things",
    "text": "Using a HashMap to count things\nIn our loop to count instances of a certain string, we will use the .get(key) methods to retrieve the value stored for that specific key. We then use .put(key, value) to update the count for that key.\nInteger currentCount = somethingCount.get(dataRow[6]);\nif(currentCount == null) currentCount = 0;\nsomethingCount.put(dataRow[6], currentCount + 1);\nNote the use of a temporary variable called currentCount that is assigned null if that specific key is not in the HashMap yet."
  },
  {
    "objectID": "lab02-slides.html#count-example",
    "href": "lab02-slides.html#count-example",
    "title": "CSC 210 Lab 02",
    "section": "Count example",
    "text": "Count example\nLet’s count characters in a String.\nimport java.util.HashMap;\n\npublic class CountChars {\n    \n    public static HashMap&lt;Character, Integer&gt; countChars(String word) {\n        HashMap&lt;Character, Integer&gt; charCount = new HashMap&lt;Character, Integer&gt;();\n        \n        for (int i = 0; i &lt; word.length(); i++) {\n          // get value for the character at index i\n            Integer currentCount = charCount.get(word.charAt(i)); \n            \n            // if there was no key yet in the HashMap, make the value zero\n            if(currentCount == null) currentCount = 0;\n            \n            // put in the HashMap for the character at index i (our key)\n            // the current value plus one\n            charCount.put(word.charAt(i), currentCount + 1);\n        }\n        \n        return charCount;\n        \n        \n    }\n\n    public static void main(String[] args) {\n        System.out.println(countChars(\"pneumonoultramicroscopicsilicovolcanoconiosis\"));\n\n    }\n\n}"
  },
  {
    "objectID": "lab02-slides.html#assignment-instructions",
    "href": "lab02-slides.html#assignment-instructions",
    "title": "CSC 210 Lab 02",
    "section": "Assignment instructions",
    "text": "Assignment instructions\nShort Assignment 2"
  },
  {
    "objectID": "lab02-slides.html#write-getmedalcountfilename-first",
    "href": "lab02-slides.html#write-getmedalcountfilename-first",
    "title": "CSC 210 Lab 02",
    "section": "Write getMedalCount(filename) first",
    "text": "Write getMedalCount(filename) first\nThe first line in the main provided for testing we have the HashMap creating based on our .csv file:\nHashMap&lt;String, Integer&gt; countryCount = getMedalCount(\"medallists.csv\");\nDownload the medallists.csv file from Kaggle and add it to your project.\nThe first line is the file header, read that first line before writing a while loop with .hasNextLine()\nThen use split(,) to split each line and count the countries (index 6) in each split line."
  },
  {
    "objectID": "lab02-slides.html#write-getmaxhashmap",
    "href": "lab02-slides.html#write-getmaxhashmap",
    "title": "CSC 210 Lab 02",
    "section": "Write getMax(HashMap)",
    "text": "Write getMax(HashMap)\nFor this method you will return a string with a message like this:\ncountryName + \" had the most medals with a total of \" + maxCount + \" medals.\"\nYou can initialize the maxCount variable with zero, since we know all counts are positive. Then iterate over the keys in the HashMap using a for loop similar to this:\n for (String key : medalCount.keySet())"
  },
  {
    "objectID": "lab02-slides.html#write-getminhashmap",
    "href": "lab02-slides.html#write-getminhashmap",
    "title": "CSC 210 Lab 02",
    "section": "Write getMin(HashMap)",
    "text": "Write getMin(HashMap)\nSimilar to getMax, but the string returned should be s\ncountryName + \" had the fewest medals with a total of \" + minCount + \" medal.\"\nYou can use Integer.MAX_VALUE to initialize your minCount variable."
  },
  {
    "objectID": "lab02-slides.html#write-getcountryhashmap-string",
    "href": "lab02-slides.html#write-getcountryhashmap-string",
    "title": "CSC 210 Lab 02",
    "section": "Write getCountry(HashMap, String)",
    "text": "Write getCountry(HashMap, String)\nFor this method you need to return a string with the country name and the total number of methods that country had:\ncountryName + \" had a total of \" + medalCount + \" medals.\""
  },
  {
    "objectID": "programming-assignment-08.html",
    "href": "programming-assignment-08.html",
    "title": "Programming Assignment 08",
    "section": "",
    "text": "Deadline: November 13, 2024 – Wednesday, 11:30pm"
  },
  {
    "objectID": "programming-assignment-08.html#learning-objectives",
    "href": "programming-assignment-08.html#learning-objectives",
    "title": "Programming Assignment 08",
    "section": "Learning Objectives",
    "text": "Learning Objectives\nThe goal of this assignment is to use basic JavaFX to create a GUI output representation of the PA6-Garden program."
  },
  {
    "objectID": "programming-assignment-08.html#the-assignment",
    "href": "programming-assignment-08.html#the-assignment",
    "title": "Programming Assignment 08",
    "section": "The Assignment",
    "text": "The Assignment\nIn class on Friday March 30th we talked about ways to consider improving your PA6-Garden implementation. In this assignment, you will build on the improved PA6-Garden implemention to visually represent your garden simulation.\nFor PA8, you will be graphically representing each plant in the output as well as handling a ‘delay’ command from the input file that represents how long to wait between the execution of commands. In the video example (PublicTestCases/customPlant.in and PublicTestCases/CustomPlantExample.mp4), each part of a plant (i.e., each character from the PA6 output) is represented by uniquely colored tile on a canvas.\nThe ‘PRINT’ command is also completely excluded from this program. This means that you should not expect any ‘PRINT’ commands from any input file. You can leave in the print handling code if you would like however.\nPlease open and watch ‘PublicTestCases/Example.mp4’ to see an example GUI output for the input file ‘PublicTestCases/Garden.in’. Also see ‘PublicTestCases/customPlant.in’ and ‘PublicTestCases/CustomPlantExample.mp4’. You will be creating a variant of Garden.in for your own unique plant or garden object.\nYou should also be looking at the PA6-Garden writeup to refresh your memory on how it works: https://github.com/UACS210Spring2018/PA-and-Section-Writeups/tree/master/PA6-Garden."
  },
  {
    "objectID": "programming-assignment-08.html#delay-parameter",
    "href": "programming-assignment-08.html#delay-parameter",
    "title": "Programming Assignment 08",
    "section": "Delay parameter",
    "text": "Delay parameter\nThe input file format for this assignment is exactly the same as that of PA6-Garden, except that you will now have to handle a delay parameter. The delay will be specified on the third line of the input file right under the ‘cols’ parameter. An example input is shown below:\nrows: 1\ncols: 1\ndelay: 3.0\n\nPLANT (0,0) sunflower\nPLANT (2,2) tulip\nPLANT (5,5) iris\nGROW 1\nThe number after ‘delay:’ is a double that represents the time to wait before each command is executed. In the video example (CustomPlantExample.mp4), this delay was set to .5, therefore, each command was executed after waiting a half second."
  },
  {
    "objectID": "programming-assignment-08.html#steps-for-completing-this-assignment",
    "href": "programming-assignment-08.html#steps-for-completing-this-assignment",
    "title": "Programming Assignment 08",
    "section": "Steps for completing this assignment",
    "text": "Steps for completing this assignment\n\nSee a tutorial on how to install the JavaFX plugin in Eclipse at (https://docs.google.com/document/d/1FUROjRbvIi_WKNYJ-00uprIo2YPHDNd72SrqgwaqKis/edit?usp=sharing). The tutorial is also posted on the CS 210 resources webpage (https://piazza.com/arizona/spring2018/csc210/resources).\nAccept the github assignment for PA8, (https://classroom.github.com/a/JKfUfTBS). Import your PA8 github repository into Eclipse as usual.\nRun the given starter code and see what it does.\nCopy your PA6 code into the Eclipse project.\nImplement the TODO items in the provided PA8Main.java.\nCreate your own copy of Garden.in called myGarden.in that includes planting your unique garden item.\nMake a video of running myGarden.in through your program."
  },
  {
    "objectID": "programming-assignment-08.html#resources",
    "href": "programming-assignment-08.html#resources",
    "title": "Programming Assignment 08",
    "section": "Resources",
    "text": "Resources\nThe provided code uses some new concepts. We will be covering them in class. Additionally, here are some references.\n\ndrawing to a canvas, https://docs.oracle.com/javafx/2/canvas/jfxpub-canvas.htm\nlambda functions,http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/Lambda-QuickStart/index.html\ncolors to pick from, https://docs.oracle.com/javase/8/javafx/api/javafx/scene/paint/Color.html"
  },
  {
    "objectID": "programming-assignment-08.html#general-requirements",
    "href": "programming-assignment-08.html#general-requirements",
    "title": "Programming Assignment 08",
    "section": "General requirements",
    "text": "General requirements\nThis assignment is different from other assignments you’ve had so far in that you are given a lot more freedom to design your output the way you want. You can try to mimic what was done in the video and get the credit for it, but however you choose to output your garden, the following general requirements must be met:\n\nEach plant must be one-of-a-kind, meaning they must be distinguishable from any other plant and the background. In the example video, this is done by using a different color for each plant against a brown background. You do not have to do it this way, for example, you can choose to use an image for each plant instead of a colored tile.\nEach command must be visually noticeable. This means that when ‘GROW 1’ is called for example, it should be visually obvious that every plant just grew by 1. In the example video, grow commands cause more identical tiles to be drawn in some fashion (depending on the plant type) around every plant.\nThere must be a command log which displays commands as they are being executed. In the example video, this is done in a TextArea at the bottom of the garden.\nYou must still handle errors. Errors that don’t cause the program to stop (such as ‘Can’t grow here’) should be distinguishable in the command log. In the video example, the error is fully capitalized and spaced out from surrounding text. For errors that do cause the program to stop, such as ‘Invalid dimension input’ or ‘File not found’ should still print to stdout and exit the program as usual."
  },
  {
    "objectID": "programming-assignment-08.html#grading-criteria",
    "href": "programming-assignment-08.html#grading-criteria",
    "title": "Programming Assignment 08",
    "section": "Grading Criteria",
    "text": "Grading Criteria\nHalf of the PA8 grade will correctness. For this assignment, this is the GUI output. You should also expect that we might run your program with additional input files besides the ones provided.\nThe other half of the PA8 grade will be your decomposition and code clarity.\nDecomposition\n\nPoints will be taken off for copy, pasted, and edited code that should have been encapsulated in a method.\nThis program should use fewer than 10 .java files. Each of these files should be (&lt;300 lines).\nEach method should be less than 30 lines. This INCLUDES comments, but not the method header. It is easier to read a function if it can all fit on one screen.\n\nCode Clarity * YOU should be able to read, understand, and explain your own code to someone else a couple days after you wrote it. * No magic numbers * No methods written to just get the test cases to work\n\nThere needs to be a balance between no comments in the body of the methods and a comment for every line in the program. Either extreme will result in points off.\nThe file header should include instructions on how someone would use this program. To use the program, one would need to know the input file format. One would also need to know the command line arguments that should be passed to the program.\nUse meaningful variable names. Loop iterators can be simple (i for integers, s for strings, n for numbers, etc.).\nThe clearest code examples will be anonymously shown in class.\nThe most obfuscated code examples will be anonymously shown in class with suggestions for improvement."
  },
  {
    "objectID": "programming-assignment-08.html#submission",
    "href": "programming-assignment-08.html#submission",
    "title": "Programming Assignment 08",
    "section": "Submission",
    "text": "Submission\nFor this assignment, you are REQUIRED to submit all of the following files to Gradescope before Monday April 9th at 11:30am. * All the Java source files needed to run your program. * myGarden.in * myGarden.mp4, or other video format that can be run on multiple platforms. The video should be between 10 and 15 seconds long.\nTo create the video, you can use a program to record your screen as you run your program, or you can simply record your screen with your smartphone or tablet. Do note however that the video you submit must be of good enough quality for the SL’s to clearly see your garden and command logs.\nWrite your own code. We will be using a tool that finds similar code.\nIt is recommended that when talking with others about the assignment, do not write anything down."
  },
  {
    "objectID": "programming-assignment-09.html",
    "href": "programming-assignment-09.html",
    "title": "Programming Assignment 09",
    "section": "",
    "text": "Deadline: November 20, 2024 – Wednesday, 11:30pm"
  },
  {
    "objectID": "programming-assignment-09.html#learning-objectives",
    "href": "programming-assignment-09.html#learning-objectives",
    "title": "Programming Assignment 09",
    "section": "Learning Objectives",
    "text": "Learning Objectives\nThe goal of this assignment is to improve on basic JavaFX knowledge by adding event-driven GUI programming to the PA8-GardenGUIout program."
  },
  {
    "objectID": "programming-assignment-09.html#the-assignment",
    "href": "programming-assignment-09.html#the-assignment",
    "title": "Programming Assignment 09",
    "section": "The Assignment",
    "text": "The Assignment\nFor PA9, you will be adding events to the GUI representation of PA8. This means there will be no input file to read from. Instead of reading the input file from the command line arguments, you will read in the number of rows and columns of plots in the garden from the command line. Then along with the garden visualization you will create a TextField where a user can input a garden simulation command (e.g., grow 1, plant (2,3) sunflower, …) and then click on a simulate button to show the results of that command.\nAnother interesting aspect of PA9 is that you will be continuing to refine the Garden simulation code. Some of your code will change and some of the code from PA8 and PA6 should be removed in PA9."
  },
  {
    "objectID": "programming-assignment-09.html#what-needs-to-be-removed",
    "href": "programming-assignment-09.html#what-needs-to-be-removed",
    "title": "Programming Assignment 09",
    "section": "What needs to be removed",
    "text": "What needs to be removed\nFile reading: Since we are no longer reading commands in from a file, all code that is used to read in from a file is no longer needed. You will still need to parse commands however.\nDelay Code: In the previous assignment a delay was needed to show the output for every command, for this assignment this is no longer needed since we are running one command at a time via a graphical user interface."
  },
  {
    "objectID": "programming-assignment-09.html#what-needs-to-be-added",
    "href": "programming-assignment-09.html#what-needs-to-be-added",
    "title": "Programming Assignment 09",
    "section": "What needs to be added",
    "text": "What needs to be added\nUser input: Since we will not be reading from a file, we are going to need some way to read in commands from the user. We recommend a TextArea and a button to cause the execution of the command in that TextArea. Feel free to try different approaches.\nEvent Handlers: To use the information that the user provides your code must have at least one Event Handler. This should grab the information from the user and do something with it whenever a specified event occurs. (clicking of a button and/or pressing enter on keyboard)"
  },
  {
    "objectID": "programming-assignment-09.html#what-needs-to-be-changed",
    "href": "programming-assignment-09.html#what-needs-to-be-changed",
    "title": "Programming Assignment 09",
    "section": "What needs to be changed",
    "text": "What needs to be changed\nCommand line arguments: Instead of reading in a filename from the command line, you will be reading in both the width and height of the garden."
  },
  {
    "objectID": "programming-assignment-09.html#steps-for-completing-this-assignment",
    "href": "programming-assignment-09.html#steps-for-completing-this-assignment",
    "title": "Programming Assignment 09",
    "section": "Steps for completing this assignment",
    "text": "Steps for completing this assignment\n\nAccept the github assignment for PA9, https://classroom.github.com/a/t1WEMs86.\nImport your PA9 github repository into Eclipse as usual.\nPlay around with the given PA9 starter code that does something with the text a user puts into a text field.\nMake sure your PA8 code works.\nIf it does, then incorporate your PA8 code into your PA9. We strongly recommend you do it in small pieces.\nImplement the functionality provided in this write up for PA9.\nTest your code with various inputs to make sure that it works correctly."
  },
  {
    "objectID": "programming-assignment-09.html#resources",
    "href": "programming-assignment-09.html#resources",
    "title": "Programming Assignment 09",
    "section": "Resources",
    "text": "Resources\nThe provided code uses some new concepts. We will be covering them in class and/or Section. Additionally, here are some references.\n\nThe example-video.mov file in the starter project demonstrates the baseline functionality for PA9. You will be demonstrating your project to your SL during Section.\nText Field, https://docs.oracle.com/javafx/2/ui_controls/text-field.htm"
  },
  {
    "objectID": "programming-assignment-09.html#general-requirements",
    "href": "programming-assignment-09.html#general-requirements",
    "title": "Programming Assignment 09",
    "section": "General requirements",
    "text": "General requirements\nThis assignment is different from other assignments you’ve had so far in that you are given a lot more freedom to design your output the way you want. You can try to mimic what was done in the video and get the credit for it, but however you choose to receive graphical input for your garden, the following general requirements must be met:\n\nA user should be able to type in a command and submit it via the GUI. This means that there should be somewhere to insert text and some way to submit that text. Both of these must be intuitive, that means that the user must understand where he/she should insert commands and how to submit said command by only looking at the GUI.\nAs in PA8, each plant must be one-of-a-kind, meaning they must be distinguishable from any other plant and the background. In the example video, this is done by using a different color for each plant against a brown background. You do not have to do it this way, for example, you can choose to use an image for each plant instead of a colored tile.\nAs in PA8, each command must be visually noticeable. This means that when ‘GROW 1’ is called for example, it should be visually obvious that every plant just grew by 1. In the example video, grow commands cause more identical tiles to be drawn in some fashion (depending on the plant type) around every plant.\nAs in PA8, there must be a command log which displays commands as they are being executed. In the example video, this is done in a TextArea at the bottom of the garden.\nAs in PA8, you must still handle errors. Errors that don’t cause the program to stop (such as ‘Can’t grow here’) should be distinguishable in the command log. In the video example, the error is fully capitalized and spaced out from surrounding text. For errors that do cause the program to stop, such as ‘Invalid dimension input’ should still print to stdout and exit the program as usual."
  },
  {
    "objectID": "programming-assignment-09.html#grading-criteria",
    "href": "programming-assignment-09.html#grading-criteria",
    "title": "Programming Assignment 09",
    "section": "Grading Criteria",
    "text": "Grading Criteria\nHalf of the PA9 grade will be a working GUI. You will be demonstrating your GUI to your SL during Sections April 16th or 17th. Your demonstration must be less than 5 minutes and show all of the above listed criteria.\nThe working GUI must also be demonstrated with code. Submit your PA9 code to gradescope.\nThe other half of the PA9 grade will be your decomposition and code clarity.\nDecomposition\n\nPoints will be taken off for copy, pasted, and edited code that should have been encapsulated in a method.\nThis program should use fewer than 10 .java files. Each of these files should be (&lt;300 lines).\nEach method should be less than 30 lines. This INCLUDES comments, but not the method header. It is easier to read a function if it can all fit on one screen.\n\nCode Clarity * YOU should be able to read, understand, and explain your own code to someone else a couple days after you wrote it. * No magic numbers * No methods written to just get the test cases to work\n\nThere needs to be a balance between no comments in the body of the methods and a comment for every line in the program. Either extreme will result in points off.\nThe file header should include instructions on how someone would use this program. To use the program, one would need to know the input file format. One would also need to know the command line arguments that should be passed to the program.\nUse meaningful variable names. Loop iterators can be simple (i for integers, s for strings, n for numbers, etc.).\nThe clearest code examples will be anonymously shown in class.\nThe most obfuscated code examples will be anonymously shown in class with suggestions for improvement."
  },
  {
    "objectID": "programming-assignment-09.html#submission",
    "href": "programming-assignment-09.html#submission",
    "title": "Programming Assignment 09",
    "section": "Submission",
    "text": "Submission\nFor this assignment, you are REQUIRED to submit all of the following files to Gradescope before Monday April 16th at 11:30am. * All the Java source files needed to run your program. * If you are trying for the up to 10 extra credit points for going above and beyond, then let your SL know during your demo and summarize what you did extra in a README.md file that you submit to Gradescope.\nWrite your own code. We will be using a tool that finds similar code.\nIt is recommended that when talking with others about the assignment, do not write anything down."
  },
  {
    "objectID": "programming-assignments.html",
    "href": "programming-assignments.html",
    "title": "Programming Assignments",
    "section": "",
    "text": "Fill out this survey with your GitHub username so that you can get credit for your project submissions.\n\nPA 1\n\nDeadline: September 11, 2024 – Wednesday, 11:30pm\nInstructions\n\n\n\nPA 2\n\nDeadline: September 18, 2024 – Wednesday, 11:30pm\nInstructions\n\n\n\nPA 3\n\nDeadline: September 27, 2024 – Friday, 11:30pm\nInstructions\n\n\n\nPA 4\n\nDeadline: October 04, 2024 – Friday, 11:30pm\nInstructions"
  },
  {
    "objectID": "academic-integrity.html",
    "href": "academic-integrity.html",
    "title": "Academic Integrity",
    "section": "",
    "text": "All work you submit for grading in this course must be your own. Submitting work that includes (minor and/or major) components that are not your own work is considered plagiarism. Instances of plagiarism will be reported to the Dean of Students.\nKeep in mind that all assignments and practice problems provided in this course are meant to help you practice the skills that you will need to do well in all assessments (including on paper quizzes and exams), so it is generally in your best interest to avoid taking shortcuts even on practice problems (which are ungraded).\nSharing your code with others (in addition to copying code from others) is considered a break of the academic integrity code (unauthorized assistance) as well. If code that you claim is yours is found in other students’ submission(s), you will also be reported to the Dean of Students.\nThe university keeps track of multiple offenses. For the College of Science, the second reported offense results in a failing grade for the class in which the second offense occurred.\nGradescope has a similarity tool, which compares all submissions and creates reports with submission overlaps. Similarity reports will be generated also with code generated by AI tools, and code found online.\nThe penalty for breaking the academic integrity code is zero points awarded to the assignment found to be plagiarizes and -5 points from final grade (out of 100 points)."
  },
  {
    "objectID": "slides-03-02.html#two-recursive-algorithms",
    "href": "slides-03-02.html#two-recursive-algorithms",
    "title": "Backtracking",
    "section": "Two recursive algorithms",
    "text": "Two recursive algorithms\n\nExhaustive Search\nBacktracking\n\nThese are brute-force algorithms\nUsed for problems that have a small and well-defined search space, where it is feasible to check all possible solutions"
  },
  {
    "objectID": "slides-03-02.html#backtracking",
    "href": "slides-03-02.html#backtracking",
    "title": "Backtracking",
    "section": "Backtracking",
    "text": "Backtracking\nMain idea: find every solution incrementally by trying different options, then abandoning them if they are not suitable\nIn other words: exhaustive search + conditions for suitable solution"
  },
  {
    "objectID": "slides-03-02.html#application-dice-roll-sum",
    "href": "slides-03-02.html#application-dice-roll-sum",
    "title": "Backtracking",
    "section": "Application: Dice roll sum",
    "text": "Application: Dice roll sum\nWrite a Java application that given two integers representing 1) how many dice to roll, and 2) the target sum of all dice values, it outputs all combinations of dice values that add up to the target sum.\nExample call:\ntargetSum = 7;\ngetValidCombinations(2);\nOutput:\n[1, 6]\n[2, 5]\n[3, 4]\n[4, 3]\n[5, 2]\n[6, 1]"
  },
  {
    "objectID": "slides-03-02.html#solution-1",
    "href": "slides-03-02.html#solution-1",
    "title": "Backtracking",
    "section": "Solution 1",
    "text": "Solution 1\nimport java.util.ArrayList;\n\npublic class DiceBacktracking {\n    \n    public static int sumAll(ArrayList&lt;Integer&gt; values) {\n        int sum = 0;\n        for (int v : values) sum += v;\n        return sum;\n    }\n    \n    public static void getValidCombinations(int count,\n                                            ArrayList&lt;ArrayList&lt;Integer&gt;&gt; result,\n                                            ArrayList&lt;Integer&gt; values) {\n        if (count == 0) {\n            if (sumAll(values) == targetSum) {\n                ArrayList&lt;Integer&gt; valuesToAdd = new ArrayList&lt;Integer&gt;(values);\n                result.add(valuesToAdd);\n            }\n        }\n        else {\n            for (int v = 1; v &lt;= 6; v++) {\n                values.add(v); \n                getValidCombinations(count - 1, result, values);\n                values.remove(values.size() - 1);\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n      ArrayList&lt;ArrayList&lt;Integer&gt;&gt; result = new ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();\n      ArrayList&lt;Integer&gt; values = new ArrayList&lt;Integer&gt;();\n      \n      int targetSum = 7;\n        getValidCombinations(2, result, values);\n        \n        for (ArrayList&lt;Integer&gt; v : result) System.out.println(v);\n        \n    }\n}"
  },
  {
    "objectID": "slides-03-02.html#optimizations-pruning",
    "href": "slides-03-02.html#optimizations-pruning",
    "title": "Backtracking",
    "section": "Optimizations (Pruning)",
    "text": "Optimizations (Pruning)\nWe can preemptively stop, or prune, branches in the decision tree that cannot lead to a valid solution:\n\ncurrent sum is already too high (rolling all 1s in the remaining dice will cause it to go over target sum)\ncurrent sum is already too low (rolling all 6s in the remaining dice will cause it to be under target sum)"
  },
  {
    "objectID": "slides-03-02.html#solution-2",
    "href": "slides-03-02.html#solution-2",
    "title": "Backtracking",
    "section": "Solution 2",
    "text": "Solution 2\nimport java.util.ArrayList;\n\n\npublic class DiceBacktracking {\n    \n    public static void main(String[] args) {\n        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; result = new ArrayList&lt;ArrayList&lt;Integer&gt;&gt; ();\n        ArrayList&lt;Integer&gt; values = new ArrayList&lt;Integer&gt;();\n        int targetSum = 5;\n        getValidCombinations(2, 0, result, values, targetSum);\n        for (ArrayList&lt;Integer&gt; v : result) System.out.println(v);\n    }\n    \n  public static void getValidCombinations(int count, int currentSum,\n                                          ArrayList&lt;ArrayList&lt;Integer&gt;&gt; result,\n                                          ArrayList&lt;Integer&gt; values,\n                                          int targetSum) {\n        if (count == 0) {\n            if (currentSum == targetSum) {\n                ArrayList&lt;Integer&gt; valuesToAdd = new ArrayList&lt;Integer&gt;(values);\n                result.add(valuesToAdd);\n            }\n        } else if (currentSum + 1 * count &gt; targetSum ||\n                   currentSum + 6 * count &lt; targetSum) {\n                      return;\n        } else {\n            for (int v = 1; v &lt;= 6; v++) {\n                values.add(v);\n                getValidCombinations(count-1, currentSum+v, result, values, targetSum);\n                values.remove(values.size()-1);\n            }\n        }\n    }\n}"
  },
  {
    "objectID": "short-assignment-03.html",
    "href": "short-assignment-03.html",
    "title": "Lab 03",
    "section": "",
    "text": "Today’s lab will be an introduction to the algorithmic structure of exhaustive search and will help prepare you for PA3. The first part of the lab will be to generate all of the binary numbers for an N-bit number, in ascending order. The second part of the lab will be to generate all of the possible dice roll combinations for a six-sided dice. This lab will also reinforce your skills relating to arrays and recursion.\nExhaustive search is where every possible solution is enumerated. This is also known as the brute-force approach. In many cases, exhaustive search is the simplest solution, and the one to try first.\nRemember, in lab sessions you can share code. For programming assignments you cannot.\n\n\n\nThis is the first assignment where you will have multiple classes. Part One should be completed in the Lab3Binary.java file and Part Two should be completed in the Lab3Dice.java file.\nPart One: Exhaustively print out 0-2^N - 1, where N is the number of bits, in ascending order in binary.\nPart Two: Exhaustively print out the dice rolling combinations for N six-sided dice.\nHere’s the package info for both files:\npackage com.gradescope.lab03;\nSubmit both .java files to gradescope at once.\n\n\nFor Part 1 of this lab we are completing a class that generates an ArrayList in ascending order all with the binary representations of the numbers 0-2^N - 1, where N represents the number of bits.\nFor example, if N = 2, then the output would be:\n[00, 01, 10, 11]\nAdditionally, this activity relies on the enumerate (exhaustive search) algorithm described in class, so you should refer to those slides for help while working through this lab.\n\n\nConsider what decisions need to be made in order to enumerate over all of the binary numbers starting from 00000 and getting to 11111 (for N = 5).\n\nWhat parameters do you need with your enumerate method? What do these parameters represent?\nWhat value, 0 or 1, should you start setting each bit to? What part of the enumeration method relates to changing the bit’s value?\nHow should you move to the next bit? How will you achieve this in your recursive enumeration call?\nLook back at the lecture slides to recall the format of the enumerate algorithm and copy over any necessary code.\n\n\n\n\nThe enumerate algorithm requires a recursive call of the enumerate method. To conclude this activity, you need to a recursive step and select a base case condition.\n\nWhat parameters should be equal for you to stop the recursion?\nWhere should the base case be located in your enumerate method?\nWhere should you call the method again?\n\n\n\n\n\n\nYour code should run with the following main method:\npublic static void main(String[] args) {\n        ArrayList&lt;String&gt; allSolutions = new ArrayList&lt;String&gt;();\n        binary(5, \"\", allSolutions);\n        System.out.println(allSolutions);\n    }\n\n\nThis activity is very similar to the previous binary activity, so make sure to complete that activity first and reuse the enumerate algorithm here.\n\n\nConsider what decisions need to be made in order to enumerate over all of the possible roll combinations for N dice.\nFor example, if N = 1, then the output would be:\n[1, 2, 3, 4, 5, 6]\nFor N = 2, the output would be:\n[11, 12, 13, 14, 15, 16, 21, 22, 23, 24, 25, 26, 31, 32, 33, 34, 35, 36, 41, 42, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 61, 62, 63, 64, 65, 66]\n\nWhat parameters do you need with your enumerate method? What do these parameters represent?\nWhat value should you start setting each die to? Is this a different value than the start value used during the binary activity?\nHow should you move to selecting the value of the next roll? How will you achieve this in your recursive enumeration call?\nLook back at Part 1 or the lecture slides to recall the format of the enumerate algorithm to copy over any necessary code.\n\n\n\n\nThe enumerate algorithm requires a recursive call of the enumerate method. To conclude this activity, you need to implement the recursive call and select a base case condition. Think and discuss with your partner the following questions.\n\nWhat parameters should be equal for you to stop the recursion?\nWhere should the base case be located in your enumerate function?\nWhere should you call the method recursively?\n\n\n\n\n\n\nYour code should run with the following main method:\npublic static void main(String[] args) {\n        ArrayList&lt;String&gt; allSolutions = new ArrayList&lt;String&gt;();\n        String solution = \"\";\n        roll(2, solution, allSolutions);\n        System.out.println(allSolutions);\n    }\n\n\n\nLook up methods to take advantage of Java’s libraries.\n\nSystem.out.println() is your friend for testing and output\nDeclaring an ArrayList:\n\nArrayList&lt;Integer&gt; array = new ArrayList&lt;Integer&gt;();\n\nAdding a value in an ArrayList:\n\narray.add(1);"
  },
  {
    "objectID": "short-assignment-03.html#introduction",
    "href": "short-assignment-03.html#introduction",
    "title": "Lab 03",
    "section": "",
    "text": "Today’s lab will be an introduction to the algorithmic structure of exhaustive search and will help prepare you for PA3. The first part of the lab will be to generate all of the binary numbers for an N-bit number, in ascending order. The second part of the lab will be to generate all of the possible dice roll combinations for a six-sided dice. This lab will also reinforce your skills relating to arrays and recursion.\nExhaustive search is where every possible solution is enumerated. This is also known as the brute-force approach. In many cases, exhaustive search is the simplest solution, and the one to try first.\nRemember, in lab sessions you can share code. For programming assignments you cannot."
  },
  {
    "objectID": "short-assignment-03.html#setup-for-peer-review",
    "href": "short-assignment-03.html#setup-for-peer-review",
    "title": "Lab 03",
    "section": "",
    "text": "You will need to go to the Aropa website, click on the U of A logo or select the University of Arizona on the dropdown menu, and then log in using your UA netid and the class code 386198. The website is linked below and the same instructions are posted on Piazza.\nhttps://aropa2.gla.ac.uk/aropa/aropa.php\nYou will be prompted to change your password. Choose a secure password that you will remember as you will use this same account for peer reviews in the future."
  },
  {
    "objectID": "short-assignment-03.html#the-assignment",
    "href": "short-assignment-03.html#the-assignment",
    "title": "Lab 03",
    "section": "",
    "text": "This is the first assignment where you will have multiple classes. Part One should be completed in the Lab3Binary.java file and Part Two should be completed in the Lab3Dice.java file.\nPart One: Exhaustively print out 0-2^N - 1, where N is the number of bits, in ascending order in binary.\nPart Two: Exhaustively print out the dice rolling combinations for N six-sided dice.\nHere’s the package info for both files:\npackage com.gradescope.lab03;\nSubmit both .java files to gradescope at once.\n\n\nFor Part 1 of this lab we are completing a class that generates an ArrayList in ascending order all with the binary representations of the numbers 0-2^N - 1, where N represents the number of bits.\nFor example, if N = 2, then the output would be:\n[00, 01, 10, 11]\nAdditionally, this activity relies on the enumerate (exhaustive search) algorithm described in class, so you should refer to those slides for help while working through this lab.\n\n\nConsider what decisions need to be made in order to enumerate over all of the binary numbers starting from 00000 and getting to 11111 (for N = 5).\n\nWhat parameters do you need with your enumerate method? What do these parameters represent?\nWhat value, 0 or 1, should you start setting each bit to? What part of the enumeration method relates to changing the bit’s value?\nHow should you move to the next bit? How will you achieve this in your recursive enumeration call?\nLook back at the lecture slides to recall the format of the enumerate algorithm and copy over any necessary code.\n\n\n\n\nThe enumerate algorithm requires a recursive call of the enumerate method. To conclude this activity, you need to a recursive step and select a base case condition.\n\nWhat parameters should be equal for you to stop the recursion?\nWhere should the base case be located in your enumerate method?\nWhere should you call the method again?"
  },
  {
    "objectID": "slides-03-01.html#two-recursive-algorithms",
    "href": "slides-03-01.html#two-recursive-algorithms",
    "title": "Exhaustive Search",
    "section": "Two recursive algorithms",
    "text": "Two recursive algorithms\n\nExhaustive Search\nBacktracking\n\nThese are brute-force algorithms\nUsed for problems that have a small and well-defined search space, where it is feasible to check all possible solutions"
  },
  {
    "objectID": "slides-03-01.html#exhaustive-search",
    "href": "slides-03-01.html#exhaustive-search",
    "title": "Exhaustive Search",
    "section": "Exhaustive Search",
    "text": "Exhaustive Search\nAlso called recursive enumeration\nMain idea: systematically identify every possible solution to a problem"
  },
  {
    "objectID": "slides-03-01.html#print-all-possible-binary-numbers",
    "href": "slides-03-01.html#print-all-possible-binary-numbers",
    "title": "Exhaustive Search",
    "section": "Print all possible binary numbers",
    "text": "Print all possible binary numbers\nWrite a Java application that given an integer n, it prints all binary numbers that have n digits.\nMake sure your application outputs one binary number per line, in ascending order.\nHINTS:\n\nBuild a string (starting with empty string) and print it out (when? when do you stop building the string? what’s the condition?)\nTwo possibilities for each character concatenated to the string: '0' or '1'"
  },
  {
    "objectID": "slides-03-01.html#print-all-possible-binary-numbers-1",
    "href": "slides-03-01.html#print-all-possible-binary-numbers-1",
    "title": "Exhaustive Search",
    "section": "Print all possible binary numbers",
    "text": "Print all possible binary numbers\nThe call:\ngetBinary(3, \"\");\nPrints out:\n000\n001\n010\n011\n100\n101\n110\n111"
  },
  {
    "objectID": "slides-03-01.html#all-possible-binary-numbers-solution",
    "href": "slides-03-01.html#all-possible-binary-numbers-solution",
    "title": "Exhaustive Search",
    "section": "All possible binary numbers – solution",
    "text": "All possible binary numbers – solution\npublic class AllBinary {\n\n    public static void getBinary(int digits, String number) {\n        if (digits == 0) { // base case, no digits left to add\n            System.out.println(number);\n        } else {\n            getBinary(digits - 1, number + \"0\");\n            getBinary(digits - 1, number + \"1\");\n        }\n    }\n    \n    public static void main(String[] args) {\n        getBinary(3, \"\");\n    }\n\n}"
  },
  {
    "objectID": "slides-03-01.html#creating-an-arraylist-of-solutions",
    "href": "slides-03-01.html#creating-an-arraylist-of-solutions",
    "title": "Exhaustive Search",
    "section": "Creating an ArrayList of solutions",
    "text": "Creating an ArrayList of solutions\nWhat if instead of printing out a solution, I wanted to create an ArrayList of solutions?"
  },
  {
    "objectID": "slides-03-01.html#creating-an-arraylist-of-solutions-1",
    "href": "slides-03-01.html#creating-an-arraylist-of-solutions-1",
    "title": "Exhaustive Search",
    "section": "Creating an ArrayList of solutions",
    "text": "Creating an ArrayList of solutions\nimport java.util.ArrayList;\n\npublic class AllBinary {\n    \n    static ArrayList&lt;String&gt; result = new ArrayList&lt;String&gt;();\n\n    public static void getBinary(int digits, String number) {\n        if (digits == 0) {\n            result.add(number);\n        } else {\n            getBinary(digits - 1, number + \"0\");\n            getBinary(digits - 1, number + \"1\");\n        }\n        \n    }\n    \n    public static void main(String[] args) {\n        getBinary(4, \"\");\n        System.out.println(result);\n    }\n\n}"
  },
  {
    "objectID": "slides-03-01.html#print-all-possible-decimal-numbers",
    "href": "slides-03-01.html#print-all-possible-decimal-numbers",
    "title": "Exhaustive Search",
    "section": "Print all possible decimal numbers",
    "text": "Print all possible decimal numbers\nWrite a Java application that given an integer n, it prints all decimal numbers that have n digits.\nHINT:\n\nSame as before (for binary numbers), the difference is that instead of just two choices per character, we now have 10 character choices for each position in the number\nUse a for loop to iterate over the digits 0 to 9"
  },
  {
    "objectID": "slides-03-01.html#print-all-possible-decimal-numbers-1",
    "href": "slides-03-01.html#print-all-possible-decimal-numbers-1",
    "title": "Exhaustive Search",
    "section": "Print all possible decimal numbers",
    "text": "Print all possible decimal numbers\nThe call:\ngetDecimal(2, \"\");\nPrints out:\n00\n01\n02\n03\n..\n94\n95\n96\n97\n98\n99"
  },
  {
    "objectID": "slides-03-01.html#all-possible-decimal-numbers-solution",
    "href": "slides-03-01.html#all-possible-decimal-numbers-solution",
    "title": "Exhaustive Search",
    "section": "All possible decimal numbers – solution",
    "text": "All possible decimal numbers – solution\nimport java.util.ArrayList;\n\npublic class AllDecimal {\n    \n    public static void getDecimal(int digits, String number, ArrayList&lt;String&gt; result) {\n        if (digits == 0) {\n            result.add(number);\n        } else {\n            for (int n = 0; n &lt; 10; n++) {\n                getDecimal(digits - 1, number + n, result);\n            }\n            \n        }\n        \n    } // getDecimal\n\n    public static void main(String[] args) {\n      ArrayList&lt;String&gt; result = new ArrayList&lt;String&gt;();\n        \n        getDecimal(2, \"\", result);\n        \n        for (String number : result) {\n            System.out.println(number);\n        }\n\n    }\n}"
  },
  {
    "objectID": "slides-01-02.html#before-we-start",
    "href": "slides-01-02.html#before-we-start",
    "title": "Intro to Java",
    "section": "Before we start",
    "text": "Before we start\nWe will be using Eclipse as our IDE for this course.\nIt’s good practice to have a working environment folder and work within projects. (DEMO)\nI’ll create a GettingStarted project, and then a new class called HelloWorld\nOpt to create a public main method\nSystem.out.println(\"Hello World!\");"
  },
  {
    "objectID": "slides-01-02.html#typing",
    "href": "slides-01-02.html#typing",
    "title": "Intro to Java",
    "section": "Typing",
    "text": "Typing\n\nPython does dynamic typing\n\n\nword = \"car\"\nnumber = 3\nnew_list = []\nnames = [\"Pedro\", \"Melissa\", \"Jessica\"]\n\n\nStatic typing in Java\n\nString word = \"car\";\nint number = 3;\nList&lt;Integer&gt; newList = new List&lt;&gt;();\nList&lt;String&gt; names = new List&lt;&gt;();"
  },
  {
    "objectID": "slides-01-02.html#try-it-out",
    "href": "slides-01-02.html#try-it-out",
    "title": "Intro to Java",
    "section": "Try it out",
    "text": "Try it out\nModify your main method in your HelloWorld class to assign the string literal \"Hello World!\" to a String variable name, and then print out that variable instead.\nQuestions:\n\nCan you use both double and single strings to create the variable?\nDoes concatenation with the + operator work?\nCan we concatenate String, char and int (or a combination of these)?"
  },
  {
    "objectID": "slides-01-02.html#try-it-out-solution",
    "href": "slides-01-02.html#try-it-out-solution",
    "title": "Intro to Java",
    "section": "Try it out – solution",
    "text": "Try it out – solution\npublic class HelloWorld {\n\n    public static void main(String[] args) {\n        // TODO Auto-generated method stub\n        String message = \"Hello World!\";\n        char space = ' ';\n        int number = 210;\n        System.out.println(message + space + number);\n\n    }\n\n}"
  },
  {
    "objectID": "slides-01-02.html#variable-assignment",
    "href": "slides-01-02.html#variable-assignment",
    "title": "Intro to Java",
    "section": "Variable assignment",
    "text": "Variable assignment\n\nTo declare and give initial values to variables use =, which means becomes or take on the value of (assignment)\n\nint credits = 4;\ndouble grade = 3.67;\nString name = \"Chris\";\nint hours = 10;\nboolean ready = hours &gt;= 8;\nQuestion:\n\nCan you change the type of a variable in Java?\nWhy are certain types all lower-cased, while others are title cased?"
  },
  {
    "objectID": "slides-01-02.html#types",
    "href": "slides-01-02.html#types",
    "title": "Intro to Java",
    "section": "Types",
    "text": "Types\nAll primitive types in Java and lower-cased.\nA primitive cannot have a method attached to it and connat be subclasses (there is no Object)\nJava types that start with a upper case are Objects."
  },
  {
    "objectID": "slides-01-02.html#comments",
    "href": "slides-01-02.html#comments",
    "title": "Intro to Java",
    "section": "Comments",
    "text": "Comments\n\nJava requires a lot of code to express a simple concept.\nYou need to be much more explicit when writing Java than Python (more words to type in Java)\nComments are extra important\n\n// one line comment\n\n/*\n  multi-line\n  comment\n */\n    \n/**\n * JavaDoc comments for external documentation\n * @returns description of what returns   \n */"
  },
  {
    "objectID": "slides-01-02.html#javadoc-comments",
    "href": "slides-01-02.html#javadoc-comments",
    "title": "Intro to Java",
    "section": "JavaDoc Comments",
    "text": "JavaDoc Comments\nJavaDoc comments may be placed above any class or method\nTwo sections:\n\ndescription\nstandalone block tags (marked with @)"
  },
  {
    "objectID": "slides-01-02.html#practice",
    "href": "slides-01-02.html#practice",
    "title": "Intro to Java",
    "section": "Practice",
    "text": "Practice\nCreate a Java application that determines if an integer is odd or even"
  },
  {
    "objectID": "slides-01-02.html#solution-1",
    "href": "slides-01-02.html#solution-1",
    "title": "Intro to Java",
    "section": "Solution 1",
    "text": "Solution 1\npublic class OddsOrEvens {\n\n    public static void main(String[] args) {\n        int number;\n        number = 3;\n        boolean result = number % 2 == 0;\n        System.out.println(result);\n\n    }\n\n}"
  },
  {
    "objectID": "slides-01-02.html#solution-2",
    "href": "slides-01-02.html#solution-2",
    "title": "Intro to Java",
    "section": "Solution 2",
    "text": "Solution 2\npublic class OddsOrEvens {\n    \n    public static boolean isOdd(int number) {\n        return number % 2 == 1;\n    }\n    \n    public static boolean isEven(int number) {\n        return number % 2 == 0;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(isOdd(3));\n        System.out.println(isEven(3));\n\n    }\n\n}"
  },
  {
    "objectID": "slides-01-02.html#solution-3",
    "href": "slides-01-02.html#solution-3",
    "title": "Intro to Java",
    "section": "Solution 3",
    "text": "Solution 3\npublic class OddsOrEvens {\n    \n    public static boolean isOdd(int number) {\n        // if integer is not divisible by 2, it's odd\n          return number % 2 == 1;\n    }\n    \n    public static void main(String[] args) {\n          int number;\n          number = 6;\n          if (isOdd(number)) {\n            System.out.println(number + \" is odd.\");\n          } else {\n            System.out.println(number + \" is even.\");\n          }\n\n    }\n\n}"
  },
  {
    "objectID": "slides-01-02.html#gradescope-attendance",
    "href": "slides-01-02.html#gradescope-attendance",
    "title": "Intro to Java",
    "section": "Gradescope Attendance",
    "text": "Gradescope Attendance\nSubmit a java class called OddEven to Gradescope that contains two public methods:\n\nisOdd(int number) takes an integer as argument and returns a boolean\nisEven(int number) takes an integer as argument and returns a boolean\n\nAdd package com.gradescope.oddeven; to the top of your .java file\nMake sure you are spelling things correctly: to help you with that I created a checklist"
  },
  {
    "objectID": "slides-01-02.html#scanner",
    "href": "slides-01-02.html#scanner",
    "title": "Intro to Java",
    "section": "Scanner",
    "text": "Scanner\nLet’s import the Scanner package from Java utils and use it to get user input.\nimport java.util.Scanner;\nHere’s the call:\nScanner keyboardScanner = new Scanner(System.in);\nint number = keyboardScanner.nextInt();\n\nAdd these to your solution.\nRemember to tell the user what to enter.\nWhat’s the difference between .println() and print()?"
  },
  {
    "objectID": "slides-01-02.html#solution",
    "href": "slides-01-02.html#solution",
    "title": "Intro to Java",
    "section": "Solution",
    "text": "Solution\nimport java.util.Scanner;\n\n/**\n * File: OddsOrEvens.java\n * Author: Adriana Picoral\n * Description: Asks for user to input an integer, and prints out\n * whether that number is odd or even\n */\npublic class OddsOrEvens {\n    \n    /**\n     * Description: Determines if an integer is odd\n     * @param number (integer)\n     * @return boolean (true if param is odd, false otherwise)\n     */\n    public static boolean isOdd(int number) {\n        return number % 2 == 1;\n    }\n    \n\n    public static void main(String[] args) {\n          Scanner userInput = new Scanner(System.in);\n          \n          // prints out message to user\n          System.out.println(\"Enter an integer: \");\n          \n          // get integer from keyboard entry\n          int number = userInput.nextInt();\n          userInput.close();\n\n          // calls isOdd to determine if number is odd or even\n          if (isOdd(number)) {\n            System.out.println(number + \" is odd.\");\n          } else {\n            System.out.println(number + \" is even.\");\n          }\n\n    }\n\n}"
  },
  {
    "objectID": "slides-01-02.html#practice-1",
    "href": "slides-01-02.html#practice-1",
    "title": "Intro to Java",
    "section": "Practice",
    "text": "Practice\nWrite an application (HoursMinutesSeconds.java) that prompts the user to enter an integer representing number os seconds.\nYour application should print the equivalent hours, minutes, and seconds in this format: hours:minutes:seconds\nRun examples:\nEnter the number of seconds: 3661\n1:1:1\n\nEnter number of seconds: 8274\n2:17:54\n\nHINTS: There are 3600 seconds in one hour. Use modulus to calculate minutes and seconds left.\nadapted from Rick Mercer’s slides"
  },
  {
    "objectID": "slides-01-02.html#solution-4",
    "href": "slides-01-02.html#solution-4",
    "title": "Intro to Java",
    "section": "Solution",
    "text": "Solution\nimport java.util.Scanner;\n\n/**\n * File: HoursMinutesSeconds.java\n * Author: Adriana Picoral\n * Description: Prompts the user to enter an integer representing seconds\n * and prints out time in h:m:s format\n */\npublic class HoursMinutesSeconds {\n    \n    /**\n     * Calculates number of full hours in many seconds\n     * @param seconds (integer)\n     * @return an integer representing number of hours\n     */\n    public static int getHours(int seconds) {\n        return seconds / 3600;\n    }\n    \n    /**\n     * Calculates number of full minutes left in many seconds\n     * not considering the number of full hours\n     * @param seconds (integer)\n     * @return an integer representing number of minutes\n     */\n    \n    public static int getMinutes(int seconds) {\n        return seconds  % 3600 / 60;\n    }\n    \n    /**\n     * Calculates seconds left that are not in full minutes\n     * @param seconds (integer)\n     * @return an integer representing seconds\n     */\n    public static int getSeconds(int seconds) {\n        return seconds % 60;\n    }\n\n    public static void main(String[] args) {\n        Scanner userInput = new Scanner(System.in);\n          \n        // prints out message to user\n        System.out.print(\"Enter number of seconds: \");\n      \n        // get integer from keyboard entry\n        int seconds = userInput.nextInt();\n        userInput.close();\n        \n        // build up the message to print\n        String message;\n        message = getHours(seconds) + \":\" + getMinutes(seconds);\n        message += \":\" + getSeconds(seconds);\n        System.out.println(message);\n\n    }\n\n}"
  },
  {
    "objectID": "slides-01-02.html#submit-solution-to-gradescope",
    "href": "slides-01-02.html#submit-solution-to-gradescope",
    "title": "Intro to Java",
    "section": "Submit solution to gradescope",
    "text": "Submit solution to gradescope\nSubmit your HoursMinutesSeconds.java file to the Programming Problem 01 on gradescope\nRemember to add the package info at the top of your file:\npackage com.gradescope.hms;\nOutput needs to match exactly what is expected.\nThe message to the user (for input) should be \"Enter number of seconds: \" exactly (with the space after : and no line break)"
  },
  {
    "objectID": "slides-01-02.html#expand",
    "href": "slides-01-02.html#expand",
    "title": "Intro to Java",
    "section": "Expand",
    "text": "Expand\nImprove your code so that it prints out HH:MM:SS format\nEnter number of seconds: 8274\n02:17:54\n\nEnter number of seconds: 233\n00:03:53"
  },
  {
    "objectID": "slides-01-02.html#solution-5",
    "href": "slides-01-02.html#solution-5",
    "title": "Intro to Java",
    "section": "Solution",
    "text": "Solution\nimport java.util.Scanner;\n\n/**\n * File: HoursMinutesSeconds.java\n * Author: Adriana Picoral\n * Description: Prompts the user to enter an integer representing seconds\n * and prints out time in h:m:s format\n */\npublic class HoursMinutesSeconds {\n    \n    /**\n     * Calculates number of full hours in many seconds\n     * @param seconds (integer)\n     * @return a string representing number of hours\n     */\n    public static String getHours(int seconds) {\n        int hours = seconds / 3600;\n        String fullHour = \"\" + hours;\n        \n        if (hours &lt; 10) {\n            fullHour = \"0\" + hours;\n        }\n        \n        return fullHour;\n    }\n    \n    /**\n     * Calculates number of full minutes left in many seconds\n     * not considering the number of full hours\n     * @param seconds (integer)\n     * @return a string representing number of minutes\n     */\n    \n    public static String getMinutes(int seconds) {\n        int minutes = seconds  % 3600 / 60;\n        String fullMinutes = \"\" + minutes;\n        \n        if (minutes &lt; 10) {\n            fullMinutes = \"0\" + minutes;\n        }\n        \n        return fullMinutes;\n    }\n    \n    /**\n     * Calculates seconds left that are not in full minutes\n     * @param seconds (integer)\n     * @return an integer representing seconds\n     */\n    public static String getSeconds(int seconds) {\n        int secondsLeft = seconds % 60;\n        String fullSeconds = \"\" + secondsLeft;\n        \n        if (secondsLeft &lt; 10) fullSeconds = \"0\" + secondsLeft; \n        \n        return fullSeconds;\n    }\n\n    public static void main(String[] args) {\n        Scanner userInput = new Scanner(System.in);\n          \n        // prints out message to user\n        System.out.print(\"Enter number of seconds: \");\n      \n        // get integer from keyboard entry\n        int seconds = userInput.nextInt();\n        userInput.close();\n        \n        // build up the message to print\n        String message;\n        message = getHours(seconds) + \":\" + getMinutes(seconds);\n        message += \":\" + getSeconds(seconds);\n        \n        System.out.println(message);\n\n    }\n\n}"
  },
  {
    "objectID": "slides-01-02.html#java-operators",
    "href": "slides-01-02.html#java-operators",
    "title": "Intro to Java",
    "section": "Java operators",
    "text": "Java operators\nThree boolean operators:\n\n! not\n|| or\n&& and\n\nThe other operators are the same as Python:\n\n* multiplication, / division, % modulus\n+ addition/concatenation, - subtraction\n&lt; less, &gt; greater,&lt;= less or equal, &gt;= greater or equal, == equal, != not equal"
  },
  {
    "objectID": "slides-01-02.html#practice-2",
    "href": "slides-01-02.html#practice-2",
    "title": "Intro to Java",
    "section": "Practice",
    "text": "Practice\nWrite a Java application to check if a year is leap or regular\nLeap years are those that are either:\n\ndivisible by 4 and not 100\ndivisible by 400\n\nSubmit a class called LeapYear to gradescope with the following public static method:\n\nisLeap(int year) returns either \"Leap Year\" or \"Regular Year\""
  },
  {
    "objectID": "slides-01-02.html#package",
    "href": "slides-01-02.html#package",
    "title": "Intro to Java",
    "section": "Package",
    "text": "Package\npackage com.gradescope.leapyear;"
  },
  {
    "objectID": "slides-01-02.html#solution-1-1",
    "href": "slides-01-02.html#solution-1-1",
    "title": "Intro to Java",
    "section": "Solution 1",
    "text": "Solution 1\nimport java.util.Scanner;\n\npublic class LeapYear {\n    \n    public static String isLeap(int year) {\n        if ((year % 100 != 0) && (year % 4 == 0)) return \"Leap Year\";\n        else if ((year % 400 == 0)) return \"Leap Year\";\n        else return \"Regular Year\";\n\n    }\n\n    public static void main(String[] args) {\n        Scanner userInput = new Scanner(System.in);\n        \n        // prints out message to user\n        System.out.print(\"Enter a year: \");\n      \n        // get integer from keyboard entry\n        int year = userInput.nextInt();\n        userInput.close();\n        \n        System.out.println(isLeap(year));\n    }\n}"
  },
  {
    "objectID": "slides-01-02.html#solution-2-1",
    "href": "slides-01-02.html#solution-2-1",
    "title": "Intro to Java",
    "section": "Solution 2",
    "text": "Solution 2\nimport java.util.Scanner;\n\npublic class LeapYear {\n    \n    public static String isLeap(int year) {\n        boolean isLeapYear;\n        \n        isLeapYear = ((year % 100 != 0) && (year % 4 == 0));\n        isLeapYear = isLeapYear || ((year % 400 == 0));\n        \n        if (isLeapYear) return \"Leap Year\";\n        else return \"Regular Year\";\n\n    }\n\n    public static void main(String[] args) {\n        Scanner userInput = new Scanner(System.in);\n        \n        // prints out message to user\n        System.out.print(\"Enter a year: \");\n      \n        // get integer from keyboard entry\n        int year = userInput.nextInt();\n        userInput.close();\n        \n        System.out.println(isLeap(year));\n\n    }\n}"
  },
  {
    "objectID": "slides-01-03.html#classes",
    "href": "slides-01-03.html#classes",
    "title": "Java Objects",
    "section": "Classes",
    "text": "Classes\nWhat is a class?"
  },
  {
    "objectID": "slides-01-03.html#classes-1",
    "href": "slides-01-03.html#classes-1",
    "title": "Java Objects",
    "section": "Classes",
    "text": "Classes\n\nCollection of methods and attributes (information/values)\nTemplate, blueprint of cookie cutter to construct many objects\n\nModularity: Classes allow us to split the problem to be solved into distinct tasks"
  },
  {
    "objectID": "slides-01-03.html#scanner",
    "href": "slides-01-03.html#scanner",
    "title": "Java Objects",
    "section": "Scanner",
    "text": "Scanner\nThe Scanner class (from java.util) is used to get different types of input\nWe use System.in to read keyboard input:\n    Scanner myObj = new Scanner(System.in);  // Scanner object\n    String userInput = myObj.nextLine();  // method to read user input\n    System.out.println(userInput); \nFor files, we need the File class (from java.io)\n    File myFile = new File(\"myTextFile.txt\");\n    Scanner myReader = new Scanner(myFile);\nHowever, we need to deal with FileNotFoundException"
  },
  {
    "objectID": "slides-01-03.html#scanner-1",
    "href": "slides-01-03.html#scanner-1",
    "title": "Java Objects",
    "section": "Scanner",
    "text": "Scanner\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.util.Scanner;\n\npublic class FileReadExample {\n\n    public static void main(String[] args) throws FileNotFoundException {\n        File myFile = new File(\"myTextFile.txt\");\n        Scanner myReader = new Scanner(myFile);\n    }\n\n}"
  },
  {
    "objectID": "slides-01-03.html#scanner-2",
    "href": "slides-01-03.html#scanner-2",
    "title": "Java Objects",
    "section": "Scanner",
    "text": "Scanner\nWe use the same Scanner method .nextLine()\nString line = myReader.nextLine();\nTask:\n\nRead a line in the file and and print it out\nRead all lines in a file and print each one out"
  },
  {
    "objectID": "slides-01-03.html#read-file-line-solution-1",
    "href": "slides-01-03.html#read-file-line-solution-1",
    "title": "Java Objects",
    "section": "Read file line – solution 1",
    "text": "Read file line – solution 1\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.util.Scanner;\n\npublic class FileReadExample {\n\n    public static void main(String[] args) throws FileNotFoundException {\n        File myFile = new File(\"myTextFile.txt\");\n        Scanner myReader = new Scanner(myFile);\n        \n        String line1 = myReader.nextLine();\n        System.out.println(line1);\n        \n        String line2 = myReader.nextLine();\n        System.out.println(line2);\n        \n        myReader.close();\n    }\n\n}"
  },
  {
    "objectID": "slides-01-03.html#read-file-line-solution-2",
    "href": "slides-01-03.html#read-file-line-solution-2",
    "title": "Java Objects",
    "section": "Read file line – solution 2",
    "text": "Read file line – solution 2\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.util.Scanner;\n\npublic class FileReadExample {\n\n    public static void main(String[] args) throws FileNotFoundException {\n        File myFile = new File(\"myTextFile.txt\");\n        Scanner myReader = new Scanner(myFile);\n        \n        System.out.println(myReader.nextLine());\n        System.out.println(myReader.nextLine());\n        \n        myReader.close();\n    }\n\n}"
  },
  {
    "objectID": "slides-01-03.html#while-loop",
    "href": "slides-01-03.html#while-loop",
    "title": "Java Objects",
    "section": "While loop",
    "text": "While loop\nWhat if we didn’t know how many lines there were in the file?\nThe method .hasNextLine() returns a boolean\nModify the previous solution to generalize it to any number of lines"
  },
  {
    "objectID": "slides-01-03.html#while-loop-solution",
    "href": "slides-01-03.html#while-loop-solution",
    "title": "Java Objects",
    "section": "While loop – solution",
    "text": "While loop – solution\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.util.Scanner;\n\npublic class FileReadExample {\n\n    public static void main(String[] args) throws FileNotFoundException {\n        File myFile = new File(\"myTextFile.txt\");\n        Scanner myReader = new Scanner(myFile);\n        \n        while (myReader.hasNextLine()) {\n            System.out.println(myReader.nextLine());\n        }\n        myReader.close();\n    }\n\n}"
  },
  {
    "objectID": "slides-01-03.html#string",
    "href": "slides-01-03.html#string",
    "title": "Java Objects",
    "section": "String",
    "text": "String\nString is a class (title capitalization)\nWe can construct strings two ways:\nString str = new String(\"with new\");\nString str2 = \"Don't need new\"\nSome string methods:\n.equals(String otherString)\n.length() // len() function in python\n.charAt(int index) // [] indexing in python\n.substring(int beginIndex, int endIndex) // [:] indexing in python\n.indexOf(String str) // .find() method in python\nTry these methods out"
  },
  {
    "objectID": "slides-01-03.html#string-methods-solution",
    "href": "slides-01-03.html#string-methods-solution",
    "title": "Java Objects",
    "section": "String methods – solution",
    "text": "String methods – solution\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.util.Scanner;\n\npublic class FileReadExample {\n\n    public static void main(String[] args) throws FileNotFoundException {\n        File myFile = new File(\"myTextFile.txt\");\n        Scanner myReader = new Scanner(myFile);\n        \n        while (myReader.hasNextLine()) {\n            String line = myReader.nextLine();\n            System.out.println(line.length());\n            System.out.println(line.charAt(0));\n            if (line.length() &gt; 0) System.out.println(line.substring(0, 2));\n            System.out.println(line.indexOf(\"line\"));\n            \n        }\n        myReader.close();\n    }\n\n}"
  },
  {
    "objectID": "slides-01-03.html#java-type-casting",
    "href": "slides-01-03.html#java-type-casting",
    "title": "Java Objects",
    "section": "Java type casting",
    "text": "Java type casting\nBoth Double and Integer classes have methods to cast a string into a double or int\nDouble.valueOf(\"10\");\nInteger.valueOf(\"10\");"
  },
  {
    "objectID": "slides-04-01.html#static-methods",
    "href": "slides-04-01.html#static-methods",
    "title": "Classes and Methods",
    "section": "static methods",
    "text": "static methods\nThe Java construct for implementing functions is known as the static method."
  },
  {
    "objectID": "slides-04-01.html#methods",
    "href": "slides-04-01.html#methods",
    "title": "Classes and Methods",
    "section": "Methods",
    "text": "Methods\n\nMultiple arguments – methods can take on more than one argument, and therefore can have more than one parameter variable\nOverloading – methods whose signatures differ are different methods. Using the same name for two methods whose signatures differ is known as overloading.\nSingle return value – A Java method provides only one return value to the caller, of the type declared in the method signature"
  },
  {
    "objectID": "slides-04-01.html#methods-1",
    "href": "slides-04-01.html#methods-1",
    "title": "Classes and Methods",
    "section": "Methods",
    "text": "Methods\n\nScope – The scope of a variable is the part of the program that can refer to that variable by name. The scope of a variable declared in a method is limited to that method’s body. You cannot refer to a variable in one method that is declared in another.\n\nSource: Programming in Java, Sedgewick & Wayne (2024)"
  },
  {
    "objectID": "slides-04-01.html#constructors",
    "href": "slides-04-01.html#constructors",
    "title": "Classes and Methods",
    "section": "Constructors",
    "text": "Constructors\nSame name as the class, no return type"
  },
  {
    "objectID": "slides-04-01.html#public-vs.-private",
    "href": "slides-04-01.html#public-vs.-private",
    "title": "Classes and Methods",
    "section": "Public vs. Private",
    "text": "Public vs. Private\npublic – accessible from all methods of the class and in the scope of where the object is declared\nprivate – known only in the class"
  },
  {
    "objectID": "slides-04-01.html#recommendations-for-writing-classes",
    "href": "slides-04-01.html#recommendations-for-writing-classes",
    "title": "Classes and Methods",
    "section": "Recommendations for writing classes",
    "text": "Recommendations for writing classes\n\nuse one file to store the class (no main method)\ncreate different classes for different problems (cohesion – methods and instance variables of a class should be strongly related) – in other words, keep related data and behavior in one place"
  },
  {
    "objectID": "slides-04-01.html#recommendations-for-writing-classes-1",
    "href": "slides-04-01.html#recommendations-for-writing-classes-1",
    "title": "Classes and Methods",
    "section": "Recommendations for writing classes",
    "text": "Recommendations for writing classes\nDeclare:\n\ninstance variables private after class definition and create public methods to set and access variables\nconstructors public no return type (do not use static)\nmost methods public (do not use static), but private helper methods are often useful"
  },
  {
    "objectID": "slides-04-01.html#example",
    "href": "slides-04-01.html#example",
    "title": "Classes and Methods",
    "section": "Example",
    "text": "Example\npublic class IdentifyMyParts {\n    public int x = 7; \n    public int y = 3; \n}\n\nWhat are the instance variables?\nHow do you construct a new instance of this class?\n\nExercise from The Java™ Tutorials"
  },
  {
    "objectID": "slides-04-01.html#example-1",
    "href": "slides-04-01.html#example-1",
    "title": "Classes and Methods",
    "section": "Example",
    "text": "Example\npublic class IdentifyMyParts {\n    public int x = 7; \n    public int y = 3; \n}\nWhat is the output from the following code:\nIdentifyMyParts a = new IdentifyMyParts();\nIdentifyMyParts b = new IdentifyMyParts();\na.y = 5;\nb.y = 6;\na.x = 1;\nb.x = 2;\nSystem.out.println(\"a.y = \" + a.y);\nSystem.out.println(\"b.y = \" + b.y);\nSystem.out.println(\"a.x = \" + a.x);\nSystem.out.println(\"b.x = \" + b.x);\nSystem.out.println(\"IdentifyMyParts.x = \" + IdentifyMyParts.x);\nAdd static after public for one of the instance variable (to make it a class variable). What is the side effect?"
  },
  {
    "objectID": "slides-04-01.html#better-example",
    "href": "slides-04-01.html#better-example",
    "title": "Classes and Methods",
    "section": "Better example",
    "text": "Better example\npublic class IdentifyMyParts {\n    private int x = 7;\n    private int y = 3;\n    \n    public void setX(int x) {\n        this.x = x;\n    }\n\n    public void setY(int y) {\n        this.y = y;\n    }\n    \n    public int getX() {\n        return x;\n    }\n    \n    public int getY() {\n        return y;\n    }\n\n}\nVariable scope: what’s the difference between this.x and x?"
  },
  {
    "objectID": "slides-04-01.html#better-example-use",
    "href": "slides-04-01.html#better-example-use",
    "title": "Classes and Methods",
    "section": "Better example – use",
    "text": "Better example – use\npublic class UseMyParts {\n\n    public static void main(String[] args) {\n        IdentifyMyParts a = new IdentifyMyParts(); \n        IdentifyMyParts b = new IdentifyMyParts(); \n        a.setX(5);\n        a.setY(10);\n        b.setX(2);\n        b.setY(3);\n    \n        System.out.println(a.getY()); \n        System.out.println(b.getY()); \n        System.out.println(a.getX()); \n        System.out.println(b.getX()); \n\n    }\n}"
  },
  {
    "objectID": "slides-04-01.html#adding-a-constructor-method",
    "href": "slides-04-01.html#adding-a-constructor-method",
    "title": "Classes and Methods",
    "section": "Adding a constructor method",
    "text": "Adding a constructor method\npublic class IdentifyMyParts {\n    private int x = 7;\n    private int y = 3;\n    \n    public IdentifyMyParts(int x, int y) {\n        this.x = x;\n        this.y = y;\n        \n    }\n    \n    public void setX(int x) {\n        this.x = x;\n    }\n\n    public void setY(int y) {\n        this.y = y;\n    }\n    \n    public int getX() {\n        return x;\n    }\n    \n    public int getY() {\n        return y;\n    }\n\n}"
  },
  {
    "objectID": "slides-04-01.html#practice-card-class",
    "href": "slides-04-01.html#practice-card-class",
    "title": "Classes and Methods",
    "section": "Practice – Card class",
    "text": "Practice – Card class\nA card has a suit and a rank\nSuits The four suits are clubs (♣), diamonds (♦), hearts (♥), and spades (♠).\nRanks The ranks are ace, 2, 3, 4, 5, 6, 7, 8, 9, 10, jack, queen, and king. The ace is the highest card, and the 2 is the lowest, but the ace can also be used as a low card with a value of 1."
  },
  {
    "objectID": "slides-04-01.html#card-class-solution",
    "href": "slides-04-01.html#card-class-solution",
    "title": "Classes and Methods",
    "section": "Card class solution",
    "text": "Card class solution\npublic class Card {\n    private String rank;\n    private String suit;\n    \n    public Card(String rank, String suit) {\n        this.rank = rank;\n        this.suit = suit;\n    }\n    \n    public String getSuit() {\n        return suit;\n    }\n    \n    public String getRank() {\n        return rank;\n    }\n\n}"
  },
  {
    "objectID": "slides-04-01.html#write-main",
    "href": "slides-04-01.html#write-main",
    "title": "Classes and Methods",
    "section": "Write main",
    "text": "Write main\nCreate a PlayGame class with a main method to create an instance of a card and to print it.\nWhat changes to Card class would you make?"
  },
  {
    "objectID": "slides-04-01.html#solution",
    "href": "slides-04-01.html#solution",
    "title": "Classes and Methods",
    "section": "Solution",
    "text": "Solution\npublic class PlayGame {\n\n    public static void main(String[] args) {\n        Card card1 = new Card(\"ace\", \"hearts\");\n        card1.print();\n    }\n\n}\nAnd add a method to Card:\npublic void print() {\n        System.out.println(rank + \" of \" + suit);\n    }"
  },
  {
    "objectID": "slides-04-01.html#update-card-class-demonstration",
    "href": "slides-04-01.html#update-card-class-demonstration",
    "title": "Classes and Methods",
    "section": "Update Card class (demonstration)",
    "text": "Update Card class (demonstration)\n\nvalidate suit and rank – make sure the object is created with valid strings only\ncreate constants for arrays of strings for both suits and ranks\ncreate helper methods (private) for validation\ntwo ways of setting rank: integer and string (overloading)"
  },
  {
    "objectID": "slides-04-01.html#update-card-class-solution",
    "href": "slides-04-01.html#update-card-class-solution",
    "title": "Classes and Methods",
    "section": "Update Card class – solution",
    "text": "Update Card class – solution\npublic class Card {\n    private String rank;\n    private String suit;\n    \n    private final static String[] RANKS = {\"ace\", \"two\", \"three\", \"four\",\n                                           \"five\", \"six\", \"seven\",\n                                           \"eight\", \"nine\", \"ten\",\n                                           \"jack\", \"queen\", \"king\"};\n\n    \n    public final static String[] SUITS = {\"diamonds\", \"clubs\", \"hearts\", \"spades\"};\n    \n    public Card(String rank, String suit) {\n        if (validRank(rank)) this.rank = rank;\n        if (validSuit(suit)) this.suit = suit;\n    }\n    \n    public Card(int rank, String suit) {\n        if (rank &gt;= 1 && rank &lt;= 13) this.rank = RANKS[rank-1];\n        if (validSuit(suit)) this.suit = suit;\n    }\n\n    private Boolean inArray(String value, String[] arr) {\n        for (String element : arr) {\n            if (element.equals(value)) return true;\n        }\n        return false;\n    }\n    \n    private Boolean validRank(String rank) {\n        return inArray(rank, RANKS);\n    }\n    \n    private Boolean validSuit(String suit) {\n        return inArray(suit, SUITS);\n    }\n    \n    \n    public void setRank(String rank) {\n        if (validRank(rank)) this.rank = rank;\n    }\n    \n    public void setRank(int rank) { // overloading\n        if (rank &gt;= 1 && rank &lt;= 13) this.rank = RANKS[rank-1];\n    }\n    \n    public void setSuit(String suit) {\n        if (validSuit(suit)) this.suit = suit;\n    }\n    \n    public String getSuit() {\n        return suit;\n    }\n    \n    public String getRank() {\n        return rank;\n    }\n    \n    public void print() {\n        System.out.println(rank + \" of \" + suit);\n    }\n\n}"
  },
  {
    "objectID": "slides-04-01.html#update-playgame-class",
    "href": "slides-04-01.html#update-playgame-class",
    "title": "Classes and Methods",
    "section": "Update PlayGame class",
    "text": "Update PlayGame class\npublic class PlayGame {\n\n    public static void main(String[] args) {\n        Card card1 = new Card(\"ace\", \"hearts\");\n        card1.print();\n        \n        card1.setRank(2);\n        card1.print();\n        \n        Card card2 = new Card(13, \"diamonds\");\n        card2.print();\n\n    }\n\n}"
  },
  {
    "objectID": "slides-04-01.html#create-deck-class",
    "href": "slides-04-01.html#create-deck-class",
    "title": "Classes and Methods",
    "section": "Create Deck class",
    "text": "Create Deck class\nCreate a Deck class that has a color, and all 52 possible cards (use ArrayList)"
  },
  {
    "objectID": "slides-04-01.html#deck-class-solution",
    "href": "slides-04-01.html#deck-class-solution",
    "title": "Classes and Methods",
    "section": "Deck class solution",
    "text": "Deck class solution\nimport java.util.ArrayList;\n\npublic class Deck {\n    private ArrayList&lt;Card&gt; cards = new ArrayList&lt;Card&gt;();\n    private String color;\n    \n    public Deck(String color) {\n        this.color = color;\n        for (String s : Card.SUITS) {\n            for (int i = 1; i &lt;= 13; i++) {\n                Card thisCard = new Card(i, s);\n                cards.add(thisCard);\n            }\n            \n        }\n    }\n    \n    public void printCards() {\n        for (String s : Card.SUITS) {\n            for (int i = 1; i &lt;= 13; i++) {\n                Card thisCard = new Card(i, s);\n                thisCard.print();\n            }\n            \n        }\n    }\n    \n    public Card getCard(int index) {\n        return cards.get(index);\n    }\n    \n    public String getColor() {\n        return color;\n    }\n\n}"
  },
  {
    "objectID": "slides-04-01.html#updated-playgame",
    "href": "slides-04-01.html#updated-playgame",
    "title": "Classes and Methods",
    "section": "Updated PlayGame",
    "text": "Updated PlayGame\npublic class PlayGame {\n\n    public static void main(String[] args) {\n        Card card1 = new Card(\"ace\", \"hearts\");\n        card1.print();\n        \n        card1.setRank(2);\n        card1.print();\n        \n        Card card2 = new Card(13, \"diamonds\");\n        card2.print();\n        \n        Deck myDeck = new Deck(\"Red\");\n        myDeck.printCards();\n        \n        myDeck.getCard(20).print();\n\n    }\n\n}"
  },
  {
    "objectID": "start.html",
    "href": "start.html",
    "title": "Getting Started",
    "section": "",
    "text": "For our IDE (Integrated Development Environment), we will be using Eclipse.\n\nDownload Eclipse IDE for Java Developers\nOpen Eclipse and choose a working environment folder (you can just choose the default, or change it to another folder of your preference) – click on Launch\n\n\n\n\nchoose working folder\n\n\n\nCreate a new Java project – Uncheck the Create module-info.java file option and click on Finish\n\n\n\n\nchoose File &gt; New &gt; Java Project\n\n\n\n\n\nunselect option for module-info.java and click finish\n\n\n\nWith your new Java project selected, create a new Java class – choose a name for your class, and select the public static void main(String[] args) option (we will be doing different things in the future, but for now, we will have a main method in our class) and click on Finish\n\n\n\n\nchoose New &gt; Class\n\n\n\n\n\nselect option to create main and click Finish\n\n\n\nTry typing System.out.println(\"Hello, World!\"); inside the main() method and click Run"
  },
  {
    "objectID": "programming-assignment-03.html",
    "href": "programming-assignment-03.html",
    "title": "Programming Assignment 03",
    "section": "",
    "text": "Deadline: September 27, 2024 – Friday, 11:30pm"
  },
  {
    "objectID": "programming-assignment-03.html#learning-objectives",
    "href": "programming-assignment-03.html#learning-objectives",
    "title": "Programming Assignment 03",
    "section": "Learning Objectives",
    "text": "Learning Objectives\nThe goal of this assignment is to practice the following decomposition, algorithm pattern, and data structure approaches.\n\nAlgorithmic pattern: recursive backtracking\nDecomposition approach: multiple methods\nData structure: arrays and collections"
  },
  {
    "objectID": "programming-assignment-03.html#anagrams",
    "href": "programming-assignment-03.html#anagrams",
    "title": "Programming Assignment 03",
    "section": "Anagrams",
    "text": "Anagrams\nAn anagram is a word or phrase made by rearranging the letters of another word or phrase. For example, the words “midterm” and “trimmed” are anagrams. If you ignore spaces and capitalization and allow multiple words, a multi-word phrase can be an anagram of some other word or phrase. For example, the phrases “Clint Eastwood” and “old west action” are anagrams.\nIn this assignment, you will create a program called Anagrams.java that uses a word list to find all anagram phrases that match a given word or phrase. To use the program, command line options will be provided to indicate a word list file, phrase with no spaces to find anagrams of, and a limit on the number of words in the found anagrams (or 0 to indicate no limit).\nFor the example command line options:\nwords1.txt barbarabush 0\nthe output of your program should be the following:\nPhrase to scramble: barbarabush\n\nAll words found in barbarabush:\n[abash, aura, bar, barb, brush, bus, hub, rub, shrub, sub]\n\nAnagrams for barbarabush:\n[abash, bar, rub]\n[abash, rub, bar]\n[bar, abash, rub]\n[bar, rub, abash]\n[rub, abash, bar]\n[rub, bar, abash]\nHere’s an example of the command line options (file name, word to scramble, max number of anagrams):\nwords3.txt defleppard 0"
  },
  {
    "objectID": "programming-assignment-03.html#getting-started",
    "href": "programming-assignment-03.html#getting-started",
    "title": "Programming Assignment 03",
    "section": "Getting Started",
    "text": "Getting Started\nName your class Anagrams.\nSubmit your Anagrams.java file to gradescope."
  },
  {
    "objectID": "programming-assignment-03.html#implementation-details",
    "href": "programming-assignment-03.html#implementation-details",
    "title": "Programming Assignment 03",
    "section": "Implementation Details:",
    "text": "Implementation Details:\nYour program should obtain the word list file name, phrase, and max number of words in each possible anagram from the array of strings passed to main. Your program should read all of the words from the word list file and use them to generate the required anagrams. You can assume that the word list file will contain one word per line. You can also assume the command-line input will be well formed.\nYou will want to find all possible words that can be found by using subsets of letters from the provided phrase. For example, in the phrase hairbrush the following words from words1.txt can be found:\nAll words found in hairbrush:\n[bar, briar, brush, bus, hub, huh, hush, rub, shrub, sir, sub]\nYou should use recursive backtracking to find and print all anagrams that can be formed using all of the letters of the given phrase. Each phrase should include at most max words. If max=0 then all possible words should be specified. Your output should exactly match the provided examples, including order and formatting. For example, if your anagram solver is using the word list corresponding to words1.txt and a user types the phrase hairbrush, with a max of 0 your program should produce the following output:\n[bar, huh, sir]\n[bar, sir, huh]\n[briar, hush]\n[huh, bar, sir]\n[huh, sir, bar]\n[hush, briar]\n[sir, bar, huh]\n[sir, huh, bar]\nIf your anagram solver is using the word list corresponding to words1.txt and the user types the phrase hairbrush and a max of 2, your program should produce the following output:\n[briar, hush]\n[hush, briar]"
  },
  {
    "objectID": "programming-assignment-03.html#recursive-algorithm",
    "href": "programming-assignment-03.html#recursive-algorithm",
    "title": "Programming Assignment 03",
    "section": "Recursive Algorithm:",
    "text": "Recursive Algorithm:\nGenerate all anagrams of a phrase using recursive backtracking. Many backtracking algorithms involve examining all combinations of a set of choices. In this problem, the choices are the words that can be formed from the phrase. A “decision” involves choosing a word for part of the phrase and recursively choosing words for the rest of the phrase. If you find a collection of words that use up all of the letters in the phrase, it should be printed as output.\nPart of your grade will be based on efficiency. One way to implement this program would be to consider every word in the word list as a possible “choice.” However, this would lead to a massive decision tree with lots of useless paths and a slow program. Therefore for full credit, to improve efficiency when generating anagrams for a given phrase, you should first find the collection of words contained in that phrase and consider only those words as “choices” in your decision tree. You should also backtrack immediately once exceeding the max.\nThe following diagram shows a partial decision tree for generating anagrams of the phrase barbarabush.\nNotice that some paths of the recursion lead to dead ends. For example, if the recursion chooses aura and barb, the letters remaining to use are [bhs], and no choice available uses these letters, so it is not possible to generate any anagrams beginning with those two choices. In such a case, your code should backtrack and try the next path.\nOne difference between this algorithm and other backtracking algorithms is that the same word can appear more than once in an anagram. For example, from barbara bush you might extract the word bar twice.\n\n\n\nbarbarabush Decision Tree"
  },
  {
    "objectID": "programming-assignment-03.html#write-other-methods",
    "href": "programming-assignment-03.html#write-other-methods",
    "title": "Programming Assignment 03",
    "section": "Write other methods",
    "text": "Write other methods\nAn important aspect of simplifying the solution to many backtracking problems is the separation of recursive code from code that manages low-level details of the problem. We have seen this in several of our backtracking examples, such as Dice roll sum and 8 queens. You should follow a similar strategy in this assignment. The low-level details for anagrams involve keeping track of letters and figuring out when one group of letters can be formed from another.\nYour code should work with this main (do not change this when testing your code, since this is what gradescope will be expecting):\n\npublic static void main(String[] args) throws FileNotFoundException {\n        \n        String wordList = args[0];\n        String word = args[1];\n        int maxAnas = Integer.valueOf(args[2]);\n        if (maxAnas == 0) maxAnas = -1;  // set to -1 for no limit\n\n        System.out.println(\"Phrase to scramble: \" + word);\n        \n        HashSet&lt;String&gt; validWords = getWordList(wordList);\n        HashSet&lt;String&gt; solutions = new HashSet&lt;String&gt;();\n        ArrayList&lt;Character&gt; allChars = getChars(word);\n        \n        getCombinations(allChars, \"\", validWords, solutions);\n        ArrayList&lt;String&gt; orderedSolution = new ArrayList&lt;String&gt;(solutions);\n        Collections.sort(orderedSolution);\n        \n        System.out.println(\"\\nAll words found in \" + word + \":\");\n        System.out.println(orderedSolution);\n        \n        ArrayList&lt;String&gt; result = new ArrayList&lt;String&gt;();\n        System.out.println(\"\\nAnagrams for \" + word + \":\");\n        ArrayList&lt;ArrayList&lt;String&gt;&gt; allResults = new ArrayList&lt;ArrayList&lt;String&gt;&gt;();\n        getAnagrams(word.length(), orderedSolution, word, result, maxAnas, 0, allResults);\n        for (int i = 0; i &lt; allResults.size(); i++) System.out.println(allResults.get(i));\n\n\n    }"
  },
  {
    "objectID": "programming-assignment-03.html#development-strategy-and-hints",
    "href": "programming-assignment-03.html#development-strategy-and-hints",
    "title": "Programming Assignment 03",
    "section": "Development Strategy and Hints",
    "text": "Development Strategy and Hints\nYour program should produce the anagrams in the same format as in the expected output files. The easiest way to do this is to build up your answer in a list, or other ordered collection. Then you can println the collection and it will have the right format.\nSeveral different word list files are provided. We recommend initially using a very small word list words1.txt to make testing easier. But once your code works with this word list, you should test it with larger word lists such as the provided words2.txt and words3.txt.\nYou can find other larger word lists here:\nhttp://www.puzzlers.org/dokuwiki/doku.php?id=solving:wordlists:start\nOne difficult part of this program is limiting the number of words that can appear in the anagrams. We suggest you do this part last, initially printing all anagrams regardless of the number of words."
  },
  {
    "objectID": "programming-assignment-03.html#grading-criteria",
    "href": "programming-assignment-03.html#grading-criteria",
    "title": "Programming Assignment 03",
    "section": "Grading Criteria",
    "text": "Grading Criteria\nA total of 80% of this assignment grade will be correctness (80/100). For this assignment, there will be some private test cases. Any time you submit to gradescope, it will tell you how many of the 80 correctness points you have earned.\nThe other 20% (20/100) of the grade will be your decomposition and code clarity.\nDecomposition:\n\nShould just use static methods in the single Anagrams class.\nUse a single file. This should be a small program (&lt;200 lines). We do not count any of the comments in the file header toward this 200 lines.\nEach static method should be less than 30 lines. The method header won’t be included in the 30 lines.\nMake things as simple as possible.\n\nNested loops and conditionals are ok if they are following provided recursive backtracking code example templates. Make an effort to simplify conditionals as much as possible and explain them clearly in comments.\nAvoid too many levels of user-defined methods calling other user-defined methods.\n\nYour code should be decomposed well. main should be a good summary of your program and no method should be overly long or trivial. Your methods should not be chained. Do NOT have main just call one method that does everything.\nPart of your grade will come from appropriately utilizing recursive backtracking to implement your algorithm as described previously. We will grade on the elegance of your recursive algorithm; do not create special cases in your recursive code if they are not necessary or repeat cases already handled.\nRedundancy is a grading focus; some tasks are similar in behavior or based off of other tasks. You should avoid repeated logic as much as possible.\n\nCode Clarity:\n\nYOU should be able to read, understand, and explain your own code a couple days after you wrote it.\nThe file header should include instructions on how someone would use this program and what typical inputs would look like.\nUse meaningful variable names. Loop iterators can be simple (i for integers, s for strings, n for numbers, etc.). Otherwise you should avoid single letter variable names. Name Variables in camelCase.\nThe clearest code examples will be anonymously shown in class.\nThe most obfuscated code examples will be anonymously shown in class with suggestions for improvement.\n\nThe coding style in terms of spacing, etc. should be done automatically every time you save in Eclipse. As long as you stick with those defaults, the syntax style should be fine.\nWrite your own code. We will be using a tool that finds overly similar code. Do not look at other students’ code. Do not let other students look at your code or talk in detail about how to solve this programming project."
  },
  {
    "objectID": "programming-assignment-03.html#submission",
    "href": "programming-assignment-03.html#submission",
    "title": "Programming Assignment 03",
    "section": "Submission",
    "text": "Submission\nAs with PA1 and PA2, for PA3 you are required to submit your Anagrams.java solution to gradescope.\nPackage information:\npackage com.gradescope.anagrams;"
  },
  {
    "objectID": "programming-assignment-02.html",
    "href": "programming-assignment-02.html",
    "title": "Programming Assignment 02",
    "section": "",
    "text": "Deadline: September 18, 2024 – Wednesday, 11:30pm"
  },
  {
    "objectID": "programming-assignment-02.html#learning-objectives",
    "href": "programming-assignment-02.html#learning-objectives",
    "title": "Programming Assignment 02",
    "section": "Learning Objectives",
    "text": "Learning Objectives\nThe goal of this assignment is to learn how to use the dictionary abstract data type in Java.\nIn Java, a HashMap implements a dictionary. By the end of the assignment you will have practiced using the following operations on a HashMap:\n\ninsertion,\ndeletion,\nmodifying the value for a particular key,\niterating over all of the key,value pairs, and\nthe fact that HashMaps do NOT store their key,value pairs in order and how to handle it."
  },
  {
    "objectID": "programming-assignment-02.html#the-assignment",
    "href": "programming-assignment-02.html#the-assignment",
    "title": "Programming Assignment 02",
    "section": "The Assignment",
    "text": "The Assignment\nFor this project we will be using flight data that you can download from the following website: https://www.kaggle.com/open-flights/flight-route-database. When you click the Data tab and then try to download the routes.csv file, you will be asked to create a kaggle account. The easiest way to do so is to create a kaggle account with your UA email by selecting the Google option under sign up with one click.\nSimilarly to PA1, you will be taking an input file, but that will be done on the command line. However, the input will be slightly different as it is in csv format. You can read more about the input format on the kaggle description.\nThe program should have the following usage:\n    java AirportInfo infile COMMAND optional\nIn addition to the input file, the second command-line argument will be a command to run on the data from your input file. The commands consist of MAX, DEPARTURES and LIMIT.\nEach command will be most easily implemented with a HashMap. Therefore, your implementation will read in the csv file and be using one or more HashMaps.\nMAX - This function prints the airport with the maximum number of total flights. The total flights includes both arriving and departing flights for each airport. In the case of ties, keep track of all airports with the maximum number of flights and output them alphabetically, see decomposition below for help.\nDEPARTURES - The goal of this function is to print an alphabetical list of all destinations an airport flies to. Each airport with its destinations should be outputted on a separate line, see Output below.\nLIMIT - The limit function requires an additional integer argument on the command line. This integer is used as a cut off to eliminate airports that have a total number of flights less than or equal to the limit. So, this function is similar to MAX as it relies on a mapping of airports to the total number of flights. After the totals are calculated, the airports with a total number of flights less than or equal to the limit should be ignored and only the remaining airports should be output in alphabetical order. See Output below for formatting help and decomposition for help alphabetically ordering the airports.\nHint: To avoid a Concurrent Modification Exception, you cannot use remove when looping over the keys, you must use a supplementary data structure."
  },
  {
    "objectID": "programming-assignment-02.html#input-and-output",
    "href": "programming-assignment-02.html#input-and-output",
    "title": "Programming Assignment 02",
    "section": "Input and Output",
    "text": "Input and Output\nExample input (see Kaggle for entire file and more in-depth description):\nairline,airline ID, source airport, source airport id, destination apirport, destination airport id, codeshare, stops, equipment\n2B,410,AER,2965,KZN,2990,,0,CR2\n2B,410,ASF,2966,KZN,2990,,0,CR2\n2B,410,ASF,2966,MRV,2962,,0,CR2\n2B,410,CEK,2968,KZN,2990,,0,CR2\nMAX Output\nMAX FLIGHTS 3 : KZN\nDEPARTURES Output\nAER flies to KZN\nASF flies to KZN MRV\nCEK flies to KZN\nLIMIT 1 Output\nASF - 2\nKZN - 3"
  },
  {
    "objectID": "programming-assignment-02.html#getting-started",
    "href": "programming-assignment-02.html#getting-started",
    "title": "Programming Assignment 02",
    "section": "Getting Started",
    "text": "Getting Started\nThe process for getting started will be very similar to what was done for the first programming assignment.\nAdd the package information at the top of your .java file:\npackage com.gradescope.airportinfo;\nSubmit your AirportInfo.java file to gradescope."
  },
  {
    "objectID": "programming-assignment-02.html#testing-your-code",
    "href": "programming-assignment-02.html#testing-your-code",
    "title": "Programming Assignment 02",
    "section": "Testing your code",
    "text": "Testing your code\nYour methods should work with this main method:\n\npublic static void main(String[] args) throws FileNotFoundException {\n        \n        HashMap&lt;String, String&gt; destinations = getDestinations(args[0]);\n        HashMap&lt;String, Integer&gt; airportCount = getAirportCount(args[0]);\n        \n        \n        if (args[1].equals(\"MAX\")) {\n            System.out.println(getMax(airportCount));\n        }\n        \n        if (args[1].equals(\"DEPARTURES\")) {\n            System.out.println(getDepartures(destinations));\n        }\n        \n        if (args[1].equals(\"LIMIT\")) {\n            System.out.println(getLimits(Integer.valueOf(args[2]), airportCount));\n        }\n        \n    \n    }"
  },
  {
    "objectID": "programming-assignment-02.html#decomposition-ideas",
    "href": "programming-assignment-02.html#decomposition-ideas",
    "title": "Programming Assignment 02",
    "section": "Decomposition Ideas",
    "text": "Decomposition Ideas\nThe section activity provides an introduction to reading csv files and creating a hashmap for departures. Refer to this activity to get started.\nWhen selecting your keys and values consider what types you need them to be to complete the command.\nSince HashMaps are unordered, special steps must be taken for them to be outputted in an ordered format. As shown below, take the set of keys and input it into an ArrayList of type String. Then use a Collections sort to sort the keys in place. Since the keys are sorted in the existing data structure, you do not need to set the Collections.sort() call to store a returned value.\n    ArrayList&lt;String&gt; sortedKeys = new ArrayList&lt;String&gt;(APDepartures.keySet());\n    Collections.sort(sortedKeys);"
  },
  {
    "objectID": "programming-assignment-02.html#grading-criteria",
    "href": "programming-assignment-02.html#grading-criteria",
    "title": "Programming Assignment 02",
    "section": "Grading Criteria",
    "text": "Grading Criteria\nA total of 80% of this assignment grade will be correctness. For this assignment, there will be some private test cases.\nThe other 20% of your grade will be your decomposition and code clarity.\nDecomposition\n\nShould carefully select data structures that implement the required functionality. For example, if you avoid using HashMaps, it will probably result in more complicated code and thus points off.\nShould just use static methods.\nUse a single file. This should be a small program (&lt;300 lines).\nEach static method should be less than 30 lines. This INCLUDES comments. It is easier to read a function if it can all fit on one screen.\nMake things as simple as possible.\n\nAvoid nested loops.\nAvoid nesting conditionals.\nAvoid chaining, i.e., too many levels of user-defined methods calling other user-defined methods. Putting most of the functionality in another static method that returns void that main calls is an example of this.\n\n\nCode Clarity\n\nYOU should be able to read, understand, and explain your own code to someone else a couple days after you wrote it.\nThere needs to be a balance between no comments and a comment for every line in the program. Either extreme will result in points off.\nThe file header should include instructions on how someone would use this program. To use the program, one would need to know the input file format.\nUse meaningful variable names. Loop iterators can be simple (i for integers, s for strings, n for numbers, etc.).\nThe clearest code examples will be anonymously shown in class.\nThe most obfuscated code examples will be anonymously shown in class with suggestions for improvement.\n\nThe coding style in terms of spacing, etc. should be done automatically every time you save in Eclipse. As long as you stick with those defaults, the syntax style should be fine.\nWrite your own code. We will be using a tool that finds overly similar code. I recommend that when talking with others about the assignment, do not write anything down."
  },
  {
    "objectID": "slides-02-02.html#hashmap-class",
    "href": "slides-02-02.html#hashmap-class",
    "title": "HashMap",
    "section": "HashMap class",
    "text": "HashMap class\nRead the documentation for Class HashMap&lt;K,V&gt; and answer what methods do the following:\n\nadds a key value map in the HashMap\ngets a value in the map using a key\nremoves the entry for a key\nreturns the number of key-value mappings in the HashMap"
  },
  {
    "objectID": "slides-02-02.html#hashmap-class-important-methods",
    "href": "slides-02-02.html#hashmap-class-important-methods",
    "title": "HashMap",
    "section": "HashMap class – important methods",
    "text": "HashMap class – important methods\n\n.put(key, value) adds a key value map in the HashMap\n.get(key) gets a value in the map using a key\n.remove(key) removes the entry for a key\n.size() returns the number of key-value mappings in the HashMap"
  },
  {
    "objectID": "slides-02-02.html#hashmap-class-important-methods-1",
    "href": "slides-02-02.html#hashmap-class-important-methods-1",
    "title": "HashMap",
    "section": "HashMap class – important methods",
    "text": "HashMap class – important methods\nHashMap&lt;String, Integer&gt; soccerPlayers = new HashMap&lt;String, Integer&gt;();\n\nsoccerPlayers.put(\"Pelé\", 10)\nsoccerPlayers.put(\"Marta\", 10)\nsoccerPlayers.put(\"Alex Morgan\", 13)\n\nsoccerPlayers.get(\"Marta\");\n\nsoccerPlayers.remove(\"Pelé\");\n\nSystem.out.println(soccerPlayers.size());\nSystem.out.println(soccerPlayers);"
  },
  {
    "objectID": "slides-02-02.html#counting-characters",
    "href": "slides-02-02.html#counting-characters",
    "title": "HashMap",
    "section": "Counting characters",
    "text": "Counting characters\nWrite a Java application that given a string word, it creates a HashMap with single characters as keys, and the count of each character as value"
  },
  {
    "objectID": "slides-02-02.html#counting-characters-solution-1",
    "href": "slides-02-02.html#counting-characters-solution-1",
    "title": "HashMap",
    "section": "Counting characters – Solution 1",
    "text": "Counting characters – Solution 1\nimport java.util.HashMap;\n\npublic class CountCharacters {\n    \n    public static void main(String[] args) {\n        if (args.length &gt; 0) {\n            String word = args[0];\n            HashMap&lt;Character, Integer&gt; charCount = new HashMap&lt;Character, Integer&gt;();\n            \n            for (int i = 0; i &lt; word.length(); i++) {\n                Integer previousValue = charCount.get(word.charAt(i));\n                if (previousValue == null) previousValue = 0;\n                charCount.put(word.charAt(i), previousValue + 1);\n                \n            }\n            \n            System.out.println(charCount);\n            \n        }\n        \n    }\n\n}"
  },
  {
    "objectID": "slides-02-02.html#counting-characters-solution-2",
    "href": "slides-02-02.html#counting-characters-solution-2",
    "title": "HashMap",
    "section": "Counting characters – Solution 2",
    "text": "Counting characters – Solution 2\nimport java.util.HashMap;\n\npublic class CountCharacters {\n    \n    public static void main(String[] args) {\n        if (args.length &gt; 0) {\n            String word = args[0];\n            HashMap&lt;Character, Integer&gt; charCount = new HashMap&lt;Character, Integer&gt;();\n            \n            for (char c : word.toCharArray()) {\n                Integer previousValue = charCount.get(c);\n                if (previousValue == null) previousValue = 0;\n                charCount.put(c, previousValue + 1);\n                \n            }\n            \n            System.out.println(charCount);\n            \n        }\n        \n    }\n\n}"
  },
  {
    "objectID": "slides-02-02.html#counting-characters-solution-3",
    "href": "slides-02-02.html#counting-characters-solution-3",
    "title": "HashMap",
    "section": "Counting characters – Solution 3",
    "text": "Counting characters – Solution 3\nimport java.util.HashMap;\n\npublic class CountCharacters {\n    \n    public static void main(String[] args) {\n        if (args.length &gt; 0) {\n            String word = args[0];\n            HashMap&lt;Character, Integer&gt; charCount = new HashMap&lt;Character, Integer&gt;();\n            \n            for (char c : word.toCharArray()) {\n                charCount.putIfAbsent(c, 0);\n                charCount.put(c, charCount.get(c) + 1);\n                \n            }\n            \n            System.out.println(charCount);\n            \n        }\n    }\n}"
  },
  {
    "objectID": "slides-02-02.html#getting-hashmap-keys",
    "href": "slides-02-02.html#getting-hashmap-keys",
    "title": "HashMap",
    "section": "Getting HashMap keys",
    "text": "Getting HashMap keys\nWe can use the method .keySet() to get a set of all keys in a HashMap as an ArrayList\nArrayList&lt;String&gt; myKeys = new ArrayList&lt;String&gt;(myHashMap.keySet());\nThen we can sort the ArrayList using Collections\nimport java.util.Collections; \nWe then call the method .sort()\nCollections.sort(myKeys);\nModify your counting characters solution to print each character and its count, one per line, in alphabetical order."
  },
  {
    "objectID": "slides-02-02.html#printing-sorted-key-and-value-solution",
    "href": "slides-02-02.html#printing-sorted-key-and-value-solution",
    "title": "HashMap",
    "section": "Printing sorted key and value – solution",
    "text": "Printing sorted key and value – solution\nimport java.util.ArrayList;\nimport java.util.Collections; \nimport java.util.HashMap;\n\n\npublic class CountCharacters {\n    \n    public static void main(String[] args) {\n        if (args.length &gt; 0) {\n            String word = args[0];\n            HashMap&lt;Character, Integer&gt; charCount = new HashMap&lt;Character, Integer&gt;();\n            \n            for (char c : word.toCharArray()) {\n                charCount.putIfAbsent(c, 0);\n                charCount.put(c, charCount.get(c) + 1);\n                \n            }\n            \n            ArrayList&lt;Character&gt; allChars = new ArrayList&lt;Character&gt;(charCount.keySet());\n            Collections.sort(allChars);\n            \n            for (Character c : allChars) {\n                System.out.println(c + \" - \" + charCount.get(c));\n            }\n            \n        }\n    }\n}"
  },
  {
    "objectID": "slides-02-02.html#counting-odds-and-evens",
    "href": "slides-02-02.html#counting-odds-and-evens",
    "title": "HashMap",
    "section": "Counting odds and evens",
    "text": "Counting odds and evens\nWrite a Java application that given an undetermined number of integers, it creates a HashMap with the count of odds and evens"
  },
  {
    "objectID": "slides-02-02.html#counting-odds-and-evens-solution",
    "href": "slides-02-02.html#counting-odds-and-evens-solution",
    "title": "HashMap",
    "section": "Counting odds and evens – solution",
    "text": "Counting odds and evens – solution\nimport java.util.HashMap;\n\npublic class CountOddsEvens {\n\n    public static void main(String[] args) {\n        HashMap&lt;String, Integer&gt; oddEvenCount = new HashMap&lt;String, Integer&gt;();\n        oddEvenCount.put(\"odds\", 0);\n        oddEvenCount.put(\"evens\", 0);\n        \n        for (String arg : args) {\n            int n = Integer.valueOf(arg);\n            if (n % 2 == 0) oddEvenCount.put(\"evens\", oddEvenCount.get(\"evens\") + 1);\n            else oddEvenCount.put(\"odds\", oddEvenCount.get(\"odds\") + 1);\n        }\n        \n        System.out.println(oddEvenCount);\n\n    }\n}"
  },
  {
    "objectID": "programming-assignment-01.html",
    "href": "programming-assignment-01.html",
    "title": "Programming Assignment 01",
    "section": "",
    "text": "Deadline: September 11, 2024 – Wednesday, 11:30pm"
  },
  {
    "objectID": "programming-assignment-01.html#input-file",
    "href": "programming-assignment-01.html#input-file",
    "title": "Programming Assignment 01",
    "section": "Input File",
    "text": "Input File\nWhen your program starts it should prompt the user for an input file.\nEach line of the input file should be in the following format:\n  &lt;number&gt; &lt;number&gt; ...; &lt;string with no semicolons&gt;; &lt;number&gt;% \nPrompt the user by printing \"File name?\" with a line break.\nSpecifically one or more numbers in the inclusive range 0 to 100 [0,100] separated by one or more spaces, a semicolon, a string with any characters except a semicolon, a semicolon, and a number in the inclusive range 0 to 100 [0,100] followed by a percent sign. The Java Scanner class with its nextLine() method can handle whatever line ending your file system uses.\nExample input:\n  80; final; 20%\n  90 60 80; programming assignments; 25%\nAn overall grade will be calculated by averaging the grades listed at the beginning of each line (e.g. avg(90 60 80) ==&gt; 76.67) and then computing a total grade based on the percentages indicated on each line (e.g. (0.20)80 + (0.25)76.67 ==&gt; 35.17, where (0.20)80 is another way to write 0.20 times 80).\nNote that if the input percentages do not add up 100%, then the total grade will not be out of 100%. In the example above the best possible grade would be 20% + 25% ==&gt; 45%.\nThe output will be the average grade per line and a total line. Example output:\n  final; 20.0%; avg=80.0\n  programming assignments; 25.0%; avg=76.6\n  TOTAL = 35.1% out of 45.0%\nNumbers representing discreet values should be stored as int. Numbers representing continuous values should be stored as double.\nValues of type double are printed with many digits after the decimal place by default but this does not look very good and causes grading problems due to round-off differences. Therefore, to print a smaller number of digits we will be using System.out.format.\nExample:\nSystem.out.format(\"%.1f is pi\", 3.141);\nThe above line will output the following:\n3.1 is pi\nYou should use the exact syntax above to round all output to one digit after the decimal. If you want to print a percent sign in a System.out.format statement you will need to escape it. You can escape it by writing two percentage signs in a row %%.\nError checking: Your PA1 program can assume that all grading input follows the format described. Any input that does not follow the input format can result in undefined behavior."
  },
  {
    "objectID": "programming-assignment-01.html#submitting-your-solution",
    "href": "programming-assignment-01.html#submitting-your-solution",
    "title": "Programming Assignment 01",
    "section": "Submitting your solution",
    "text": "Submitting your solution\nMake sure your file has the correct package info at the top:\npackage com.gradescope.gradenator;\nSubmit your Gradenator.java file to Gradescope"
  },
  {
    "objectID": "programming-assignment-01.html#testing-your-program",
    "href": "programming-assignment-01.html#testing-your-program",
    "title": "Programming Assignment 01",
    "section": "Testing your program",
    "text": "Testing your program\nIf your program cannot compile and run, then you should feel very uncomfortable. Experienced programmers write a little bit of new functionality and then quickly compile and run it. When you ask CSC 210 staff questions about your program, we will want to see that it compiles and runs. Comment out new stuff you have added until it compiles and runs. Show us what compiles and runs, and then add the one small piece that breaks it.\nThe CSC 210 staff can look at your code remotely on gradescope to help you with questions.\n\ninputFile1.txt\nexpectedOutput1.txt\ninputFile2.txt\nexpectedOutput2.txt"
  },
  {
    "objectID": "programming-assignment-01.html#more-than-one-revision",
    "href": "programming-assignment-01.html#more-than-one-revision",
    "title": "Programming Assignment 01",
    "section": "More than one revision",
    "text": "More than one revision\nThe first time we write a piece of a program, it is really a draft. We want to get the syntax right and figure out the functionality. After that, we need to fix our initial comments so they clarify what the code is doing. Help your future self and others who will be reading your code. Plan on rewriting pieces of your program multiple times to produce a professional and clear program."
  },
  {
    "objectID": "programming-assignment-01.html#decomposition-ideas",
    "href": "programming-assignment-01.html#decomposition-ideas",
    "title": "Programming Assignment 01",
    "section": "Decomposition Ideas",
    "text": "Decomposition Ideas\nHere are some Java classes and methods that might be helpful when working on this assignment. We recommend you lookup online examples of how to use these and what their parameters and return values are):\n\nSystem.out.println()\nSystem.out.print()\nnew File(\"inputFile1.txt\")\nnew Scanner(System.in)\n\nhasNextLine()\nnextLine()\nclose()\n\nString\n\nsubstring()\nindexOf()\ntrim()\nsplit()\n\nIterating over an array of strings, https://www.guru99.com/foreach-loop-java.html"
  },
  {
    "objectID": "writing-class.html#demonstration",
    "href": "writing-class.html#demonstration",
    "title": "Writing a Class",
    "section": "Demonstration",
    "text": "Demonstration\nWe will create a class called UseBankAccount\nAttributes: 1) ID (String), and 2) balance (double)\nMethods:\n\ngetID()\ngetBalance()\ndeposit(double amount)\nwithdraw(double amount)\n\nadapted from Rick Mercer’s slides"
  },
  {
    "objectID": "writing-class.html#solution",
    "href": "writing-class.html#solution",
    "title": "Writing a Class",
    "section": "Solution",
    "text": "Solution\npublic class BankAccount {\n    \n    private String ID;\n    private double balance;\n    \n    public BankAccount(String initID, double initBalance) {\n        ID = initID;\n        balance = initBalance;\n    }\n    \n    public String getID() {\n        return ID;\n    }\n    \n    public double getBalance() {\n        return balance;\n    }\n    \n    public void deposit(double amount) {\n        balance = balance + amount;\n    }\n    \n    public void withdraw(double amount) {\n        balance = balance - amount;\n    }\n\n}"
  },
  {
    "objectID": "writing-class.html#expand",
    "href": "writing-class.html#expand",
    "title": "Writing a Class",
    "section": "Expand",
    "text": "Expand\nCreate a console application (another class with a public main method) that does the following:\n\ncreate a new BankAccount for \"Casey\" (ID) with 100 for balance\nrequest user keyboard input for amount to deposit\nupdate account balance (deposit the amount)\nprint out a message with new balance\n\nBankAccount anAcct = new BankAccount(\"Casey\", 100);"
  },
  {
    "objectID": "writing-class.html#solution-1",
    "href": "writing-class.html#solution-1",
    "title": "Writing a Class",
    "section": "Solution",
    "text": "Solution\nimport java.util.Scanner;\n\npublic class UseBankAccount {\n    \n    public static void main(String[] args) {\n        \n        BankAccount anAcct = new BankAccount(\"Casey\", 100); \n        \n        // Input\n        System.out.print(\"Enter amount to deposit: \");\n        Scanner keyboard = new Scanner(System.in);\n        double amount = keyboard.nextDouble();\n        keyboard.close();\n        \n        // Process\n        anAcct.deposit(amount);\n        \n        // Output\n        System.out.println(\"New balance: \" + anAcct.getBalance());\n    }\n}"
  },
  {
    "objectID": "writing-class.html#expand-1",
    "href": "writing-class.html#expand-1",
    "title": "Writing a Class",
    "section": "Expand",
    "text": "Expand\nModify your console application to ask whether the user wants to deposit or withdraw, and execute the desired operation"
  },
  {
    "objectID": "writing-class.html#solution-2",
    "href": "writing-class.html#solution-2",
    "title": "Writing a Class",
    "section": "Solution",
    "text": "Solution\nimport java.util.Scanner;\n\npublic class UseBankAccount {\n    \n    public static void main(String[] args) {\n        \n        BankAccount anAcct = new BankAccount(\"Casey\", 100); \n        \n        // Input\n        Scanner keyboard = new Scanner(System.in);\n        \n        System.out.print(\"Deposit (D) or Withdraw (W)? \");  \n        String operation = keyboard.next();\n        \n        \n        if (operation.equals(\"D\")) {\n            System.out.print(\"Enter amount to deposit: \");\n            double amount = keyboard.nextDouble();\n            \n            // Process\n            anAcct.deposit(amount);\n            \n            // Output\n            System.out.println(\"New balance: \" + anAcct.getBalance());\n        }\n        \n        if (operation.equals(\"W\")) {\n            System.out.print(\"Enter amount to withdraw: \");\n            double amount = keyboard.nextDouble();\n            \n            // Process\n            anAcct.withdraw(amount);\n            \n            // Output\n            System.out.println(\"New balance: \" + anAcct.getBalance());\n        }\n        \n\n        System.out.println(\"Thank you.\");\n        \n        keyboard.close();\n        \n        \n    }\n}"
  },
  {
    "objectID": "programming-assignment-04.html",
    "href": "programming-assignment-04.html",
    "title": "Programming Assignment 04",
    "section": "",
    "text": "Deadline: October 04, 2024 – Friday, 11:30pm"
  },
  {
    "objectID": "programming-assignment-04.html#learning-objectives",
    "href": "programming-assignment-04.html#learning-objectives",
    "title": "Programming Assignment 04",
    "section": "Learning Objectives",
    "text": "Learning Objectives\nThe goal of this assignment is to practice the following ideas:\n\nUnderstanding how a large problem is decomposed into classes.\nUsing JUnit to test the interface to those classes.\nTraversal over trees and post-order evaluation of expressions.\nMore exhaustive search using recursive backtracking.\nMultiple data structures being used at the same time (tree and map of variables to bool values)\n\nFor this assignment you have been provided classes that build syntax trees from boolean expression strings. The bool_exp package contains all of the source code for this library.\nNOTE: You do not need to modify any of the files in the bool_exp package. We will be testing your code with the original versions of the bool_sat/* files."
  },
  {
    "objectID": "programming-assignment-04.html#background-what-is-this-sat-thing",
    "href": "programming-assignment-04.html#background-what-is-this-sat-thing",
    "title": "Programming Assignment 04",
    "section": "Background (What is this SAT thing?)",
    "text": "Background (What is this SAT thing?)\nThe SAT problem is historically significant in that it was the first problem proven to be NP-complete. A cool property of the NP-complete class of problems is that ANY NP-complete problem can be rewritten as the SAT problem, and vice-versa. Usually this conversion is pretty easy. There are a lot of really important problems in the NP-complete class. In fact, SAT is so important that there are yearly competitions to see who can create the best SAT solver ([1], [2]). SAT has no known efficient solution (i.e. a solution in polynomial time, in the worst case SAT is on the order of \\(O(2^n)\\)).\nSome uses to SAT solvers:\n\nUsing SAT to synthesize programs. Yes, that is “synthesis” as in have the computer write programs!\nEclipse embeds SAT4j to manage dependencies among its plugins.\nApplied to a flash game called Hexoim."
  },
  {
    "objectID": "programming-assignment-04.html#the-assignment-what-you-will-be-doing",
    "href": "programming-assignment-04.html#the-assignment-what-you-will-be-doing",
    "title": "Programming Assignment 04",
    "section": "The Assignment (What you will be doing)",
    "text": "The Assignment (What you will be doing)\nFor this assignment, you will be exhaustively searching all possible assignments of boolean values to variables and determining if the expression is satisfiable. An expression is satisfiable if there exists at least one mapping from variables to boolean values such that the expression evaluates to true. Such a mapping (where every variable is given exactly one value from {true, false}) will be called a ‘configuration’ in this document.\nFor example:\n    a NAND a\nCan the expression a NAND a have any assignment of ‘a’ that results in a true value for the expression?\nThe answer is: Yes.\nIf a is false then (false NAND false) is true.\nIf on the other hand all possible boolean assignments to variables in the expression result in the expression being false, then the expression is unsatisfiable.\nThe input to your program will be a boolean expression of variables and NAND operations. See TestCases/*.in for example input files.\nHere’s the NAND truth table for reference:\n\n\n\nA\nB\nA NAND B\n\n\n\n\nF\nF\nT\n\n\nF\nT\nT\n\n\nT\nF\nT\n\n\nT\nT\nF"
  },
  {
    "objectID": "programming-assignment-04.html#the-boolsat-package",
    "href": "programming-assignment-04.html#the-boolsat-package",
    "title": "Programming Assignment 04",
    "section": "The BoolSAT Package",
    "text": "The BoolSAT Package\nMake sure you clone the GitHub repo for this project.\nYou are provided with a number of classes in bool_sat/*. See the file headers in these .java files to see how they can be used. PA4ReadInputWriteDot.java will be especially useful, because it shows how to use the provided BoolSatParser.parse() function to turn a string from the input file into a tree representing the expression.\nGiven boolean logic expressions we can construct trees to represent the expressions. See PA4ReadInputWriteDot.java to see how this is done; here is an example expression tree:\nInput: a NAND (b NAND $t) NAND _3\nOutput:"
  },
  {
    "objectID": "programming-assignment-04.html#task-1---junit-testing-you-need-to-do-this",
    "href": "programming-assignment-04.html#task-1---junit-testing-you-need-to-do-this",
    "title": "Programming Assignment 04",
    "section": "Task #1 - JUnit Testing (You need to do this)",
    "text": "Task #1 - JUnit Testing (You need to do this)\nWe have done some preliminary main-method testing in the Parser class and Lexer class in the BoolSat library. You need to help us out by writing JUnit tests for the ASTNode class.\nIn a file ASTNodeTest.java that you create, you should at a minimum, test the following for each node type using JUnit:\n\nCreating nodes with null children.\nCreating nodes with other ASTNodes as children.\nThe isNand and isId methods on nodes that are the correct type and incorrect type.\nGetting the name of the identifier in an ID node.\n\n\nJUnit Test Cases\nEach feature being tested should be in its own test case. A JUnit test case is a method of the form (see all previous Drills for more examples):\n@Test\npublic void testFeatureMath() {\n        Integer i = new Integer(1);\n        Assert.assertEquals(i.intValue(), 1);\n        Assert.assertTrue(5 + 1 == 6);\n        Assert.assertFalse(5 * 4 == 4);\n        ...\n}\nThe Assert class provides methods for testing expected behavior. If any assertion does not pass, the test case will fail and Eclipse will display information about which test cases pass and, if any fail, on which assertion they failed.\nHere, two of my test cases failed because my ASTNode class was not implemented correctly:\n\nOnce I fixed the mistake, my test cases all passed:\n\nNOTE: You should not change the implementation of the ASTNode class. All you need to do is write a set of test cases that verify it behaves correctly.\nAs a thought experiment, how could you rewrite the main-method test cases of BoolSatParser.java and Lexer.java into JUnit test cases?"
  },
  {
    "objectID": "programming-assignment-04.html#task-2---the-satisfiability-problem-you-need-to-do-this",
    "href": "programming-assignment-04.html#task-2---the-satisfiability-problem-you-need-to-do-this",
    "title": "Programming Assignment 04",
    "section": "Task #2 - The SAT[isfiability] Problem (You need to do this)",
    "text": "Task #2 - The SAT[isfiability] Problem (You need to do this)\nImplement a program in BoolSat.java that:\n\nConstructs an Abstract Syntax Tree for the expression in the input file provided by the first command line argument (args[0]).\nOptionally accepts a DEBUG command line option in the second command line argument.\nExhaustively searches over all possible assignments of values to each boolean variable. If the DEBUG option is set: print all configurations and the result evaluating the expression with those variable values. If the DEBUG option is not set, print all configurations that satisfy the expression.\n\n\nExpression input file:\nThe expression input file should contain only a single line, that line should contain a well-formed Java boolean expression limited to:\n\nthe NAND operator NAND\nand valid Java identifiers: i.e strings with no spaces that start with exactly one letter, or $, or _, that is followed by any number of letters, digits, $ and _ characters\nand expressions in parentheses\n\nInput File:\n----------------------------------\n| a NAND (b NAND $t) NAND _3     |\n|             ...                | &lt;all other lines ignored&gt;\n----------------------------------\nThis description is taken from PA4ReadInputWriteDot.java – an example of what the file usage documentation for the code you write should look like.\n\n\nOutput Format (DEBUG not enabled):\nFor the above expression, the output should be the following:\ninput: a NAND (b NAND $t) NAND _3\nSAT\n$t: false, _3: false, a: false, b: false\n$t: false, _3: false, a: false, b: true\n$t: false, _3: false, a: true, b: false\n$t: false, _3: false, a: true, b: true\n$t: false, _3: true, a: true, b: false\n$t: false, _3: true, a: true, b: true\n$t: true, _3: false, a: false, b: false\n$t: true, _3: false, a: false, b: true\n$t: true, _3: false, a: true, b: false\n$t: true, _3: false, a: true, b: true\n$t: true, _3: true, a: true, b: false\nTo match the expected output you need to convert each satisfying configuration into a single line string. The String representation should be of the form\nidentifier0: value0, identifier1: value1, ..., identifierN: valueN\nsuch that identifier0 , identifier1, …, identifierN are sorted in alphabetic order.\nLastly; there may be many such configurations that satisfy an expression, each line that is output should be sorted (see example output). The output is sorted by the the configuration strings themselves. (HINT: create some kind of collection of configuration strings and print them out in sorted order).\n\n\nOutput Format (DEBUG enabled):\nWhen the DEBUG command is provided to the program, you should print out all configurations and the value that the expression evaluates to with each configuration as input. Print the configuration in the same format as above, and append \", result\" to the end (where result is true or false depending on how the configuration evaluates the expression).\nUsing the same example as above, the output would be:\ninput: a NAND (b NAND $t) NAND _3\nSAT\n$t: false, _3: false, a: false, b: false, true\n$t: false, _3: false, a: false, b: true, true\n$t: false, _3: false, a: true, b: false, true\n$t: false, _3: false, a: true, b: true, true\n$t: false, _3: true, a: false, b: false, false\n$t: false, _3: true, a: false, b: true, false\n$t: false, _3: true, a: true, b: false, true\n$t: false, _3: true, a: true, b: true, true\n$t: true, _3: false, a: false, b: false, true\n$t: true, _3: false, a: false, b: true, true\n$t: true, _3: false, a: true, b: false, true\n$t: true, _3: false, a: true, b: true, true\n$t: true, _3: true, a: false, b: false, false\n$t: true, _3: true, a: false, b: true, false\n$t: true, _3: true, a: true, b: false, true\n$t: true, _3: true, a: true, b: true, false"
  },
  {
    "objectID": "programming-assignment-04.html#testing-your-program",
    "href": "programming-assignment-04.html#testing-your-program",
    "title": "Programming Assignment 04",
    "section": "Testing your program",
    "text": "Testing your program\nThe autograder will be calling the public method getOuput(rootNode, debugOption). You will need to implement more methods to make this work, the the getOutput method is the only one that is called by the autograder.\n\npublic static void main(String[] args) throws FileNotFoundException{\n        if(args.length &lt; 1 || args.length &gt; 2){\n            System.err.println(\n                    \"USAGE: java BoolSat &lt;inputFile.txt&gt; &lt;DEBUG*&gt;\");\n            System.exit(1);\n        }\n\n        // Get the expression from the file\n        String expression = null;\n        Scanner s = new Scanner(new File(args[0]));\n        expression = s.nextLine();\n\n        System.out.println(\"input: \" + expression);\n        \n        s.close();\n\n        // call the parser to generate the AST for the expression\n        ASTNode root = BoolSatParser.parse(expression);\n        \n        // get string output to print out\n        String output;\n        if (args.length == 2 && args[1].equals(\"DEBUG\")) {\n            output = getOuput(root, true);\n        } else {\n            output = getOuput(root, false);\n        }\n        \n        // print output string\n        System.out.println(output);\n        \n    }\n\n\nJUnit Background Information\nWriting software is hard. Plain and simple, programming is not easy. Over the past 70 years there have been many methods developed to make the process of writing code easier. Once such technique is called Test-Driven Development. The idea is simple: you know what you want your code to do, but you do not know how to write code to do it. So start by writing the test cases, then write code that makes those test cases pass. Test-Driven Development is used in industry, and you will most probably do it in CS335. In Java, JUnit is a framework that allows us to write test cases with ease and automate the testing process. Our goal is to introduce you to JUnit to help you test the code you write better.\n\n\nCode\nTo use JUnit, each test case (a single method defined like the one below) should be responsible for testing one piece of functionality.\n@Test\npublic void testOneThing() {\n}\nYou will also need to import some classes:\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertTrue;\n\nimport org.junit.Test;\n\n\n\nTesting Thought Process\nThis is the process you need to follow when writing test cases:\n\nTHINK about what needs to happen. “When I call this method what should it do?”\nTHINK about what the correct output should be for a particular input. “When I call this method with x and y as input, what should the output be?”\nWRITE CODE in the test case that creates these inputs, and feeds them into the code being tested.\n\nWRITE CODE in the test case to ensure that the actual result was correct. The actual output from the code being tested should match the expected output that we hypothesized in (2). Use the Assert class that JUnit provides.\n\nThe JUnit Assert class documentation lists all of the assert methods that can be used to test expected output vs actual output. Some of the most useful are assertTrue(), assertFalse(), assertEquals(), assertNull(), etc.\n\n\nExample\nFor example, the Java standard library has a Math class to do various math operations. Let’s apply this testing process to test the math class.\n\n(Thinking) The Math.min(int a, int b) method should return the smaller of the two input numbers.\n(Thinking) The min method accepts two numbers as input, and returns the smaller one. If I provide that method 55 and 77, the output should be 55.\n(Writing) Write the code to set up this scenario:\n\n@Test\npublic void testMath() {\n    int small = 55, big = 77;\n    int result = Math.min(small, big);\n}\n\n(Writing) We haven’t actually tested anything yet. Since the expected output is 55, if Math.min() is implemented correctly that is what the value of result should be. So we write an assert to test the expected output against the actual output.\n\n@Test\npublic void testMath() {\n    int small = 55, big = 77;\n    int result = Math.min(small, big);\n    Assert.assertEquals(result, 55); \n}\nIf Math.min() is not implemented correctly, then the test case would fail. If we have lots and lots of test cases and they all pass, we can be reasonably certain that the method is implemented correctly.\n\n\nAssignment Hint\nYou need to test all of the functionality of the ASTNode.java class. Your first step should be reading every line of code in that class (it’s a small class) and understanding what it does. How can you test something if you don’t know what it is supposed to be doing? If you have questions about how it is implemented, ask on Piazza. Then follow the 4 steps above. Let’s do another example using the ASTNode.java class.\n\nREAD THE CODE It looks like the class only has two public instance variables, child1 and child2. It looks like there are only public methods for creating nodes, testing if a given node is of a particular type, and getting the name of an identifier node’s variable.\nTHINK NAND nodes have two children.\nTHINK If I create a NAND node with the two children set to null, the child1 and child2 instance variables should both probably be null.\nWRITE CODE Let’s create an NAND node with null children.\n\n@Test\npublic void testAnd(){\n    ASTNode testAnd = ASTNode.createNandNode(null, null);\n}\n\nWRITE CODE Let’s test that the values are what they should be.\n\n@Test\npublic void testNnd(){\n    ASTNode testNand = ASTNode.createNandNode(null, null);\n    Assert.assertNull(testNand.child1);\n    Assert.assertNull(testNand.child2);\n}\nOnce you have finished (4), go back to (1) and repeat until you have tested all of the functionality of the class. In the Task #1 criteria I list 5 different functionalities to test for. We have done the first bullet point for only the NAND node. You should do this same bullet point for the other kinds of nodes.\nAlso see all of the provided Drill*Test.java code to see more examples of using JUnit.\n\n\nBoolSat Package\nThe file bool_exp/PA4ReadInputWriteDot.java is an example application for using the BoolSatParser. This file reads an input expression from a file, and creates a string in the DOT format representing the structure of the expression tree. That string can be fed as input to a DOT to Image utility to see a picture of the structure of the tree.\nYou will need to write code similar to how PA4ReadInputWriteDot is written, you will need to read an expression from an input file, and pass it to BoolSatParser.parse(String expression). This method will return an ASTNode that is the root of an expression tree."
  },
  {
    "objectID": "programming-assignment-04.html#getting-started",
    "href": "programming-assignment-04.html#getting-started",
    "title": "Programming Assignment 04",
    "section": "Getting Started",
    "text": "Getting Started\n\nJUnit Background Information\nWriting software is hard. Plain and simple, programming is not easy. Over the past 70 years there have been many methods developed to make the process of writing code easier. Once such technique is called Test-Driven Development. The idea is simple: you know what you want your code to do, but you don’t know how to write code to do it. So start by writing the test cases, then write code that makes those test cases pass. Test-Driven Development is used in industry, and you will do it in CS335. In Java, JUnit is a framework that allows us to write test cases with ease and automate the testing process.\nYou are not doing Test-Driven Development (you can if you want, but that is not the purpose of this course). Our goal is to introduce you to JUnit to help you test the code you write better.\n\n\nCode\nJUnit is a lot simpler than it seems. Each test case (a single method defined like the one below) should be responsible for testing one piece of functionality.\n@Test\npublic void testOneThing() {\n}\n\n\nTesting Thought Process\nThis is the process you need to follow when writing test cases:\n\nTHINK about what needs to happen. “When I call this method what should it do?”\nTHINK about what the correct output should be for a particular input. “When I call this method with x and y as input, what should the output be?”\nWRITE CODE in the test case that creates these inputs, and feeds them into the code being tested.\n\nWRITE CODE in the test case to ensure that the actual result was correct. The actual output from the code being tested should match the expected output that we hypothesized in (2). Use the Assert class that JUnit provides.\n\nThe JUnit Assert class documentation lists all of the assert methods that can be used to test expected output vs actual output. Some of the most useful are assertTrue(), assertFalse(), assertEquals(), assertNull(), etc.\n\n\nExample\nFor example, the Java standard library has a Math class to do various math operations. Let’s apply this testing process to test the math class.\n\n(Thinking) The Math.min(int a, int b) method should return the smaller of the two input numbers.\n(Thinking) The min method accepts two numbers as input, and returns the smaller one. If I provide that method 55 and 77, the output should be 55.\n(Writing) Write the code to set up this scenario:\n\n@Test\npublic void testMath() {\n    int small = 55, big = 77;\n    int result = Math.min(small, big);\n}\n\n(Writing) We haven’t actually tested anything yet. Since the expected output is 55, if Math.min() is implemented correctly that is what the value of result should be. So we write an assert to test the expected output against the actual output.\n\n@Test\npublic void testMath() {\n    int small = 55, big = 77;\n    int result = Math.min(small, big);\n    Assert.assertEquals(result, 55); \n}\nIf Math.min() is not implemented correctly, then the test case would fail. If we have lots and lots of test cases and they all pass, we can be reasonably certain that the method is implemented perfectly.\n\n\nAssignment Hint\nYou need to test all of the functionality of the ASTNode.java class. Your first step should be reading every line of code in that class (it’s a small class) and understanding what it does. How can you test something if you don’t know what it is supposed to be doing? If you have questions about how it is implemented, ask on Piazza. Then follow the 4 steps above. Let’s do another example using the ASTNode.java class.\n\nREAD THE CODE It looks like the class only has two public instance variables, child1 and child2. It looks like there are only pubic methods for creating nodes, testing if a given node is of a particular type, getting the type of a node as a string, and getting the name of an identifier node’s variable.\nTHINK AND nodes have two children.\nTHINK If I create an AND node with the two children set to null, the child1 and child2 instance variables should both probably be null.\nWRITE CODE Let’s create an AND node with null children.\n\n@Test\npublic void testAnd(){\n    ASTNode testAnd = ASTNode.createAndNode(null, null);\n}\n\nWRITE CODE Let’s test that the values are what they should be.\n\n@Test\npublic void testAnd(){\n    ASTNode testAnd = ASTNode.createAndNode(null, null);\n    Assert.assertNull(testAnd.child1);\n    Assert.assertNull(testAnd.child2);\n}\nOnce you have finished (4), go back to (1) and repeat until you have tested all of the functionality of the class. In the Task #1 criteria I list 5 different functionalities to test for. We have done the first bullet point for only the AND node. You should do this same bullet point for all kinds of nodes.\n\n\nBoolSat Library\nThe file bool_exp/PA4Main.java is an example application for using the BoolSatParser. This file reads an input expression from a file, and creates a string in the DOT format representing the structure of the expression tree. That string can be fed as input to a DOT to Image utility to see a picture of the structure of the tree.\nYou will need to write code similar to how PA4Main is written, you will need to read an expression from an input file, and pass it to BoolSatParser.parse(String expression). This method will return an ASTNode that is the root of the expression tree."
  },
  {
    "objectID": "programming-assignment-04.html#grading-criteria",
    "href": "programming-assignment-04.html#grading-criteria",
    "title": "Programming Assignment 04",
    "section": "Grading Criteria",
    "text": "Grading Criteria\n80% of the PA4 grade will be correctness. For this assignment, there will be some private test cases on Gradescope.\nThe other half of the PA4 grade will be your decomposition and code clarity, and the JUnit tests.\nDecomposition\n\nShould carefully select data structures that implement the required functionality. For example, if you avoid using Maps, it will probably result in more complicated code and thus points off.\nShould just use JUnit methods in ASTNodeTest.java and static methods in BoolSat.java.\nUse a single file for Task#2, BoolSat.java. This should be a small program (&lt;250 lines) not counting the file header.\nEach static method should be less than 30 lines. This INCLUDES comments but it does not include the method header. It is easier to read a function if it can all fit on one screen.\nMake things as simple as possible.\n\nOnly use one Scanner instance.\nDon’t use lambda functions or other features in non-standard ways.\nReduce the amount of conditional nesting as much as possible.\n\nDeclare collection variables using interface types.\nYour code should be decomposed well. main should be a good summary of your program and no method should be overly long or trivial. Your methods should not be chained. Do NOT have main just call one method that does everything.\nRedundancy is a grading focus; some tasks are similar in behavior or based off of other tasks. You should avoid repeated logic as much as possible.\n\nCode Clarity\n\nYOU should be able to read, understand, and explain your own code to someone else a couple days after you wrote it.\n\nNo magic numbers\nNo methods written to just get the test cases to work\n\nThere needs to be a balance between no comments in the body of the methods and a comment for every line in the program. Either extreme will result in points off.\nThe file header should include instructions on how someone would use this program. To use the program, one would need to know the input file format.\nEach method needs a method header that explains what the method does.\nUse meaningful variable names and camel case. Loop iterators can be simple (i for integers, s for strings, n for numbers, etc.).\nWe will be modeling some of the issues we are seeing with code.\nWe will ask permission to show clear code examples.\n\nThe coding style in terms of spacing, etc. should be done automatically every time you save in Eclipse. As long as you stick with those defaults, the syntax style should be fine. At workplaces the style requirements can be extensive. In this class, we have the following requirements:\n\nNo lines should be longer than 80 characters line.\nDo not mix tabs and spaces. Use spaces consistently.\nThe left curly brace should start on the same line as the loop or conditional.\n\nWrite your own code. We will be using a tool that finds overly similar code. we recommend that when talking with others about the assignment, do not write anything down."
  },
  {
    "objectID": "programming-assignment-04.html#submission",
    "href": "programming-assignment-04.html#submission",
    "title": "Programming Assignment 04",
    "section": "Submission",
    "text": "Submission\nFor PA4, you are required to submit your BoolSat.java and ASTNodeTest.java file to Gradescope.\nOnce I fixed the mistake, my test cases all passed:\n\nNOTE: You should not change the implementation of the ASTNode class. All you need to do is write a set of test cases that verify it behaves correctly (it does).\nHow could you rewrite the main-method test cases of BoolSatParser.java and Lexer.java into JUnit test cases?\n\nOutput Format (DEBUG not enabled):\nIn order to match the expected output you need to convert each satisfying configuration into a single line string. The String representation should be of the form\nidentifier0: value0, identifier1: value1, ..., identifierN: valueN\nsuch that identifier0 , identifier1, …, identifierN are sorted in lexicographic order.\nFor example: the expression a || b || c || d || e may produce the output \"a: true, b: false, c: false, d: true, e: true\" because this is a configuration that satisfies the expression.\nLastly; there may be many such configurations that satisfy an expression, each line that is output should be sorted (see example output).\n\n\nOutput Format (DEBUG enabled):\nWhen the DEBUG command is provided to the program, you should output all configurations and the value that the expression evaluates to with each configuration as input. The configuration of your string should be in the same format as above, and append \", result\" to the end (where result is true or false depending on how the configuration evaluates the expression).\nUsing the same example as above, the output would contain these lines:\n\"a: true, b: false, c: false, d: true, e: true, true\"\n\"a: false, b: false, c: false, d: false, e: true, true\"\n\"a: false, b: false, c: false, d: false, e: false, false\""
  },
  {
    "objectID": "programming-assignment-04.html#task-2---the-satisfiability-problem-you-need-to-do-this-1",
    "href": "programming-assignment-04.html#task-2---the-satisfiability-problem-you-need-to-do-this-1",
    "title": "Programming Assignment 04",
    "section": "Task #2 - The SAT[isfiability] Problem (You need to do this)",
    "text": "Task #2 - The SAT[isfiability] Problem (You need to do this)\nImplement a program in BoolSat.java that:\n\nConstructs an Abstract Syntax Tree for the expression in the input file provided by the first command line argument (args[0]).\nOptionally accepts a DEBUG command line option in the second command line argument.\nExhaustively searches over all possible assignments of values to each boolean variable. If the DEBUG option is set: print all configurations and the result evaluating the expression with those variable values. If the DEBUG option is not set, print all configurations that satisfy the expression.\n\n\nExpression input file:\nThe expression input file should contain only a single line, that line should contain a well-formed Java boolean expression limited to:\n\nthe AND operator &&\nthe OR operator ||\nParenthesis (, )\nthe NOT operator !\nand valid Java identifiers: i.e strings with no spaces that start with exactly one letter, or $, or _, that is followed by any number of letters, digits, $ and _ characters.\n\nInput File:\n----------------------------------\n| a && b || !c && !(!d || e)     |\n|             ...                | &lt;all other lines ignored&gt;\n----------------------------------\nThis description is taken from PA4Main.java – an example of what the class documentation for the code you write should look like.\n\n\nOutput Format (DEBUG not enabled):\nIn order to match the expected output you need to convert each satisfying configuration into a single line string. The String representation should be of the form\nidentifier0: value0, identifier1: value1, ..., identifierN: valueN\nsuch that identifier0 , identifier1, …, identifierN are sorted in lexicographic order.\nFor example: the expression a || b || c || d || e may produce the output \"a: true, b: false, c: false, d: true, e: true\" because this is a configuration that satisfies the expression.\nLastly; there may be many such configurations that satisfy an expression, each line that is output should be sorted (see example output).\n\n\nOutput Format (DEBUG enabled):\nWhen the DEBUG command is provided to the program, you should print out all configurations and the value that the expression evaluates to with each configuration as input. Print the configuration in the same format as above, and append \", result\" to the end (where result is true or false depending on how the configuration evaluates the expression).\nUsing the same example as above, the output would contain these lines:\n\"a: true, b: false, c: false, d: true, e: true, true\"\n\"a: false, b: false, c: false, d: false, e: true, true\"\n\"a: false, b: false, c: false, d: false, e: false, false\"\n\n\nExpected Output:\nConsider the input expression of a || b. If we exhaustively search all value assignments to a and b we will find the following to be true:\n\n\n\na value\nb value\na OR b\n\n\n\n\ntrue\ntrue\ntrue\n\n\ntrue\nfalse\ntrue\n\n\nfalse\ntrue\ntrue\n\n\nfalse\nfalse\nfalse\n\n\n\nThere are three unique configurations that satisfy the expression (therefore a || b is satisfiable). These configurations would be printed as the following strings\n\"a: true, b: true\"\n\"a: true, b: false\"\n\"a: false, b: true\"\nHowever, the correct output is these three strings in sorted order:\n% java PA4BoolSat expressionInputFileName\na: false, b: true\na: true, b: false\na: true, b: true\nIf we want to see all configurations and the values that the expression evaluates to with those configurations, we can run the program with the DEBUG argument.\n% java PA4BoolSat expressionInputFileName DEBUG\na: false, b: false, false\na: false, b: true, true\na: true, b: false, true\na: true, b: true, true"
  },
  {
    "objectID": "programming-assignment-04.html#testing-your-program-1",
    "href": "programming-assignment-04.html#testing-your-program-1",
    "title": "Programming Assignment 04",
    "section": "Testing your program",
    "text": "Testing your program\nWhen you commit and push, Travis CI will send you an email to let you know if the public test cases failed. We STRONGLY recommend you put some of your own test cases in TestCases/. Read grade.py to see how the input and .out files should be named. Also look at the examples that are already in the TestCases/ subdirectory.\nUpload it to Gradescope and you will be able to see which public test cases were passed/failed."
  },
  {
    "objectID": "programming-assignment-04.html#getting-started-1",
    "href": "programming-assignment-04.html#getting-started-1",
    "title": "Programming Assignment 04",
    "section": "Getting Started",
    "text": "Getting Started\n\nJUnit Background Information\nWriting software is hard. Plain and simple, programming is not easy. Over the past 70 years there have been many methods developed to make the process of writing code easier. Once such technique is called Test-Driven Development. The idea is simple: you know what you want your code to do, but you don’t know how to write code to do it. So start by writing the test cases, then write code that makes those test cases pass. Test-Driven Development is used in industry, and you will do it in CS335. In Java, JUnit is a framework that allows us to write test cases with ease and automate the testing process.\nYou are not doing Test-Driven Development (you can if you want, but that is not the purpose of this course). Our goal is to introduce you to JUnit to help you test the code you write better.\n\n\nCode\nJUnit is a lot simpler than it seems. Each test case (a single method defined like the one below) should be responsible for testing one piece of functionality.\n@Test\npublic void testOneThing() {\n}\n\n\nTesting Thought Process\nThis is the process you need to follow when writing test cases:\n\nTHINK about what needs to happen. “When I call this method what should it do?”\nTHINK about what the correct output should be for a particular input. “When I call this method with x and y as input, what should the output be?”\nWRITE CODE in the test case that creates these inputs, and feeds them into the code being tested.\n\nWRITE CODE in the test case to ensure that the actual result was correct. The actual output from the code being tested should match the expected output that we hypothesized in (2). Use the Assert class that JUnit provides.\n\nThe JUnit Assert class documentation lists all of the assert methods that can be used to test expected output vs actual output. Some of the most useful are assertTrue(), assertFalse(), assertEquals(), assertNull(), etc.\n\n\nExample\nFor example, the Java standard library has a Math class to do various math operations. Let’s apply this testing process to test the math class.\n\n(Thinking) The Math.min(int a, int b) method should return the smaller of the two input numbers.\n(Thinking) The min method accepts two numbers as input, and returns the smaller one. If I provide that method 55 and 77, the output should be 55.\n(Writing) Write the code to set up this scenario:\n\n@Test\npublic void testMath() {\n    int small = 55, big = 77;\n    int result = Math.min(small, big);\n}\n\n(Writing) We haven’t actually tested anything yet. Since the expected output is 55, if Math.min() is implemented correctly that is what the value of result should be. So we write an assert to test the expected output against the actual output.\n\n@Test\npublic void testMath() {\n    int small = 55, big = 77;\n    int result = Math.min(small, big);\n    Assert.assertEquals(result, 55); \n}\nIf Math.min() is not implemented correctly, then the test case would fail. If we have lots and lots of test cases and they all pass, we can be reasonably certain that the method is implemented perfectly.\n\n\nAssignment Hint\nYou need to test all of the functionality of the ASTNode.java class. Your first step should be reading every line of code in that class (it’s a small class) and understanding what it does. How can you test something if you don’t know what it is supposed to be doing? If you have questions about how it is implemented, ask on Piazza. Then follow the 4 steps above. Let’s do another example using the ASTNode.java class.\n\nREAD THE CODE It looks like the class only has two public instance variables, child1 and child2. It looks like there are only pubic methods for creating nodes, testing if a given node is of a particular type, getting the type of a node as a string, and getting the name of an identifier node’s variable.\nTHINK AND nodes have two children.\nTHINK If I create an AND node with the two children set to null, the child1 and child2 instance variables should both probably be null.\nWRITE CODE Let’s create an AND node with null children.\n\n@Test\npublic void testAnd(){\n    ASTNode testAnd = ASTNode.createAndNode(null, null);\n}\n\nWRITE CODE Let’s test that the values are what they should be.\n\n@Test\npublic void testAnd(){\n    ASTNode testAnd = ASTNode.createAndNode(null, null);\n    Assert.assertNull(testAnd.child1);\n    Assert.assertNull(testAnd.child2);\n}\nOnce you have finished (4), go back to (1) and repeat until you have tested all of the functionality of the class. In the Task #1 criteria I list 5 different functionalities to test for. We have done the first bullet point for only the AND node. You should do this same bullet point for all kinds of nodes.\n\n\nBoolSat Library\nThe file bool_exp/PA4Main.java is an example application for using the BoolSatParser. This file reads an input expression from a file, and creates a string in the DOT format representing the structure of the expression tree. That string can be fed as input to a DOT to Image utility to see a picture of the structure of the tree.\nYou will need to write code similar to how PA4Main is written, you will need to read an expression from an input file, and pass it to BoolSatParser.parse(String expression). This method will return an ASTNode that is the root of the expression tree."
  },
  {
    "objectID": "programming-assignment-04.html#grading-criteria-1",
    "href": "programming-assignment-04.html#grading-criteria-1",
    "title": "Programming Assignment 04",
    "section": "Grading Criteria",
    "text": "Grading Criteria\nHalf of the PA4 grade will be correctness. For this assignment, there will be some private test cases on Gradescope.\nThe other half of the PA4 grade will be your decomposition and code clarity, the JUnit tests, and a peer review.\nDecomposition * Should carefully select data structures that implement the required functionality. For example, if you avoid using Maps, it will probably result in more complicated code and thus points off.\n\nShould just use JUnit methods in ASTNodeTest.java and static methods in BoolSat.java.\nUse a single file for Task#2, BoolSat.java. This should be a small program (&lt;200 lines).\nEach static method should be less than 30 lines. This INCLUDES comments. It is easier to read a function if it can all fit on one screen.\nMake things as simple as possible.\n\nOnly use one Scanner instance.\nDon’t use lambda functions or other features in non-standard ways.\nAvoid nested loops.\nAvoid nesting conditionals.\nAvoid chaining: see the Piazza post for more info\n\n\nCode Clarity * YOU should be able to read, understand, and explain your own code to someone else a couple days after you wrote it. * No magic numbers * No methods written to just get the test cases to work\n\nThere needs to be a balance between no comments in the body of the methods and a comment for every line in the program. Either extreme will result in points off.\nThe file header should include instructions on how someone would use this program. To use the program, one would need to know the input file format.\nUse meaningful variable names. Loop iterators can be simple (i for integers, s for strings, n for numbers, etc.).\nThe clearest code examples will be anonymously shown in class.\nThe most obfuscated code examples will be anonymously shown in class with suggestions for improvement.\n\nThe coding style in terms of spacing, etc. should be done automatically every time you save in Eclipse. As long as you stick with those defaults, the syntax style should be fine.\nWrite your own code. We will be using a tool that finds overly similar code. I recommend that when talking with others about the assignment, do not write anything down."
  },
  {
    "objectID": "programming-assignment-04.html#submission-1",
    "href": "programming-assignment-04.html#submission-1",
    "title": "Programming Assignment 04",
    "section": "Submission",
    "text": "Submission\nFor PA4, you are required to submit your BoolSat.java and ASTNodeTest.java file to Gradescope.\nUse the following package information:\npackage com.gradescope.bool_exp"
  },
  {
    "objectID": "programming-assignment-06.html",
    "href": "programming-assignment-06.html",
    "title": "Programming Assignmnet 06",
    "section": "",
    "text": "Deadline: October 23, 2024 – Wednesday, 11:30pm"
  },
  {
    "objectID": "programming-assignment-06.html#learning-objectives",
    "href": "programming-assignment-06.html#learning-objectives",
    "title": "Programming Assignmnet 06",
    "section": "Learning Objectives",
    "text": "Learning Objectives\nThe goal of this assignment is to design a class hierarchy to solve a problem, implement that hierarchy, use polymorphism, and use two-dimensional arrays.\nWhat is a class hierarchy you ask? Read about it on Wikipedia. The class diagram you will be submitting will be a simplified version of the UML class diagrams. There are many resources on the internet for UML class diagrams. See all the 2/28/18 class notes for the format expected in this class for PA6."
  },
  {
    "objectID": "programming-assignment-06.html#garden-simulation",
    "href": "programming-assignment-06.html#garden-simulation",
    "title": "Programming Assignmnet 06",
    "section": "Garden Simulation",
    "text": "Garden Simulation\nThe problem you will be solving is a garden simulation. The simulation will read commands like PLANT, PRINT, GROW, and HARVEST from a file and execute those commands. The garden that you will be implementing will consist of a number of columns and rows of plots. Within each plot there can exist a single plant, which is represented with a 5x5 grid of cells. Plants are divided up into three different categories: trees, flowers, and vegetables, all of which have unique characteristics.\nFor example, trees grow up, vegetables grow down, and flowers bloom as they grow."
  },
  {
    "objectID": "programming-assignment-06.html#the-assignment",
    "href": "programming-assignment-06.html#the-assignment",
    "title": "Programming Assignmnet 06",
    "section": "The Assignment",
    "text": "The Assignment\nThis is a two-week assignment. The class inheritance diagram will be all that is due Tuesday March 13th at 11:30 am to both Aropa AND Gradescope. We make suggestions as to what to implement the first week and then the second week, but you will be responsible for managing your own time. The rest of the assignment is due Monday March 19th.\n\nClass inheritance diagram: Create this diagram however you would like (draw it by hand, use software, etc.). You need to create a pdf file of it and submit it to Aropa AND Gradescope.\n\nSee (https://gradescope.com/help#help-center-item-student-scanning) for some suggestions of how to scan in a document with your phone if you plan to produce your pdf by taking a picture of it.\nYou will be building on PA6 for PA8 and PA9. In PA8 and PA9, you will be encouraged to use the model-view-controller pattern. Feel free to look that up ahead of time. You are not required to know it until we cover it though.\nMarch 1st 7:30am, the Aropa and Gradescope for the PA6 class inheritance diagram are ready to accept submissions.\nDuring Spring Break the Gradescope submission for the PA6 program will be posted.\n\nYour main program, which must be named PA6Main.java, will need to accept the name of an input file on the command line.\nThe input file will contain all of the garden initialization settings and the commands to simulate. Here is an example input file.\n\nrows: 1\ncols: 1\n\nPLANT (0,0) banana\nPRINT\nGROW 1\nprint\nNote that the commands should be case-insensitive. In other words, “print”, “PRINT”, and “Print” are all equivalent in the input file. Here is the output for the example:\n&gt; PRINT\n.....\n.....\n.....\n.....\n..b..\n\n&gt; GROW 1\n\n&gt; PRINT\n.....\n.....\n.....\n..b..\n..b..\nThe output should be printed to standard out. See PublicTestCases/ for more input and output examples.\n\nThe following are the types of specific plants that could be planted:\n\nFLOWERS      TREES      VEGETABLES\n-------      -----      ----------\nIris         Oak        Garlic\nLily         Willow     Zucchini\nRose         Banana     Tomato\nDaisy        Coconut    Yam\nTulip        Pine       Lettuce\nSunflower\n\nThe following are examples of representation arrays for different types of plants. For PA6, plants will be represented with ascii characters. Use the lower case version of the first letter of the plant name. For “Garlic” use ‘g’, for “Daisy” use ‘d’, etc.\n\nFlowers should start in the middle of the 5x5 grid of cells in the plot it is planted in. Each location in a plot is called a cell.\nVegetables should start at the top middle.\nTrees should start at the bottom middle.\n\n\nRose\n.....\n..... \n..r..\n.....\n.....\nTomato\n..t..\n..... \n.....\n.....\n.....\nCoconut\n.....\n..... \n.....\n.....\n..c..\n\nCommands that need to be implemented. See the PublicTestCases/ for more examples. There are examples with PLANT, PRINT, and GROW. Other command input and output examples will appear during Spring Break.\n\nThe PLANT Command EXAMPLE USE: PLANT (0,0) rose If the PLANT command is read, it should be followed by plot coordinates and the type of Plant to be planted. Use this type to plant the correct subclass of plant into the garden at given plot coordinates. The plot coordinates are given as row and column. Both rows and columns start at 0. Rows go down the screen, and columns go across the screen. Each plot will itself contain 5 cells (represented as characters). There is a restriction that the number of cells across should be less than or equal to 80, therefore the most plot columns allowed is 80/5 or 16.\nThe PRINT Command EXAMPLE USE: PRINT If the PRINT command is read, then the entire garden should be printed to standard out.\nThe GROW Command EXAMPLE USE: GROW 1 If the GROW command is read, then each Plant should grow the specified number of times as seen in the input command. A plant cannot grow out of its plot. No error will happen, but growth should not occur outside the plot boundaries. Plots also cannot run into each other.\nGROW [num] (x,y) EXAMPLE USE: GROW 1 (2,3) Grow whichever Plant is located in the garden at position (x,y) num times. If there is nothing at this position or the position is outside the size of the garden, print, “Can’t grow there.” and continue.\nGROW [num] [type] EXAMPLE USE: GROW 1 rose Grow only Plants of the specified type num times.\nGROW [num] [Plant] EXAMPLE USE: GROW 1 flower  Grow only Plants of the specified class num times.\nHARVEST Remove all Vegetables from the Garden.\nHARVEST (x,y) EXAMPLE USE: HARVEST (2,3) Harvest Vegetable at location (x,y). If not a Vegetable or outside of Garden, print, “Can’t harvest there.” and continue.\nHARVEST [type] EXAMPLE USE: HARVEST tomato Harvests all Vegetables of the specified type. If there are no Vegetables with that type, do nothing.\nPICK Remove all Flowers from the Garden.\nPICK (x,y) EXAMPLE USE: PICK (2,3) Pick Flower at location (x,y). If not a Flower or outside of Garden, print, “Can’t pick there.” and continue.\nPICK [type] EXAMPLE USE: PICK rose Pick all Flowers of the specified type. If there are no Flowers with that type, do nothing.\nCUT Remove all Trees from the Garden.\nCUT (x,y) EXAMPLE USE: CUT (2,3) Cut Tree at location (x,y). If not a Tree or outside of Garden, print, “Can’t cut there.” and continue.\nCUT [type] EXAMPLE USE: CUT PINE Cut all Trees of the specified type. If there are no Trees with that type, do nothing.\n\nUnique Class\n\nStudents will design their own plant type and show an example input and output that illustrates it in their README.md file. This new plant should be different from Vegetable, Flower, and Tree, but still be usable alongside them within the garden and work with the commands PLANT, GROW, and PRINT.\n\nError Handling\n\nSome of the commands above specify some error handling.\nThe garden should never be more than 80 characters across. If it is print out the message “Too many plot columns.” and then exit. Think: How many characters across is each plot?\nOther than the above specified errors, the input can be assumed well formed."
  },
  {
    "objectID": "programming-assignment-06.html#design-suggestions",
    "href": "programming-assignment-06.html#design-suggestions",
    "title": "Programming Assignmnet 06",
    "section": "Design Suggestions",
    "text": "Design Suggestions\nWe recommend the following: * A Garden object with a 2D array or list of plant objects. * A Plant class hierarchy of some kind. The design for this is what will be submitted for peer review on Tuesday March 13th at 11:30 am to both Aropa AND Gradescope. * A Screen object with a 2D array of characters that each plant can print its current representation into. The Screen object can then print everything to standard out. (Hint: what did you do in those drills due before Spring Break?) * hint: when copying over a Plant’s representation array place each cell at:\n     [(Plant's row  * 5) + cell row][(Plant's col * size of plot) + cell col]\ninto the Screen object’s Array."
  },
  {
    "objectID": "programming-assignment-06.html#grading-criteria",
    "href": "programming-assignment-06.html#grading-criteria",
    "title": "Programming Assignmnet 06",
    "section": "Grading Criteria",
    "text": "Grading Criteria\nHalf of the PA6 grade will be correctness. For this assignment, there will be some private test cases on Gradescope used for grading.\nThe other half of the PA6 grade will be your decomposition and code clarity. Twenty of these points will be on your class hierarchy diagram.\nDecomposition\n\nPoints will be taken off for copy, pasted, and edited code that should have been encapsulated in a method.\nThis program should use fewer than 10 .java files. Each of these files should be (&lt;275 lines).\nEach static method should be less than 30 lines. This INCLUDES comments, but not the method header. It is easier to read a function if it can all fit on one screen.\nMake things as simple as possible.\n\nOnly use one Scanner instance.\nDon’t use lambda functions or other features in non-standard ways.\nAvoid nested loops unless they would be cleaner when handling a 2D array.\nAvoid nesting conditionals.\nAvoid chaining: see the Piazza post for more info\n\n\nCode Clarity * YOU should be able to read, understand, and explain your own code to someone else a couple days after you wrote it. * No magic numbers * No methods written to just get the test cases to work\n\nThere needs to be a balance between no comments in the body of the methods and a comment for every line in the program. Either extreme will result in points off.\nThe file header should include instructions on how someone would use this program. To use the program, one would need to know the input file format.\nUse meaningful variable names. Loop iterators can be simple (i for integers, s for strings, n for numbers, etc.).\nThe clearest code examples will be anonymously shown in class.\nThe most obfuscated code examples will be anonymously shown in class with suggestions for improvement.\n\nThe coding style in terms of spacing, etc. should be done automatically every time you save in Eclipse. As long as you stick with those defaults, the syntax style should be fine."
  },
  {
    "objectID": "programming-assignment-06.html#submission",
    "href": "programming-assignment-06.html#submission",
    "title": "Programming Assignmnet 06",
    "section": "Submission",
    "text": "Submission\nWrite your own code. We will be using a tool that finds overly similar code. This Spring 2018 semester in CS 210 we unfortunately have had academic integrity cases. I recommend that when talking with others about the assignment, do not write anything down.\nThe class hierarchy diagram in pdf format is due Tuesday March 13th at 11:30 am in Gradescope AND Aropa.\nFor PA6, you are REQUIRED to submit all of your java source files to Gradescope before Monday March 19th at 11:30 am. You also need to submit your README.md with example input and output for your unique class."
  },
  {
    "objectID": "short-assignment-03.html#setup",
    "href": "short-assignment-03.html#setup",
    "title": "Lab 03",
    "section": "",
    "text": "Now you are ready to start coding."
  },
  {
    "objectID": "short-assignment-03.html#resources",
    "href": "short-assignment-03.html#resources",
    "title": "Lab 03",
    "section": "",
    "text": "Look up methods to take advantage of Java’s libraries.\n\nSystem.out.println() is your friend for testing and output\nDeclaring an ArrayList:\n\nArrayList&lt;Integer&gt; array = new ArrayList&lt;Integer&gt;();\n\nAdding a value in an ArrayList:\n\narray.add(1);"
  },
  {
    "objectID": "slides-03-01.html",
    "href": "slides-03-01.html",
    "title": "Exhaustive Search",
    "section": "",
    "text": "Exhaustive Search\nBacktracking\n\nThese are brute-force algorithms\nUsed for problems that have a small and well-defined search space, where it is feasible to check all possible solutions"
  },
  {
    "objectID": "slides-03-01.html#recursive-factorial",
    "href": "slides-03-01.html#recursive-factorial",
    "title": "Exhaustive Search",
    "section": "Recursive Factorial",
    "text": "Recursive Factorial\n\nRecursive algorithms split the main problem into smaller problems\nProblems that can be solved by applying solutions to smaller versions of the same problem\nRecursive methods call themselves\n\nLet’s write a recursive solution to the factorial problem\n\nWhat’s the base case? (when do we stop, come back from the recursion?)\nWhat’s the recursive step?"
  },
  {
    "objectID": "slides-03-01.html#recursive-factorial-solution",
    "href": "slides-03-01.html#recursive-factorial-solution",
    "title": "Exhaustive Search",
    "section": "Recursive Factorial – solution",
    "text": "Recursive Factorial – solution\npublic class RecursiveFactorial {\n    \n    public static int factorial(int n) {\n        if (n == 0) return 1;\n        else return n * factorial(n - 1);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(factorial(10));\n    }\n\n}"
  },
  {
    "objectID": "slides-03-01.html#factorial-arraylist",
    "href": "slides-03-01.html#factorial-arraylist",
    "title": "Exhaustive Search",
    "section": "Factorial – ArrayList",
    "text": "Factorial – ArrayList\nWhat if we wanted to store all intermediate results in an array?\n[1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800]"
  },
  {
    "objectID": "slides-03-01.html#factorial-arraylist-solution",
    "href": "slides-03-01.html#factorial-arraylist-solution",
    "title": "Exhaustive Search",
    "section": "Factorial – ArrayList solution",
    "text": "Factorial – ArrayList solution\nimport java.util.ArrayList;\n\npublic class RecursiveFactorial {\n    \n    public static int factorial(int n, ArrayList&lt;Integer&gt; allResults) {\n        if (n == 0) {\n            allResults.add(1);\n            return 1;\n        }\n        else {\n            int subResult = n * factorial(n - 1, allResults);\n            allResults.add(subResult);\n            return subResult;\n        }\n    }\n\n    public static void main(String[] args) {\n        ArrayList&lt;Integer&gt; result = new ArrayList&lt;Integer&gt;();\n        factorial(10, result);\n        System.out.println(result);\n\n    }\n\n}"
  },
  {
    "objectID": "short-assignment-03.html#test-case-main",
    "href": "short-assignment-03.html#test-case-main",
    "title": "Lab 03",
    "section": "",
    "text": "Your code should run with the following main method:\npublic static void main(String[] args) {\n        ArrayList&lt;String&gt; allSolutions = new ArrayList&lt;String&gt;();\n        binary(5, \"\", allSolutions);\n        System.out.println(allSolutions);\n    }\n\n\nThis activity is very similar to the previous binary activity, so make sure to complete that activity first and reuse the enumerate algorithm here.\n\n\nConsider what decisions need to be made in order to enumerate over all of the possible roll combinations for N dice.\nFor example, if N = 1, then the output would be:\n[1, 2, 3, 4, 5, 6]\nFor N = 2, the output would be:\n[11, 12, 13, 14, 15, 16, 21, 22, 23, 24, 25, 26, 31, 32, 33, 34, 35, 36, 41, 42, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 61, 62, 63, 64, 65, 66]\n\nWhat parameters do you need with your enumerate method? What do these parameters represent?\nWhat value should you start setting each die to? Is this a different value than the start value used during the binary activity?\nHow should you move to selecting the value of the next roll? How will you achieve this in your recursive enumeration call?\nLook back at Part 1 or the lecture slides to recall the format of the enumerate algorithm to copy over any necessary code.\n\n\n\n\nThe enumerate algorithm requires a recursive call of the enumerate method. To conclude this activity, you need to implement the recursive call and select a base case condition. Think and discuss with your partner the following questions.\n\nWhat parameters should be equal for you to stop the recursion?\nWhere should the base case be located in your enumerate function?\nWhere should you call the method recursively?"
  },
  {
    "objectID": "short-assignment-03.html#test-case-main-1",
    "href": "short-assignment-03.html#test-case-main-1",
    "title": "Lab 03",
    "section": "",
    "text": "Your code should run with the following main method:\npublic static void main(String[] args) {\n        ArrayList&lt;String&gt; allSolutions = new ArrayList&lt;String&gt;();\n        String solution = \"\";\n        roll(2, solution, allSolutions);\n        System.out.println(allSolutions);\n    }"
  },
  {
    "objectID": "slides-03-01.html#quiz-02",
    "href": "slides-03-01.html#quiz-02",
    "title": "Exhaustive Search",
    "section": "Quiz 02",
    "text": "Quiz 02\n\n\ncurrent time\n\n\n\n\n\n\nYou have 10 minutes to complete the quiz.\nNo need to write comments.\nName your method what you want, but the name should be in camelCase."
  },
  {
    "objectID": "programming-assignment-03.html#academic-integrity",
    "href": "programming-assignment-03.html#academic-integrity",
    "title": "Programming Assignment 03",
    "section": "Academic Integrity",
    "text": "Academic Integrity\nWrite your own code. We will be using a tool that finds overly similar code. Do not look at other students’ code. Do not let other students look at your code or talk in detail about how to solve this programming project. Read the academy integrity page for more details on how we deal with violations in this course."
  },
  {
    "objectID": "short-assignment-04.html",
    "href": "short-assignment-04.html",
    "title": "Lab 04",
    "section": "",
    "text": "In this lab we will be writing JUnit tests.\nWriting software is hard. Plain and simple, programming is not easy. Over the past 70 years there have been many methods developed to make the process of writing code easier. Once such technique is called Test-Driven Development. The idea is simple: you know what you want your code to do, but you do not know how to write code to do it. So start by writing the test cases, then write code that makes those test cases pass. Test-Driven Development is used in industry, and you will most probably do it in CS335. In Java, JUnit is a framework that allows us to write test cases with ease and automate the testing process. Our goal is to introduce you to JUnit to help you test the code you write better.\n\n\n\nDownload the BasicArithmetic.java file from GitHub and set up your working environment on Eclipse with this file.\nThere are several ways to download the GitHub repo. Click on the green code button:\n\n\n\nGreen Code Button Options\n\n\nYou can click on Download Zip or you can copy the HTTPS or SSH addresses and then use your shell (terminal, command line) to git clone it to a specific folder (maybe your working environment folder for Eclipse):\ngit clone https://github.com/picoral/CSC210-lab04.git\nor\ngit clone git@github.com:picoral/CSC210-lab04.git\nOnce you have your project set up with the BasicArithmetic.java file you downloaded from GitHub, you can create a JUnit test file following these steps:\n\nGo to New &gt; JUnit Test Case \nName your file BasicArithmeticTest \nClick ok on the prompt window about adding JUnit library \n\nTo use JUnit, each test case (a single method defined like the one below) should be responsible for testing one piece of functionality.\n@Test\npublic void testOneThing() {\n}\n\n\n\nWrite at least one test case for each of these:\n\nsum of two numbers\nsubtraction of two numbers\nmultiplication of two numbers\ndivision of two numbers\n\nYour JUnit tab should look something like this:\n\n\n\nJUnit tab showing 4 passed test\n\n\n\n\n\nSubmit your BasicArithmeticTest.java file to Gradescope. Your tests will be manually graded."
  },
  {
    "objectID": "short-assignment-04.html#introduction",
    "href": "short-assignment-04.html#introduction",
    "title": "Lab 04",
    "section": "",
    "text": "In this lab we will be writing JUnit tests.\nWriting software is hard. Plain and simple, programming is not easy. Over the past 70 years there have been many methods developed to make the process of writing code easier. Once such technique is called Test-Driven Development. The idea is simple: you know what you want your code to do, but you do not know how to write code to do it. So start by writing the test cases, then write code that makes those test cases pass. Test-Driven Development is used in industry, and you will most probably do it in CS335. In Java, JUnit is a framework that allows us to write test cases with ease and automate the testing process. Our goal is to introduce you to JUnit to help you test the code you write better."
  },
  {
    "objectID": "short-assignment-04.html#set-up",
    "href": "short-assignment-04.html#set-up",
    "title": "Lab 04",
    "section": "",
    "text": "Download the BasicArithmetic.java file from GitHub and set up your working environment on Eclipse with this file.\nThere are several ways to download the GitHub repo. Click on the green code button:\n\n\n\nGreen Code Button Options\n\n\nYou can click on Download Zip or you can copy the HTTPS or SSH addresses and then use your shell (terminal, command line) to git clone it to a specific folder (maybe your working environment folder for Eclipse):\ngit clone https://github.com/picoral/CSC210-lab04.git\nor\ngit clone git@github.com:picoral/CSC210-lab04.git\nOnce you have your project set up with the BasicArithmetic.java file you downloaded from GitHub, you can create a JUnit test file following these steps:\n\nGo to New &gt; JUnit Test Case \nName your file BasicArithmeticTest \nClick ok on the prompt window about adding JUnit library \n\nTo use JUnit, each test case (a single method defined like the one below) should be responsible for testing one piece of functionality.\n@Test\npublic void testOneThing() {\n}"
  },
  {
    "objectID": "short-assignment-04.html#writing-test-cases",
    "href": "short-assignment-04.html#writing-test-cases",
    "title": "Lab 04",
    "section": "",
    "text": "Write at least one test case for each of these:\n\nsum of two numbers\nsubtraction of two numbers\nmultiplication of two numbers\ndivision of two numbers\n\nYour JUnit tab should look something like this:\n\n\n\nJUnit tab showing 4 passed test"
  },
  {
    "objectID": "short-assignment-04.html#submission",
    "href": "short-assignment-04.html#submission",
    "title": "Lab 04",
    "section": "",
    "text": "Submit your BasicArithmeticTest.java file to Gradescope. Your tests will be manually graded."
  },
  {
    "objectID": "exam-instructions.html#exam-instructions",
    "href": "exam-instructions.html#exam-instructions",
    "title": "Exam Instructions",
    "section": "Exam Instructions",
    "text": "Exam Instructions\nThis exam starts at 6:00pm and it ends at 8:00pm\nNo breaks during the exam. Use the restroom now.\n\nHave your photo ID handy\nPut away phones, laptops, calculators, smart watches, etc. Please remove headphones/earbuds and either turn hats or remove."
  },
  {
    "objectID": "exam-instructions.html#exam-instructions-1",
    "href": "exam-instructions.html#exam-instructions-1",
    "title": "Exam Instructions",
    "section": "Exam Instructions",
    "text": "Exam Instructions\n\nTWO STUDENTS PER TABLE (sit diagonally to each other – not side-by-side, not in front of each other)"
  },
  {
    "objectID": "syllabus.html#missing-an-exam",
    "href": "syllabus.html#missing-an-exam",
    "title": "Syllabus",
    "section": "Missing an Exam",
    "text": "Missing an Exam\nExam make-ups will be provided if you have a Dean’s excuse. Otherwise, if you miss an midterm exam, your NA grade will be replaced with your final exam grade."
  },
  {
    "objectID": "slides-04-01.html#using-random",
    "href": "slides-04-01.html#using-random",
    "title": "Classes and Methods",
    "section": "Using Random",
    "text": "Using Random\nimport java.util.Random;\nUse the Random class to draw a random card from myDeck\n// create instance of Random class\nRandom rand = new Random();\n   \n// Generate random integers in range 0 to 51\nint cardIndex = rand.nextInt(52);"
  },
  {
    "objectID": "slides-04-01.html#enum",
    "href": "slides-04-01.html#enum",
    "title": "Classes and Methods",
    "section": "enum",
    "text": "enum\nAn enum type is a special data type that enables for a variable to be a set of predefined constants\n  public enum suitOptions {\n        DIAMONDS, HEARTS, SPADES, CLUBS;\n        \n    }\n    \n    private suitOptions suit;\n    \n    // constructor\n    public Card(suitOptions suit, String rank) {\n        this.suit = suit;\n        this.rank = rank;\n    }\nExample of usage:\nCard cardOne = new Card(Card.suitOptions.DIAMONDS, \"ace\");"
  },
  {
    "objectID": "slides-04-01.html#enum-1",
    "href": "slides-04-01.html#enum-1",
    "title": "Classes and Methods",
    "section": "enum",
    "text": "enum\nRead documentation"
  },
  {
    "objectID": "slides-04-02.html#interface",
    "href": "slides-04-02.html#interface",
    "title": "Interfaces",
    "section": "Interface",
    "text": "Interface\n\nObjects define their interaction through their public methods\nInterfaces:\n\nallow us to implement abstraction\nprimarily define methods that other classes must implement\nallows us to be more formal about the behavior classes promise to provide.\nform a contract between the class and the outside interactions (this contract is enforced by the compiler)"
  },
  {
    "objectID": "slides-04-02.html#example",
    "href": "slides-04-02.html#example",
    "title": "Interfaces",
    "section": "Example",
    "text": "Example\nOn Eclipse choose New &gt; Interface\npublic interface CardGame {\n    \n    void setHand(int cardCount);\n    \n    int getHand();\n    \n    void setPlayers(int playerCount);\n    \n    int getPlayers();\n    \n}\nBase on these methods, create a PokerGame class that implements CardGame"
  },
  {
    "objectID": "slides-04-02.html#solution",
    "href": "slides-04-02.html#solution",
    "title": "Interfaces",
    "section": "Solution",
    "text": "Solution\npublic class PokerGame implements CardGame {\n    \n    private int cardCount = 5;\n    private int playerCount;\n    \n    public void setHand(int cardCount) {\n        this.cardCount = cardCount;\n    }\n    \n    public int getHand() {\n        return cardCount;\n    }\n    \n    public void setPlayers(int playerCount) {\n        this.playerCount = playerCount;\n    }\n    \n    public int getPlayers() {\n        return playerCount;\n    }\n    \n\n}"
  },
  {
    "objectID": "slides-04-02.html#build-a-better-interface",
    "href": "slides-04-02.html#build-a-better-interface",
    "title": "Interfaces",
    "section": "Build a better interface",
    "text": "Build a better interface\nIn your groups, discuss how to write a better interface for a card game.\nThink about different card games you know. What do they all have in common?\nWhat is specific to a Poker Game?"
  },
  {
    "objectID": "short-assignment-05.html",
    "href": "short-assignment-05.html",
    "title": "Lab 05",
    "section": "",
    "text": "In this lab you are finish writing a class that implements a given interface, and test your solution with a JUnit tests.\nYou will work with code that implements a Binary Search Tree (BST). A BST stores data in a sorted manner. Each node in a BST has exactly two children, a left child and a right child, with the left child being a subtree with values that are less than the parent node and the right child being a subtree with values greater than the parent node.\n\n\n\nHere’s the interface you are using for this assignment:\nimport java.util.ArrayList;\n\npublic interface BTNode {\n    \n    public boolean search(BTNode node, int value);\n    \n    public void setRight(BTNode node);\n    \n    public void setLeft(BTNode node);\n    \n    public void addNode(BTNode node, int value);\n    \n    public int getValue();\n    \n    public BTNode getLeft();\n    \n    public BTNode getRight();\n    \n  // given a root node, add values from lowest to highest to result ArrayList\n    public void toList(BTNode node, ArrayList&lt;Integer&gt; result);\n    \n}\nAnd here’s the class that implements this interface, you will notice that not all methods have been implemented. Your task is to implement the missing method, which is a tree traversal method.\nimport java.util.ArrayList;\n\npublic class BSTree implements BTNode {\n    // binary tree nodes have two children\n    private BTNode left, right;\n    // set the value to integer\n    private int value;\n    \n    // constructor of a BST, root with null children\n    public BSTree(int value) {\n        left = null;\n        right = null;\n        this.value = value;\n    }\n    \n    // getters\n    public int getValue() {\n        return value;\n    }\n    \n    public BTNode getLeft() {\n        return left;\n    }\n    \n    public BTNode getRight() {\n        return right;\n    }\n    \n    // setters\n    public void setRight(BTNode node) {\n        right = node;\n    }\n    \n    public void setLeft(BTNode node) {\n        left = node;\n    }\n    \n    // add node, check where node goes\n    public void addNode(BTNode node, int value) {\n        if (value &lt; node.getValue()) {\n            if (node.getLeft() == null) node.setLeft(new BSTree(value));\n            else addNode(node.getLeft(), value);\n        } else {\n            if (node.getRight() == null) node.setRight(new BSTree(value));\n            else addNode(node.getRight(), value);\n        }\n    }\n    \n    // search\n    public boolean search(BTNode node, int value) {\n        // end of tree, base case, value not in BST\n        if (node == null) return false; \n        \n        // found value\n        if (node.getValue() == value) return true;\n        \n        // keep looking\n        if (value &lt; node.getValue()) return search(node.getLeft(), value);\n        else return search(node.getRight(), value);\n        \n    }\n    \n\n}\n\n\n\n\nHere’s the JUnit test you can run to check if your implementation is correct.\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.ArrayList;\n\nimport org.junit.jupiter.api.Test;\n\nclass TestBSTree {\n\n    @Test\n    void test() {\n        BSTree myBST = new BSTree(10);\n        myBST.addNode(myBST, 3);\n        myBST.addNode(myBST, 11);\n        myBST.addNode(myBST, 4);\n        myBST.addNode(myBST, 20);\n        myBST.addNode(myBST, 24);\n        myBST.addNode(myBST, 14);\n        \n        ArrayList&lt;Integer&gt; result = new ArrayList&lt;&gt;();\n        myBST.toList(myBST, result);\n        Integer[] expected = {3, 4, 10, 11, 14, 20, 24};\n        for (int i = 0; i &lt; expected.length; i++) {\n            assertEquals(expected[i], result.toArray()[i]);\n        }\n    }\n\n}"
  },
  {
    "objectID": "short-assignment-05.html#introduction",
    "href": "short-assignment-05.html#introduction",
    "title": "Lab 05",
    "section": "",
    "text": "In this lab you are finish writing a class that implements a given interface, and test your solution with a JUnit tests.\nYou will work with code that implements a Binary Search Tree (BST). A BST stores data in a sorted manner. Each node in a BST has exactly two children, a left child and a right child, with the left child being a subtree with values that are less than the parent node and the right child being a subtree with values greater than the parent node."
  },
  {
    "objectID": "short-assignment-05.html#interface",
    "href": "short-assignment-05.html#interface",
    "title": "Lab 05",
    "section": "",
    "text": "Here’s the interface you are using for this assignment:\nimport java.util.ArrayList;\n\npublic interface BTNode {\n    \n    public boolean search(BTNode node, int value);\n    \n    public void setRight(BTNode node);\n    \n    public void setLeft(BTNode node);\n    \n    public void addNode(BTNode node, int value);\n    \n    public int getValue();\n    \n    public BTNode getLeft();\n    \n    public BTNode getRight();\n    \n  // given a root node, add values from lowest to highest to result ArrayList\n    public void toList(BTNode node, ArrayList&lt;Integer&gt; result);\n    \n}\nAnd here’s the class that implements this interface, you will notice that not all methods have been implemented. Your task is to implement the missing method, which is a tree traversal method.\nimport java.util.ArrayList;\n\npublic class BSTree implements BTNode {\n    // binary tree nodes have two children\n    private BTNode left, right;\n    // set the value to integer\n    private int value;\n    \n    // constructor of a BST, root with null children\n    public BSTree(int value) {\n        left = null;\n        right = null;\n        this.value = value;\n    }\n    \n    // getters\n    public int getValue() {\n        return value;\n    }\n    \n    public BTNode getLeft() {\n        return left;\n    }\n    \n    public BTNode getRight() {\n        return right;\n    }\n    \n    // setters\n    public void setRight(BTNode node) {\n        right = node;\n    }\n    \n    public void setLeft(BTNode node) {\n        left = node;\n    }\n    \n    // add node, check where node goes\n    public void addNode(BTNode node, int value) {\n        if (value &lt; node.getValue()) {\n            if (node.getLeft() == null) node.setLeft(new BSTree(value));\n            else addNode(node.getLeft(), value);\n        } else {\n            if (node.getRight() == null) node.setRight(new BSTree(value));\n            else addNode(node.getRight(), value);\n        }\n    }\n    \n    // search\n    public boolean search(BTNode node, int value) {\n        // end of tree, base case, value not in BST\n        if (node == null) return false; \n        \n        // found value\n        if (node.getValue() == value) return true;\n        \n        // keep looking\n        if (value &lt; node.getValue()) return search(node.getLeft(), value);\n        else return search(node.getRight(), value);\n        \n    }\n    \n\n}"
  },
  {
    "objectID": "short-assignment-05.html#junit-testing",
    "href": "short-assignment-05.html#junit-testing",
    "title": "Lab 05",
    "section": "",
    "text": "Here’s the JUnit test you can run to check if your implementation is correct.\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.ArrayList;\n\nimport org.junit.jupiter.api.Test;\n\nclass TestBSTree {\n\n    @Test\n    void test() {\n        BSTree myBST = new BSTree(10);\n        myBST.addNode(myBST, 3);\n        myBST.addNode(myBST, 11);\n        myBST.addNode(myBST, 4);\n        myBST.addNode(myBST, 20);\n        myBST.addNode(myBST, 24);\n        myBST.addNode(myBST, 14);\n        \n        ArrayList&lt;Integer&gt; result = new ArrayList&lt;&gt;();\n        myBST.toList(myBST, result);\n        Integer[] expected = {3, 4, 10, 11, 14, 20, 24};\n        for (int i = 0; i &lt; expected.length; i++) {\n            assertEquals(expected[i], result.toArray()[i]);\n        }\n    }\n\n}"
  },
  {
    "objectID": "slides-04-03.html#inheritance",
    "href": "slides-04-03.html#inheritance",
    "title": "Inheritance",
    "section": "Inheritance",
    "text": "Inheritance\nAttributes and methods can be inherited from one class to another\n\nsuperclass (parent) - the class being inherited from\nsubclass (child) - the class that inherits from another class\n\nUse the extends keyword"
  },
  {
    "objectID": "slides-04-03.html#superclass",
    "href": "slides-04-03.html#superclass",
    "title": "Inheritance",
    "section": "Superclass",
    "text": "Superclass\nCreate a class called Person with the following instance variable:\n\nFirst Name\nFamily Name\nBirthdate\n\nWhat public and private methods?"
  },
  {
    "objectID": "slides-04-03.html#superclass-solution",
    "href": "slides-04-03.html#superclass-solution",
    "title": "Inheritance",
    "section": "Superclass – solution",
    "text": "Superclass – solution\nimport java.time.LocalDate;\n\npublic class Person {\n    \n    private String firstName;\n    private String familyName;\n    private int birthYear;\n    private int birthMonth;\n    private int birthDay;\n\n    public Person(String first, String family) {\n        firstName = first;\n        familyName = family;\n    }\n    \n    public void setBirthDate(int year, int month, int day) {\n        LocalDate today = LocalDate.now(); \n        if (year &gt; 1900 && year &lt;= today.getYear()) birthYear = year;\n        if (month &gt; 0 && month &lt;= 12) birthMonth = month;\n        if (day &gt; 0 && day &lt;= 31) birthDay = day;\n    }\n    \n    public String getBirthDate() {\n        String month;\n        if (birthMonth &lt; 10) month = \"0\" + birthMonth;\n        else month = \"\" + birthMonth;\n        return birthYear + \"/\" + month + \"/\" + birthDay;\n    }\n    \n    public String getFirstName() {\n        return firstName;\n    }\n    \n    public String getFamilyName() {\n        return familyName;\n    }\n    \n    public void print() {\n        System.out.print(firstName + \" \" + familyName);\n        System.out.println(\" born on \" + getBirthDate());\n    }\n    \n}"
  },
  {
    "objectID": "slides-04-03.html#subclass",
    "href": "slides-04-03.html#subclass",
    "title": "Inheritance",
    "section": "Subclass",
    "text": "Subclass\nCreate a class called Student that extends the Person class. Add the following instance variables:\n\nAdmissions Year\nGraduation Year\nMajor\nEmail address (or only netID)\n\nWhat public and private methods?\nWrite a constructor method, invoke base-cass constructor using super keyword"
  },
  {
    "objectID": "slides-04-03.html#subclass-solution",
    "href": "slides-04-03.html#subclass-solution",
    "title": "Inheritance",
    "section": "Subclass – solution",
    "text": "Subclass – solution\nimport java.time.LocalDate;\n\npublic class Student extends Person {\n    private int admissionYear;\n    \n    public Student(String first, String family,\n                   int admissionYear) {\n        // invoke base-class constructor\n        super(first, family);\n        LocalDate today = LocalDate.now(); \n        if (admissionYear &gt; 1900 && admissionYear &lt;= today.getYear()) \n            this.admissionYear = admissionYear;\n    }\n    \n    public int getAdmission() {\n        return admissionYear;\n    }\n    \n    // override annotation\n    @Override public void print() {\n        super.print();\n        System.out.println(\"Admitted in \" + admissionYear);\n    }\n\n}"
  }
]