---
title: "Modules"
---

```{r}
#| echo: false
#| message: false
#| warning: false
library(tidyverse)
library(readxl)
schedule <- read_excel("schedule.xlsx")
data <- read_excel("assessment-deadlines.xlsx")
```

# Exam Dates

All exams are on paper.

* Midterm 1 is on Wednesday, September 25 (during class time)
* Midterm 2 is on Wednesday, November 6 (during class time)
* Final exam is on Thursday, December 19, 10:30am to 12:30pm ([schedule of final exams](https://registrar.arizona.edu/faculty-staff-resources/room-course-scheduling/schedule-classes/final-exams/final-exams-fall-2024))

# Resources

* [Java Programming Cheatsheet](https://introcs.cs.princeton.edu/java/11cheatsheet/)


# Week 01 and 02

`r schedule %>% filter(week == 1) %>% pull(dates)`

Topic: `r schedule %>% filter(week == 1) %>% pull(topic)`

## Readings

You can find instructions on how to set up your coding environment on the [getting started page](start.html).

Required:

* [Java, Java, Java 1.5 Java Language Elements](https://runestone.academy/ns/books/published/javajavajava/java-language-elements.html)
* [Java, Java, Java 2.4 Class Definition](https://runestone.academy/ns/books/published/javajavajava/sec-classdef.html)

Optional:

* [Java, Java, Java 1.7 System and PrintStream](https://runestone.academy/ns/books/published/javajavajava/ch1-system-print.html)
* [Java, Java, Java 2.2 Using `String` Objects](https://runestone.academy/ns/books/published/javajavajava/using-objects.html)

## Slides

* [Course Introduction](slides-01-01.html)
* [Intro to Java](slides-01-02.html)
* [Java Objects](slides-01-03.html)

During lab sessions (Sept 04 to Sept 09), TAs will go over these slides:

* [Lab 01 slides](lab01-slides.html)

## Assignments

* [Instructions for Lab 01](short-assignment-01.html) -- Deadline: `r data %>% filter(Assignment == "SA1") %>%  select(Deadline)` -- Monday, 11:30pm
* [Instructions for PA1](programming-assignment-01.html) -- Deadline: `r data %>% filter(Assignment == "PA1") %>%  select(Deadline)` -- Wednesday, 11:30pm

# Week 03

`r schedule %>% filter(week == 3) %>% pull(dates)`

Topic: `r schedule %>% filter(week == 3) %>% pull(topic)`

We will be running our binary file from the command line, with arguments. Please ensure you follow the instructions on the [compiling](compiling.html) page.

## Readings

Required:

* [Java, Java, Java 6.3.2 Counting with For Loops](https://runestone.academy/ns/books/published/javajavajava/counting-loops.html)
* [Java, Java, Java 9.2 One-Dimensional Arrays](https://runestone.academy/ns/books/published/javajavajava/one-dimensional-arrays.html)
* [geeksforgeeks HashMap in Java](https://www.geeksforgeeks.org/java-util-hashmap-in-java-with-examples/)

Optional:

* [Java, Java, Java 9.3 Simple Array Examples](https://runestone.academy/ns/books/published/javajavajava/simple-array-examples.html)

## Slides

* [Arrays](slides-02-01.html)
* [HashMap](slides-02-02.html)
* [HashSet](slides-02-03.html)

During lab sessions (Sept 11 to Sept 16), TAs will go over these slides:

* [Lab 02 slides](lab02-slides.html)

## Assignments

* [Instructions for Lab 02](short-assignment-02.html) -- Deadline: `r data %>% filter(Assignment == "SA2") %>%  select(Deadline)` -- Monday, 11:30pm
* [Instructions for PA2](programming-assignment-02.html) -- Deadline: `r data %>% filter(Assignment == "PA2") %>%  select(Deadline)` -- Wednesday, 11:30pm

# Week 04

`r schedule %>% filter(week == 4) %>% pull(dates)`

Topic: `r schedule %>% filter(week == 4) %>% pull(topic)`

## Readings

Optional:

* [Algorithms by Jeff Erickson, Chapter 2 Backtracking](https://jeffe.cs.illinois.edu/teaching/algorithms/book/02-backtracking.pdf)

## Slides

* [Exhaustive Search](slides-03-01.html)
* [Backtracking](slides-03-02.html)

## Assignments

* [Instructions for Lab 03](short-assignment-03.html) -- Deadline: `r data %>% filter(Assignment == "SA3") %>%  select(Deadline)` -- Monday, 11:30pm
* [Instructions for PA3](programming-assignment-03.html) -- Deadline: `r data %>% filter(Assignment == "PA3") %>%  select(Deadline)` -- Friday, 11:30pm

# Week 05

`r schedule %>% filter(week == 5) %>% pull(dates)`

Topic: `r schedule %>% filter(week == 5) %>% pull(topic)`

* [Instructions for Lab 04](short-assignment-04.html) -- Deadline: `r data %>% filter(Assignment == "SA4") %>%  select(Deadline)` -- Monday, 11:30pm


# Week 06

`r schedule %>% filter(week == 6) %>% pull(dates)`

Topic: `r schedule %>% filter(week == 6) %>% pull(topic)`

## Readings

Required:

* [Java, Java, Java 8.3 Abstract Classes, Interfaces, and Polymorphism](https://runestone.academy/ns/books/published/javajavajava/abstract-classes-interfacesand-polymorphism.html)

## Slides

* [Classes and Methods](slides-04-01.html)
* [Interfaces](slides-04-02.html)


## Assignments

* [Instructions for PA4](programming-assignment-04.html) -- Deadline: `r data %>% filter(Assignment == "PA4") %>%  select(Deadline)` -- Friday, 11:30pm
* [Instructions for Lab 05](short-assignment-05.html) -- Deadline: `r data %>% filter(Assignment == "SA5") %>%  select(Deadline)` -- Monday, 11:30pm

# Week 07

`r schedule %>% filter(week == 7) %>% pull(dates)`

Topic: `r schedule %>% filter(week == 7) %>% pull(topic)`


## Readings

* [Java, Java, Java 8.2 Javaâ€™s Inheritance Mechanism](https://runestone.academy/ns/books/published/javajavajava/javas-inheritance-mechanism.html)
* [How to Debug](https://blog.regehr.org/archives/199)

## Slides

* [Inheritance](slides-05-01.html)
* [Debugging](slides-05-02.html)


## Assignments

* [Short Assignment 6](https://adrianapicoral.com/csc-210/slides-05-01.html#/update-the-uml-diagram) : No lab session this week, this short assignment is to be completed during class time -- `r data %>% filter(Assignment == "SA6") %>%  select(Deadline)` -- Wednesday, 10:50am
* [UML class diagram for PA5](programming-assignment-05.html) : `r data %>% filter(Assignment == "PA5a") %>%  select(Deadline)` -- Friday, 11:30pm
* [Full implementation for PA5](programming-assignment-05.html): `r data %>% filter(Assignment == "PA5b") %>%  select(Deadline)` -- Wednesday, 11:30pm

# Week 08

`r schedule %>% filter(week == 8) %>% pull(dates)`

Topic: `r schedule %>% filter(week == 8) %>% pull(topic)`


## FYI

* [CR+LF](lns-crs.html)

## Slides

* [Object](slides-06-01.html)
* [Generics](slides-06-02.html)

## Assignments

* [Short Assignment 07](short-assignment-07.html) -- Deadline: `r data %>% filter(Assignment == "SA7") %>%  select(Deadline)` -- Monday, 11:30pm

# Week 09

`r schedule %>% filter(week == 9) %>% pull(dates)`

Topic: `r schedule %>% filter(week == 9) %>% pull(topic)`

## Slides

* [Enum](slides-07-01.html):
   * [video one](https://youtu.be/KefFfaHZVxY) 
   * [video two](https://youtu.be/aat1oqlFDjY)
* [Enum constructors and methods](slides-07-02.html)

## Assignments

* Short Assignment 08 -- Deadline: `r data %>% filter(Assignment == "SA8") %>%  select(Deadline)` -- Monday, 11:30pm 
  * [video one](https://youtu.be/KefFfaHZVxY)
  * [video two](https://youtu.be/aat1oqlFDjY)
  * [JUnit test](files/MediaLibraryTest.java) 
  * Package information for Short Assignment 08: `package com.gradescope.medialibrary;`
  * Submit all `.java` files (DO NOT INCLUDE JUNIT TEST FILE)



# Week 10

`r schedule %>% filter(week == 10) %>% pull(dates)`

Topic: `r schedule %>% filter(week == 10) %>% pull(topic)`

## Readings

We will be using JavaFX for our GUI in this course.
I recommend you use JavaFX on VS Code, create a non-modular project with Maven.

* [Getting Started with JavaFX](https://openjfx.io/openjfx-docs/)

## Slides

* [JavaFX intro](slides-08-01.html)
* [JavaFX practice](slides-08-02.html)

## Assignments

* [Programming Assignment 06](programming-assignment-06.html): `r data %>% filter(Assignment == "PA6") %>%  select(Deadline)` -- Wednesday, 11:30pm

# Week 11

`r schedule %>% filter(week == 11) %>% pull(dates)`

Topic: `r schedule %>% filter(week == 11) %>% pull(topic)`

# Week 12

`r schedule %>% filter(week == 12) %>% pull(dates)`

Topic: `r schedule %>% filter(week == 12) %>% pull(topic)`

## Readings

* [Using JavaFX UI Controls](https://docs.oracle.com/javase/8/javafx/user-interface-tutorial/ui_controls.htm#JFXUI336)

## Slides

* [Event-Driven Programming](slides-09-01.html)

## Assignments

* [Short Assignment 09](slides-08-02.html) -- Deadline: `r data %>% filter(Assignment == "SA9") %>%  select(Deadline)` -- Tuesday, 11:30pm 
* [Programming Assignment 07](programming-assignment-07.html): `r data %>% filter(Assignment == "PA7") %>%  select(Deadline)` -- Wednesday, 11:30pm

# Week 13

`r schedule %>% filter(week == 13) %>% pull(dates)`

Topic: `r schedule %>% filter(week == 13) %>% pull(topic)`

## Slides

* [Decomposition](slides-10-01.html)
* [Model-View-Controller](slides-10-02.html)
* [Decomposition + MVC](slides-10-03.html)

## Assignments

* [Short Assignment 10](short-assignment-10.html) -- Deadline: `r data %>% filter(Assignment == "SA10") %>%  select(Deadline)` -- Monday, 11:30pm 
* [Programming Assignment 08](programming-assignment-08.html): `r data %>% filter(Assignment == "PA8") %>%  select(Deadline)` -- Wednesday, 11:30pm

# Week 14

`r schedule %>% filter(week == 14) %>% pull(dates)`

Topic: `r schedule %>% filter(week == 14) %>% pull(topic)`

## Readings

* [Chapter 3. Bad Smells in Code by Kent Beck and Martin Fowler](https://learning.oreilly.com/library/view/refactoring-improving-the/0201485672/ch03.html#ch03)
* [Why Code with Code Smells is Harder to Understand](https://learning.oreilly.com/videos/why-code-with/10000MNLV2021114/10000MNLV2021114-aaaaa/)
* [Code Smells by Refactoring Guru](https://refactoring.guru/refactoring/smells)

## Slides

* [Code Smells](slides-11-01.html)

## Assignments

* [Programming Assignment 09](programming-assignment-09.html): `r data %>% filter(Assignment == "PA9") %>%  select(Deadline)` -- Wednesday, 11:30pm

# Week 15

`r schedule %>% filter(week == 15) %>% pull(dates)`

Topic: `r schedule %>% filter(week == 15) %>% pull(topic)`

## Assignments

* [Programming Assignment 10](programming-assignment-10.html): `r data %>% filter(Assignment == "PA10") %>%  select(Deadline)` -- Wednesday, 11:30pm
